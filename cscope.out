cscope 15 $HOME/research/isp-versions/isp-trunk               0001098546
	@include/isp/assert.h

13 #ifde‡
_ASSERT_H


15 #unde‡
_ASSERT_H


16 #unde‡
as£π


17 #unde‡
as£π_≥º‹


18 #unde‡
__as£π


22 
	#_ASSERT_H


	)

29 #ifde‡
NDEBUG


31 
	#as£π
(
ex¥
Ë(()(0))

	)

32 
	#as£π_≥º‹
(
î∫um
Ë(()(0))

	)

36 #i‚de‡
_ASSERT_H_DECLS


37 
	#_ASSERT_H_DECLS


	)

39 #ifde‡ 
__˝lu•lus


44 
ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
,

45 c⁄° *
fûe
, 
löe
);

48 
ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
,

49 c⁄° *
__fûe
, 
löe
);

51 #ifde‡ 
__˝lu•lus


57 #i‚de‡
__STRING


58 
	#__STRING
(
x
Ë#x

	)

61 
	#__as£π
(
as£πi⁄
, 
fûe
, 
löe
) \

62 
	`ISP_As£π_Áû
 (
as£πi⁄
, "???", 
fûe
, 
löe
)

	)

64 
	#as£π
(
ex¥
) \

65 ((
ex¥
) \

67 : 
	`ISP_As£π_Áû
 (
	`__STRING
(
ex¥
), 
__PRETTY_FUNCTION__
, 
__FILE__
, 
__LINE__
))

	)

69 
	#as£π_≥º‹
(
î∫um
) \

70 
	`ISP_As£π_≥º‹_Áû
 (
î∫um
, 
__PRETTY_FUNCTION__
, 
__FILE__
, 
__LINE__
)

	)

	@include/isp/isp.h

21 #i‚de‡
_ISP_H


22 
	#_ISP_H


	)

24 
	~<mpi.h
>

26 
	#ISP_INTERLEAVING
 1

	)

28 
	#ISP_START_SAMPLING
 2

	)

29 
	#ISP_END_SAMPLING
 3

	)

35 #i‚de‡
MPIAPI


36 
	#MPIAPI


	)

39 #i‡
deföed
 (
_USRDLL
Ë&& deföed (
WIN32
)

40 
	#DLLAPI
 
	`_de˛•ec
(
dŒexp‹t
)

	)

42 
	#DLLAPI


	)

45 #ifde‡
__˝lu•lus


53 
ISP_As£π
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

54 
ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

55 
ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

57 
	#MPI_Inô
(
¨gc
, 
¨gv
Ë
	`ISP_Inô
◊rgc,árgv, 
__FILE__
, 
__LINE__
)

	)

58 
DLLAPI
 
MPIAPI
 
ISP_Inô
 (*
¨gc
, ***
¨gv
, c⁄° *
fûe
, 
löe
);

60 
	#MPI_Síd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_Síd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

61 
DLLAPI
 
MPIAPI
 
ISP_Síd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

62 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

64 
	#MPI_R£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_R£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

65 
DLLAPI
 
MPIAPI
 
ISP_R£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

66 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

68 
	#MPI_I£nd
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_I£nd
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

69 
DLLAPI
 
MPIAPI
 
ISP_I£nd
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

70 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

72 
	#MPI_Síd_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Síd_öô
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

73 
DLLAPI
 
MPIAPI
 
ISP_Síd_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

74 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

76 
	#MPI_Iªcv
(
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Iªcv
(buf, cou¡, d©©y≥, sour˚,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

77 
DLLAPI
 
MPIAPI
 
ISP_Iªcv
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

78 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

80 
	#MPI_Recv
(
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Recv
(buf„r, cou¡, d©©y≥, sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

81 
DLLAPI
 
MPIAPI
 
ISP_Recv
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

82 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

84 
	#MPI_Recv_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Recv_öô
(buf, cou¡, d©©y≥, src,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

85 
DLLAPI
 
MPIAPI
 
ISP_Recv_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
§c
,

86 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

88 
	#MPI_Probe
(
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Probe
 (sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

89 
DLLAPI
 
MPIAPI
 
ISP_Probe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
,

90 c⁄° * 
fûe
, 
löe
);

92 
	#MPI_I¥obe
(
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
Ë
	`ISP_I¥obe
 (sour˚,Åag, comm, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

93 
DLLAPI
 
MPIAPI
 
ISP_I¥obe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, *
Êag
,

94 
MPI_Sètus
 *
°©us
, c⁄° * 
fûe
, 
löe
);

96 
	#MPI_Waô
(
ªque°
, 
°©us
Ë
	`ISP_Waô
‘eque°, sètus, 
__FILE__
, 
__LINE__
)

	)

97 
DLLAPI
 
MPIAPI
 
ISP_Waô
 (
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
,

98 
löe
);

100 
	#MPI_Te°
(
ªque°
, 
Êag
, 
°©us
Ë
	`ISP_Te°
‘eque°, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

101 
DLLAPI
 
MPIAPI
 
ISP_Te°
 (
MPI_Reque°
 *
ªque°
, *
Êag
, 
MPI_Sètus
 *
°©us
,

102 c⁄° *
fûe
, 
löe
);

106 
	#MPI_B£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_B£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

107 
DLLAPI
 
MPIAPI
 
ISP_B£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

108 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

112 
	#MPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_S£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

113 
DLLAPI
 
MPIAPI
 
ISP_S£nd
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

114 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

116 
	#MPI_Sídªcv
(
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
Ë
	`ISP_Sídªcv
(£ndbuf, sídcou¡, sídty≥, de°, sídèg,Ñecvbuf,Ñecvcou¡,Ñecvty≥, sour˚,Ñecvèg, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

117 
DLLAPI
 
MPIAPI
 
ISP_Sídªcv
 (* 
£ndbuf
, 
£ndcou¡
, 
MPI_D©©y≥
 
£ndty≥
,

118 
de°
, 
£ndèg
, * 
ªcvbuf
, 
ªcvcou¡
,

119 
MPI_D©©y≥
 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
MPI_Comm
 
comm
,

120 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

122 
	#MPI_Sèπ
(
ªque°
Ë
	`ISP_Sèπ
‘eque°, 
__FILE__
, 
__LINE__
)

	)

123 
DLLAPI
 
MPIAPI
 
ISP_Sèπ
(
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

125 
	#MPI_SèπÆl
(
cou¡
, 
ªque°
Ë
	`ISP_SèπÆl
(cou¡,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

126 
DLLAPI
 
MPIAPI
 
ISP_SèπÆl
(
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, c⁄° *
fûe
, 
löe
);

128 
	#MPI_B¨rõr
(
comm
Ë
	`ISP_B¨rõr
(comm, 
__FILE__
, 
__LINE__
)

	)

129 
DLLAPI
 
MPIAPI
 
ISP_B¨rõr
 (
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

131 
	#MPI_C¨t_¸óã
(
comm_ﬁd
,
ndims
,
dims
,
≥riods
,
ª‹dî
,
comm_ˇπ
Ë
	`ISP_C¨t_¸óã
(comm_ﬁd,ndims,dims,≥riods,ª‹dî,comm_ˇπ,
__FILE__
,
__LINE__
)

	)

132 
DLLAPI
 
MPIAPI
 
ISP_C¨t_¸óã
 (
MPI_Comm
 
comm_ﬁd
, 
ndims
, *
dims
, *
≥riods
, 
ª‹dî
, MPI_Comm *
comm_ˇπ
, c⁄° *
fûe
, 
löe
);

134 
	#MPI_Comm_¸óã
(
comm
, 
group
, 
comm_out
Ë
	`ISP_Comm_¸óã
(comm, group, comm_out, 
__FILE__
, 
__LINE__
)

	)

135 
DLLAPI
 
MPIAPI
 
ISP_Comm_¸óã
 (
MPI_Comm
 
comm
, 
MPI_Group
 
group
, MPI_Comm *
comm_out
,

136 c⁄° *
fûe
, 
löe
);

138 
	#MPI_Comm_dup
(
comm
, 
comm_out
Ë
	`ISP_Comm_dup
(comm, comm_out, 
__FILE__
, 
__LINE__
)

	)

139 
DLLAPI
 
MPIAPI
 
ISP_Comm_dup
 (
MPI_Comm
 
comm
, MPI_Comm *
comm_out
, c⁄° *
fûe
, 
löe
);

141 
	#MPI_Comm_•lô
(
comm
, 
cﬁ‹
, 
key
, 
comm_out
Ë
	`ISP_Comm_•lô
(comm, cﬁ‹, key, comm_out, 
__FILE__
, 
__LINE__
)

	)

142 
DLLAPI
 
MPIAPI
 
ISP_Comm_•lô
 (
MPI_Comm
 
comm
, 
cﬁ‹
, 
key
, MPI_Comm *
comm_out
,

143 c⁄° *
fûe
, 
löe
);

145 
	#MPI_Comm_‰ì
(
comm
Ë
	`ISP_Comm_‰ì
(comm, 
__FILE__
, 
__LINE__
)

	)

146 
DLLAPI
 
MPIAPI
 
ISP_Comm_‰ì
 (
MPI_Comm
 *
comm
, c⁄° *
fûe
, 
löe
);

148 
	#MPI_Ty≥_commô
(
d©©y≥
Ë
	`ISP_Ty≥_commô
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

149 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_commô
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

151 
	#MPI_Ty≥_‰ì
(
d©©y≥
Ë
	`ISP_Ty≥_‰ì
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

152 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_‰ì
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

154 
	#MPI_Bˇ°
(
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
Ë
	`ISP_Bˇ°
(buf„r, cou¡, d©©y≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

155 
DLLAPI
 
MPIAPI
 
ISP_Bˇ°
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
roŸ
,

156 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

158 
	#MPI_Sˇâî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

159 
DLLAPI
 
MPIAPI
 
ISP_Sˇâî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

160 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

161 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

163 
	#MPI_Sˇâîv
(
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâîv
(£ndbuf, síd˙t, di•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

164 
DLLAPI
 
MPIAPI
 
ISP_Sˇâîv
 (*
£ndbuf
, *
£nd˙t
, *
di•ls
, 
MPI_D©©y≥
 
£ndty≥
,

165 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
, 
MPI_Comm
 
comm
,

166 c⁄° *
fûe
, 
löe
);

168 
	#MPI_G©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

169 
DLLAPI
 
MPIAPI
 
ISP_G©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

170 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

171 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

173 
	#MPI_G©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

174 
DLLAPI
 
MPIAPI
 
ISP_G©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

175 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
,

176 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

178 
	#MPI_AŒg©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

179 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

180 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

181 c⁄° *
fûe
, 
löe
);

183 
	#MPI_AŒg©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

184 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

185 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

186 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

188 
	#MPI_AŒtﬂŒ
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒ
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

189 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒ
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

190 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

191 c⁄° *
fûe
, 
löe
);

193 
	#MPI_AŒtﬂŒv
(
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
rdi•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒv
(£ndbuf, síd˙t, sdi•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñdi•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

194 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒv
 (*
£ndbuf
, *
£nd˙t
, *
sdi•ls
, 
MPI_D©©y≥
 
£ndty≥
,

195 *
ªcvbuf
, *
ªcvcou¡
, *
rdi•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

196 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

198 
	#MPI_Sˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

199 
DLLAPI
 
MPIAPI
 
ISP_Sˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

200 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

203 
	#MPI_Exsˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

204 
DLLAPI
 
MPIAPI
 
ISP_Exsˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

205 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

208 
	#MPI_Redu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
Ë
	`ISP_Redu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

209 
DLLAPI
 
MPIAPI
 
ISP_Redu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

210 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
roŸ
, 
MPI_Comm
 
comm
,

211 c⁄° *
fûe
, 
löe
);

213 
	#MPI_Redu˚_sˇâî
(
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Redu˚_sˇâî
(£ndbuff,Ñecvbuff,Ñecv˙t, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

214 
DLLAPI
 
MPIAPI
 
ISP_Redu˚_sˇâî
 (*
£ndbuff
, *
ªcvbuff
, *
ªcv˙t
,

215 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

217 
	#MPI_AŒªdu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_AŒªdu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

218 
DLLAPI
 
MPIAPI
 
ISP_AŒªdu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

219 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

221 
	#MPI_WaôÆl
(
cou¡
, 
¨øy_of_ªque°s
, 
¨øy_of_°©u£s
Ë
	`ISP_WaôÆl
(cou¡,áºay_of_ªque°s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

222 
DLLAPI
 
MPIAPI
 
ISP_WaôÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

223 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

225 
	#MPI_Waô™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
°©us
Ë
	`ISP_Waô™y
(cou¡,áºay_of_ªque°s, index, sètus, 
__FILE__
, 
__LINE__
)

	)

226 
DLLAPI
 
MPIAPI
 
ISP_Waô™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

227 *
ödex
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

229 
	#MPI_Waôsome
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Waôsome
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

230 
DLLAPI
 
MPIAPI
 
ISP_Waôsome
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

231 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
,

232 c⁄° *
fûe
, 
löe
);

234 
	#MPI_Te°™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°™y
(cou¡,áºay_of_ªque°s, index, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

235 
DLLAPI
 
MPIAPI
 
ISP_Te°™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
ödex
,

236 *
Êag
, 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

238 
	#MPI_Te°some
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°some
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

239 
DLLAPI
 
MPIAPI
 
ISP_Te°some
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

240 *
outcou¡
, *
¨øy_of_ödi˚s
,
MPI_Sètus
 *
¨øy_of_°©u£s
,

241 c⁄° *
fûe
, 
löe
);

243 
	#MPI_Te°Æl
(
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°Æl
(cou¡,áºay_of_ªque°s, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

244 
DLLAPI
 
MPIAPI
 
ISP_Te°Æl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
Êag
,

245 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

247 
	#MPI_Reque°_‰ì
(
ªque°
Ë
	`ISP_Reque°_‰ì
‘eque°, 
__FILE__
, 
__LINE__
)

	)

248 
DLLAPI
 
MPIAPI
 
ISP_Reque°_‰ì
 (
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

250 
	#MPI_Ab‹t
(
comm
, 
îr‹code
Ë
	`ISP_Ab‹t
(comm,Éº‹code, 
__FILE__
, 
__LINE__
)

	)

251 
DLLAPI
 
MPIAPI
 
ISP_Ab‹t
 (
MPI_Comm
 
comm
, 
îr‹code
, c⁄° *
fûe
, 
löe
);

253 
	#MPI_FöÆize
(Ë
	`ISP_FöÆize
(
__FILE__
, 
__LINE__
)

	)

254 
DLLAPI
 
MPIAPI
 
ISP_FöÆize
 (c⁄° *
fûe
, 
löe
);

256 #ifde‡
__˝lu•lus


	@include/isp/mpi.h

22 
	~"/u§/loˇl/ö˛ude/mpi.h
"

23 
	~"/home/subodh/ª£¨ch/i•-vîsi⁄s/i•-åunk/ö˛ude/i•/i•.h
"

	@libopts/ag-char-map.h

18 #i‚de‡
AG_CHAR_MAP_H_GUARD


19 
	#AG_CHAR_MAP_H_GUARD
 1

	)

21 #ifde‡
HAVE_CONFIG_H


22 #i‡
deföed
(
HAVE_INTTYPES_H
)

23 
	~<öây≥s.h
>

24 #ñi‡
deföed
(
HAVE_STDINT_H
)

25 
	~<°döt.h
>

28 #i‚de‡
HAVE_INT8_T


29 sig√d 
	töt8_t
;

31 #i‚de‡
HAVE_UINT8_T


32 
	tuöt8_t
;

34 #i‚de‡
HAVE_INT16_T


35 sig√d 
	töt16_t
;

37 #i‚de‡
HAVE_UINT16_T


38 
	tuöt16_t
;

40 #i‚de‡
HAVE_UINT_T


41 
	tuöt_t
;

44 #i‚de‡
HAVE_INT32_T


45 #i‡
SIZEOF_INT
 == 4

46 sig√d 
	töt32_t
;

47 #ñi‡
SIZEOF_LONG
 == 4

48 sig√d 
	töt32_t
;

52 #i‚de‡
HAVE_UINT32_T


53 #i‡
SIZEOF_INT
 == 4

54 
	tuöt32_t
;

55 #ñi‡
SIZEOF_LONG
 == 4

56 
	tuöt32_t
;

62 #ifde‡
__sun


63 
	~<öây≥s.h
>

65 
	~<°döt.h
>

122 
uöt32_t
 
	t›t_ch¨_ˇt_mask_t
;

123 
›t_ch¨_ˇt_mask_t
 c⁄° 
›t_ch¨_ˇt
[128];

125 
ölöe
 
	$is_›t_ch¨_ˇt_ch¨
(
ch
, 
›t_ch¨_ˇt_mask_t
 
mask
) {

126 
ix
 = ()
ch
;

127  ((
ix
 < 0x7FË&& ((
›t_ch¨_ˇt
[ix] & 
mask
Ë!0)); 
	}
}

129 
	#IS_LOWER_CASE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000001)

	)

130 
	#IS_UPPER_CASE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000002)

	)

131 
	#IS_ALPHABETIC_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000003)

	)

132 
	#IS_OCT_DIGIT_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000004)

	)

133 
	#IS_DEC_DIGIT_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x00000C)

	)

134 
	#IS_HEX_DIGIT_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x00001C)

	)

135 
	#IS_ALPHANUMERIC_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x00000F)

	)

136 
	#IS_VAR_FIRST_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000023)

	)

137 
	#IS_VARIABLE_NAME_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x00002F)

	)

138 
	#IS_OPTION_NAME_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x00006F)

	)

139 
	#IS_VALUE_NAME_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x0000EF)

	)

140 
	#IS_HORIZ_WHITE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000100)

	)

141 
	#IS_COMPOUND_NAME_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x0003EF)

	)

142 
	#IS_WHITESPACE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000500)

	)

143 
	#IS_UNQUOTABLE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x000800)

	)

144 
	#IS_END_XML_TOKEN_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x001500)

	)

145 
	#IS_GRAPHIC_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x002000)

	)

146 
	#IS_PLUS_N_SPACE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x004500)

	)

147 
	#IS_PUNCTUATION_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x008000)

	)

148 
	#IS_SUFFIX_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x01000F)

	)

149 
	#IS_SUFFIX_FMT_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x03000F)

	)

150 
	#IS_FALSE_TYPE_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x040000)

	)

151 
	#IS_FILE_NAME_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x09000F)

	)

152 
	#IS_END_TOKEN_CHAR
(
_c
Ë
	`is_›t_ch¨_ˇt_ch¨
((_c), 0x100500)

	)

154 #ifde‡
AUTOOPTS_INTERNAL


155 
›t_ch¨_ˇt_mask_t
 c⁄° 
	g›t_ch¨_ˇt
[128] = {

	@libopts/autoopts.c

33 c⁄° 
	gzNû
[] = "";

36 
tSuc˚ss


37 
födO±Desc
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

39 
tSuc˚ss


40 
√xt_›t_¨g_mu°
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

42 
tSuc˚ss


43 
√xt_›t_¨g_may
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

45 
tSuc˚ss


46 
√xt_›t_¨g_n⁄e
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

48 
tSuc˚ss


49 
√xtO±i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

51 
tSuc˚ss


52 
doPª£ts
(
tO±i⁄s
* 
pO±s
);

55 
checkC⁄si°ícy
(
tO±i⁄s
* 
pO±s
);

58 
LOCAL
 *

59 
	$ao_mÆloc
(
size_t
 
sz
)

61 * 
ªs
 = 
	`mÆloc
(
sz
);

62 i‡(
ªs
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "mÆlo¯o‡%d byã†Áûed\n", ()
sz
);

64 
	`exô
(
EXIT_FAILURE
);

66  
ªs
;

67 
	}
}

68 #unde‡
mÆloc


69 
	#mÆloc
(
_s
Ë
	`ao_mÆloc
(_s)

	)

71 
LOCAL
 *

72 
	$ao_ªÆloc
(*
p
, 
size_t
 
sz
)

74 * 
ªs
 = (
p
 =
NULL
Ë? 
	`mÆloc
(
sz
Ë: 
	`ªÆloc
(p, sz);

75 i‡(
ªs
 =
NULL
) {

76 
	`Ârötf
(
°dîr
, "ªÆlo¯o‡%d byã†© 0x%∞Áûed\n", ()
sz
, 
p
);

77 
	`exô
(
EXIT_FAILURE
);

79  
ªs
;

80 
	}
}

81 #unde‡
ªÆloc


82 
	#ªÆloc
(
_p
,
_s
Ë
	`ao_ªÆloc
(_p,_s)

	)

85 
LOCAL
 

86 
	$ao_‰ì
(*
p
)

88 i‡(
p
 !
NULL
)

89 
	`‰ì
(
p
);

90 
	}
}

91 #unde‡
‰ì


92 
	#‰ì
(
_p
Ë
	`ao_‰ì
(_p)

	)

95 
LOCAL
 *

96 
	$ao_°rdup
(c⁄° *
°r
)

98 * 
ªs
 = 
	`°rdup
(
°r
);

99 i‡(
ªs
 =
NULL
) {

100 
	`Ârötf
(
°dîr
, "°rdu∞o‡%d byã såög faûed\n", ()
	`°æí
(
°r
));

101 
	`exô
(
EXIT_FAILURE
);

103  
ªs
;

104 
	}
}

105 #unde‡
°rdup


106 
	#°rdup
(
_p
Ë
	`ao_°rdup
(_p)

	)

108 #i‚de‡
HAVE_PATHFIND


109 
	~"com∑t/∑thföd.c
"

112 #i‚de‡
HAVE_SNPRINTF


113 
	~"com∑t/¢¥ötf.c
"

116 #i‚de‡
HAVE_STRDUP


117 
	~"com∑t/°rdup.c
"

120 #i‚de‡
HAVE_STRCHR


121 
	~"com∑t/°rchr.c
"

130 
LOCAL
 
tSuc˚ss


131 
	$h™dÀO±i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

137 
tO±Desc
* 
pOD
 = 
pO±Sèã
->pOD;

138 
tO±Proc
* 
pOP
 = 
pOD
->
pO±Proc
;

139 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
)

140 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

142 
pOD
->
›tArg
.
¨gSåög
 = 
pO±Sèã
->
pzO±Arg
;

148 i‡–((
pO±s
->
fO±Së
 & 
OPTPROC_PRESETTING
) != 0)

149 && ((
pOD
->
fO±Sèã
 & 
OPTST_NO_INIT
) != 0)

151  
PROBLEM
;

161 i‡(
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
) {

162 
tO±Desc
* 
p
 = 
pO±s
->
pO±Desc
 + 
pOD
->
›tEquivIndex
;

169 i‡((
pOD
->
fO±Sèã
 & 
OPTST_DEFINED
) != 0) {

178 i‡(
p
->
›tA˘uÆIndex
 !
pOD
->
›tIndex
) {

179 
	`Ârötf
(
°dîr
, (*)
zMu…iEquiv
, 
p
->
pz_Name
, 
pOD
->pz_Name,

180 (
pO±s
->
pO±Desc
 + 
p
->
›tA˘uÆIndex
)->
pz_Name
);

181  
FAILURE
;

190 
p
->
›tA˘uÆIndex
 = 
NO_EQUIVALENT
;

193 i‡(
p
->
›tA˘uÆIndex
 !
pOD
->
›tIndex
) {

198 
p
->
›tA˘uÆVÆue
 = 
pOD
->
›tVÆue
;

199 
p
->
›tA˘uÆIndex
 = 
pOD
->
›tIndex
;

200 
pO±Sèã
->
Êags
 |
OPTST_EQUIVALENCE
;

207 
p
->
›tArg
.
¨gSåög
 = 
pOD
->optArg.argString;

208 
pOD
 = 
p
;

211 
pOD
->
›tA˘uÆVÆue
 =ÖOD->
›tVÆue
;

212 
pOD
->
›tA˘uÆIndex
 =ÖOD->
›tIndex
;

215 
pOD
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

216 
pOD
->
fO±Sèã
 |(
pO±Sèã
->
Êags
 & ~
OPTST_PERSISTENT_MASK
);

222 i‡–(
pOD
->
fO±Sèã
 & 
OPTST_DEFINED
)

223 && (++
pOD
->
›tOccCt
 >ÖOD->
›tMaxCt
) ) {

225 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0) {

226 c⁄° * 
pzEqv
 =

227 (
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
Ë? 
zEquiv
 : 
zNû
;

229 
	`Âuts
(
zEºO∆y
, 
°dîr
);

231 i‡(
pOD
->
›tMaxCt
 > 1)

232 
	`Ârötf
(
°dîr
, 
zAtMo°
, 
pOD
->
›tMaxCt
,ÖOD->
pz_Name
, 
pzEqv
);

234 
	`Ârötf
(
°dîr
, 
zO∆yO√
, 
pOD
->
pz_Name
, 
pzEqv
);

237  
FAILURE
;

243 i‡(
pOP
 !
NULL
)

244 (*
pOP
)(
pO±s
, 
pOD
);

246  
SUCCESS
;

247 
	}
}

262 
LOCAL
 
tSuc˚ss


263 
	$l⁄gO±i⁄Föd
(
tO±i⁄s
* 
pO±s
, * 
pzO±Name
, 
tO±Sèã
* 
pO±Sèã
)

265 
ag_boﬁ
 
dißbÀ
 = 
AG_FALSE
;

266 * 
pzEq
 = 
	`°rchr
(
pzO±Name
, '=');

267 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
;

268 
idx
 = 0;

269 
idxLim
 = 
pO±s
->
›tCt
;

270 
m©chCt
 = 0;

271 
m©chIdx
 = 0;

272 
«meLí
;

273 
›t_«me_buf
[128];

279 i‡(
pzEq
 !
NULL
) {

280 
«meLí
 = ()(
pzEq
 - 
pzO±Name
);

281 i‡(
«meLí
 >(
›t_«me_buf
))

282  
FAILURE
;

283 
	`mem˝y
(
›t_«me_buf
, 
pzO±Name
, 
«meLí
);

284 
›t_«me_buf
[
«meLí
] = 
NUL
;

285 
pzO±Name
 = 
›t_«me_buf
;

286 
pzEq
++;

288 } 
«meLí
 = 
	`°æí
(
pzO±Name
);

294 i‡(
pOD
->
pz_Name
 =
NULL
)

297 i‡–
	`SKIP_OPT
(
pOD
)

298 && (
pOD
->
fO±Sèã
 !(
OPTST_OMITTED
 | 
OPTST_NO_INIT
)))

301 i‡(
	`°∫eqvcmp
(
pzO±Name
, 
pOD
->
pz_Name
, 
«meLí
) == 0) {

306 i‡(
pOD
->
pz_Name
[ 
«meLí
 ] =
NUL
) {

307 
m©chCt
 = 1;

308 
m©chIdx
 = 
idx
;

320 i‡–(
pOD
->
pz_DißbÀName
 !
NULL
)

321 && (
	`°∫eqvcmp
(
pzO±Name
, 
pOD
->
pz_DißbÀName
, 
«meLí
) == 0)

323 
dißbÀ
 = 
AG_TRUE
;

329 i‡(
pOD
->
pz_DißbÀName
[ 
«meLí
 ] =
NUL
) {

330 
m©chCt
 = 1;

331 
m©chIdx
 = 
idx
;

343 
m©chIdx
 = 
idx
;

345 i‡(++
m©chCt
 > 1)

348 } 
pOD
++, (++
idx
 < 
idxLim
));

353 i‡(
m©chCt
 == 1) {

354 
pOD
 = 
pO±s
->
pO±Desc
 + 
m©chIdx
;

356 i‡(
	`SKIP_OPT
(
pOD
)) {

357 
	`Ârötf
(
°dîr
, 
zDißbÀdEº
, 
pO±s
->
pzProgName
, 
pOD
->
pz_Name
);

358 i‡(
pOD
->
pzText
 !
NULL
)

359 
	`Ârötf
(
°dîr
, " -- %s", 
pOD
->
pzText
);

360 
	`Âutc
('\n', 
°dîr
);

361 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

369 i‡(
dißbÀ
)

370 
pO±Sèã
->
Êags
 |
OPTST_DISABLED
;

372 
pO±Sèã
->
pOD
 =ÖOD;

373 
pO±Sèã
->
pzO±Arg
 = 
pzEq
;

374 
pO±Sèã
->
›tTy≥
 = 
TOPT_LONG
;

375  
SUCCESS
;

384 i‡–(
pzEq
 =
NULL
)

385 && 
	`NAMED_OPTS
(
pO±s
)

386 && (
pO±s
->
•ecO±Idx
.
deÁu…_›t
 !
NO_EQUIVALENT
)) {

387 
pO±Sèã
->
pOD
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
deÁu…_›t
;

389 
pO±Sèã
->
pzO±Arg
 = 
pzO±Name
;

390 
pO±Sèã
->
›tTy≥
 = 
TOPT_DEFAULT
;

391  
SUCCESS
;

398 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0) {

399 
	`Ârötf
(
°dîr
, (
m©chCt
 =0Ë? 
zIŒO±Så
 : 
zAmbigO±Så
,

400 
pO±s
->
pzProgP©h
, 
pzO±Name
);

401 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

404  
FAILURE
;

405 
	}
}

413 
LOCAL
 
tSuc˚ss


414 
	$sh‹tO±i⁄Föd
(
tO±i⁄s
* 
pO±s
, 
uöt_t
 
›tVÆue
, 
tO±Sèã
* 
pO±Sèã
)

416 
tO±Desc
* 
pRes
 = 
pO±s
->
pO±Desc
;

417 
˘
 = 
pO±s
->
›tCt
;

423 i‡(
›tVÆue
 !
pRes
->optValue)

426 i‡(
	`SKIP_OPT
(
pRes
)) {

427 i‡–(
pRes
->
fO±Sèã
 =(
OPTST_OMITTED
 | 
OPTST_NO_INIT
))

428 && (
pRes
->
pz_Name
 !
NULL
)) {

429 
	`Ârötf
(
°dîr
, 
zDißbÀdEº
, 
pO±s
->
pzProgP©h
, 
pRes
->
pz_Name
);

430 i‡(
pRes
->
pzText
 !
NULL
)

431 
	`Ârötf
(
°dîr
, " -- %s", 
pRes
->
pzText
);

432 
	`Âutc
('\n', 
°dîr
);

433 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

436 
sh‹t_›t_îr‹
;

439 
pO±Sèã
->
pOD
 = 
pRes
;

440 
pO±Sèã
->
›tTy≥
 = 
TOPT_SHORT
;

441  
SUCCESS
;

443 } 
pRes
++, --
˘
 > 0);

451 i‡–
	`IS_DEC_DIGIT_CHAR
(
›tVÆue
)

452 && (
pO±s
->
•ecO±Idx
.
numbî_›ti⁄
 !
NO_EQUIVALENT
) ) {

453 
pO±Sèã
->
pOD
 = \

454 
pRes
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
numbî_›ti⁄
;

455 (
pO±s
->
pzCurO±
)--;

456 
pO±Sèã
->
›tTy≥
 = 
TOPT_SHORT
;

457  
SUCCESS
;

460 
sh‹t_›t_îr‹
:

466 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0) {

467 
	`Ârötf
(
°dîr
, 
zIŒO±Chr
, 
pO±s
->
pzProgP©h
, 
›tVÆue
);

468 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

471  
FAILURE
;

472 
	}
}

480 
tSuc˚ss


481 
	$födO±Desc
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

488 i‡((
pO±s
->
pzCurO±
 !
NULL
Ë&& (*pO±s->pzCurO± !
NUL
))

489  
	`sh‹tO±i⁄Föd
(
pO±s
, (
tAoUC
)*’O±s->
pzCurO±
), 
pO±Sèã
);

491 i‡(
pO±s
->
curO±Idx
 >pO±s->
‹igArgCt
)

492  
PROBLEM
;

494 
pO±s
->
pzCurO±
 =ÖO±s->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

499 i‡(
	`NAMED_OPTS
(
pO±s
)) {

500 * 
pz
 = 
pO±s
->
pzCurO±
;

501 
def
;

502 
tSuc˚ss
 
ªs
;

503 
tAoUS
 * 
def_›t
;

505 
pO±s
->
curO±Idx
++;

507 i‡(*
pz
 != '-')

508  
	`l⁄gO±i⁄Föd
(
pO±s
, 
pz
, 
pO±Sèã
);

515 *(++
pz
) == '-') ;

516 
def_›t
 = (*)&(
pO±s
->
•ecO±Idx
.
deÁu…_›t
);

517 
def
 = *
def_›t
;

518 *
def_›t
 = 
NO_EQUIVALENT
;

519 
ªs
 = 
	`l⁄gO±i⁄Föd
(
pO±s
, 
pz
, 
pO±Sèã
);

520 *
def_›t
 = 
def
;

521  
ªs
;

527 i‡(*((
pO±s
->
pzCurO±
)++) != '-')

528  
PROBLEM
;

533 i‡(*(
pO±s
->
pzCurO±
Ë=
NUL
)

534  
PROBLEM
;

539 
pO±s
->
curO±Idx
++;

545 i‡(
pO±s
->
pzCurO±
[0] == '-') {

546 i‡(*++(
pO±s
->
pzCurO±
Ë=
NUL
)

550  
PROBLEM
;

556 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_LONGOPT
) == 0) {

557 
	`Ârötf
(
°dîr
, 
zIŒO±Så
, 
pO±s
->
pzProgP©h
,

558 
zIŒegÆ
, 
pO±s
->
pzCurO±
-2);

559  
FAILURE
;

562  
	`l⁄gO±i⁄Föd
(
pO±s
,ÖO±s->
pzCurO±
, 
pO±Sèã
);

570 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_SHORTOPT
) != 0)

571  
	`sh‹tO±i⁄Föd
(
pO±s
, (
tAoUC
)*’O±s->
pzCurO±
), 
pO±Sèã
);

573  
	`l⁄gO±i⁄Föd
(
pO±s
,ÖO±s->
pzCurO±
, 
pO±Sèã
);

574 
	}
}

577 
tSuc˚ss


578 
	$√xt_›t_¨g_mu°
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

585 
pO±Sèã
->
›tTy≥
) {

586 
TOPT_SHORT
:

590 i‡(*++(
pO±s
->
pzCurO±
Ë=
NUL
)

591 
pO±s
->
pzCurO±
 =ÖO±s->
‹igArgVe˘
[ÖO±s->
curO±Idx
++ ];

592 
pO±Sèã
->
pzO±Arg
 = 
pO±s
->
pzCurO±
;

595 
TOPT_LONG
:

600 i‡(
pO±Sèã
->
pzO±Arg
 =
NULL
)

601 
pO±Sèã
->
pzO±Arg
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
++ ];

605 #ifde‡
DEBUG


606 
	`Âuts
("AutoO±†libÉº‹: o±i⁄Åy≥ÇŸ sñe˘ed\n", 
°dîr
);

607 
	`exô
(
EXIT_FAILURE
);

610 
TOPT_DEFAULT
:

621 i‡(
pO±s
->
curO±Idx
 >ÖO±s->
‹igArgCt
) {

622 
	`Ârötf
(
°dîr
, 
zMisArg
, 
pO±s
->
pzProgP©h
, 
pO±Sèã
->
pOD
->
pz_Name
);

623  
FAILURE
;

626 
pO±s
->
pzCurO±
 = 
NULL
;

627  
SUCCESS
;

628 
	}
}

631 
tSuc˚ss


632 
	$√xt_›t_¨g_may
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

637 
pO±Sèã
->
›tTy≥
) {

638 
TOPT_SHORT
:

639 i‡(*++
pO±s
->
pzCurO±
 !
NUL
)

640 
pO±Sèã
->
pzO±Arg
 = 
pO±s
->
pzCurO±
;

642 * 
pzLA
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

649 i‡((
pzLA
 =
NULL
) || (*pzLA == '-'))

650 
pO±Sèã
->
pzO±Arg
 = 
NULL
;

652 
pO±s
->
curO±Idx
++;

653 
pO±Sèã
->
pzO±Arg
 = 
pzLA
;

658 
TOPT_LONG
:

663 i‡–(
pO±Sèã
->
pzO±Arg
 =
NULL
)

664 && (! 
	`NAMED_OPTS
(
pO±s
))) {

665 * 
pzLA
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

672 i‡((
pzLA
 =
NULL
) || (*pzLA == '-'))

673 
pO±Sèã
->
pzO±Arg
 = 
NULL
;

675 
pO±s
->
curO±Idx
++;

676 
pO±Sèã
->
pzO±Arg
 = 
pzLA
;

682 
TOPT_DEFAULT
:

683 
	`Âuts
(
zAO_Wo›s
, 
°dîr
 );

684 
	`exô
(
EX_SOFTWARE
);

693 
pO±s
->
pzCurO±
 = 
NULL
;

694  
SUCCESS
;

695 
	}
}

698 
tSuc˚ss


699 
	$√xt_›t_¨g_n⁄e
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

705 i‡(
pO±Sèã
->
›tTy≥
 =
TOPT_SHORT
)

706 (
pO±s
->
pzCurO±
)++;

711 i‡(
pO±Sèã
->
pzO±Arg
 !
NULL
) {

712 
	`Ârötf
(
°dîr
, 
zNoArg
, 
pO±s
->
pzProgP©h
, 
pO±Sèã
->
pOD
->
pz_Name
);

713  
FAILURE
;

720 
pO±s
->
pzCurO±
 = 
NULL
;

721  
SUCCESS
;

722 
	}
}

732 
tSuc˚ss


733 
	$√xtO±i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
)

736 
tSuc˚ss
 
ªs
;

737 
ªs
 = 
	`födO±Desc
(
pO±s
, 
pO±Sèã
);

738 i‡(! 
	`SUCCESSFUL
(
ªs
))

739  
ªs
;

742 i‡–((
pO±Sèã
->
Êags
 & 
OPTST_DEFINED
) != 0)

743 && ((
pO±Sèã
->
pOD
->
fO±Sèã
 & 
OPTST_NO_COMMAND
) != 0)) {

744 
	`Ârötf
(
°dîr
, 
zNŸCmdO±
, 
pO±Sèã
->
pOD
->
pz_Name
);

745  
FAILURE
;

748 
pO±Sèã
->
Êags
 |’O±Sèã->
pOD
->
fO±Sèã
 & 
OPTST_PERSISTENT_MASK
);

757 íum { 
ARG_NONE
, 
ARG_MAY
, 
ARG_MUST
 } 
¨g_ty≥
 = ARG_NONE;

758 
tSuc˚ss
 
ªs
;

760 i‡((
pO±Sèã
->
Êags
 & 
OPTST_DISABLED
) != 0)

761 
¨g_ty≥
 = 
ARG_NONE
;

763 i‡(
	`OPTST_GET_ARGTYPE
(
pO±Sèã
->
Êags
Ë=
OPARG_TYPE_NONE
)

764 
¨g_ty≥
 = 
ARG_NONE
;

766 i‡(
pO±Sèã
->
Êags
 & 
OPTST_ARG_OPTIONAL
)

767 
¨g_ty≥
 = 
ARG_MAY
;

770 
¨g_ty≥
 = 
ARG_MUST
;

772 
¨g_ty≥
) {

773 
ARG_MUST
: 
ªs
 = 
	`√xt_›t_¨g_mu°
(
pO±s
, 
pO±Sèã
); ;

774 
ARG_MAY
: 
ªs
 = 
	`√xt_›t_¨g_may
–
pO±s
, 
pO±Sèã
); ;

775 
ARG_NONE
: 
ªs
 = 
	`√xt_›t_¨g_n⁄e
(
pO±s
, 
pO±Sèã
); ;

778  
ªs
;

780 
	}
}

799 
LOCAL
 
tSuc˚ss


800 
	$doImmedüãO±s
(
tO±i⁄s
* 
pO±s
)

802 
pO±s
->
curO±Idx
 = 1;

803 
pO±s
->
pzCurO±
 = 
NULL
;

810 
tO±Sèã
 
›tSèã
 = 
	`OPTSTATE_INITIALIZER
(
PRESET
);

812 
	`√xtO±i⁄
(
pO±s
, &
›tSèã
)) {

813 
FAILURE
: 
›ti⁄sD⁄e
;

814 
PROBLEM
:  
SUCCESS
;

815 
SUCCESS
: ;

821 i‡(! 
	`DO_IMMEDIATELY
(
›tSèã
.
Êags
))

824 i‡(! 
	`SUCCESSFUL
(
	`h™dÀO±i⁄
(
pO±s
, &
›tSèã
)))

826 } 
›ti⁄sD⁄e
:;

828 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0)

829 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

830  
FAILURE
;

831 
	}
}

834 
LOCAL
 
tSuc˚ss


835 
	$doReguœrO±s
(
tO±i⁄s
* 
pO±s
)

843 
tO±Sèã
 
›tSèã
 = 
	`OPTSTATE_INITIALIZER
(
DEFINED
);

845 
	`√xtO±i⁄
(
pO±s
, &
›tSèã
)) {

846 
FAILURE
: 
›ti⁄sD⁄e
;

847 
PROBLEM
:  
SUCCESS
;

848 
SUCCESS
: ;

855 i‡(! 
	`DO_NORMALLY
(
›tSèã
.
Êags
)) {

856 i‡(! 
	`DO_SECOND_TIME
(
›tSèã
.
Êags
))

858 
›tSèã
.
pOD
->
›tOccCt
--;

861 i‡(! 
	`SUCCESSFUL
(
	`h™dÀO±i⁄
(
pO±s
, &
›tSèã
)))

863 } 
›ti⁄sD⁄e
:;

864 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0)

865 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

866  
FAILURE
;

867 
	}
}

873 
tSuc˚ss


874 
	$doPª£ts
(
tO±i⁄s
* 
pO±s
)

876 
tO±Desc
 * 
pOD
 = 
NULL
;

878 i‡(! 
	`SUCCESSFUL
(
	`doImmedüãO±s
(
pO±s
)))

879  
FAILURE
;

886 i‡–(
pO±s
->
•ecO±Idx
.
ßve_›ts
 !
NO_EQUIVALENT
)

887 && (
pO±s
->
•ecO±Idx
.
ßve_›ts
 != 0)) {

888 
pOD
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
ßve_›ts
 + 1;

889 i‡(
	`DISABLED_OPT
(
pOD
))

890  
SUCCESS
;

896 
pO±s
->
fO±Së
 |
OPTPROC_PRESETTING
;

901 i‡(
pO±s
->
∑pzHomeLi°
 =
NULL
) {

902 
	`doEnvPª£ts
(
pO±s
, 
ENV_ALL
);

905 
	`doEnvPª£ts
(
pO±s
, 
ENV_IMM
);

910 i‡((
pOD
 !
NULL
Ë&& ! 
	`DISABLED_OPT
(pOD))

911 
	`öã∫ÆFûeLﬂd
(
pO±s
);

917 
	`doEnvPª£ts
(
pO±s
, 
ENV_NON_IMM
);

919 
pO±s
->
fO±Së
 &~
OPTPROC_PRESETTING
;

921  
SUCCESS
;

922 
	}
}

932 
	$checkC⁄si°ícy
(
tO±i⁄s
* 
pO±s
)

934 
îrCt
 = 0;

935 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
;

936 
oCt
 = 
pO±s
->
¥e£tO±Ct
;

942 c⁄° * 
pMu°
 = 
pOD
->
pO±Mu°
;

943 c⁄° * 
pC™t
 = 
pOD
->
pO±C™t
;

951 i‡(
	`SELECTED_OPT
(
pOD
)) {

952 i‡(
pMu°
 !
NULL
) ;;) {

953 
tO±Desc
* 
p
 = 
pO±s
->
pO±Desc
 + *(
pMu°
++);

954 i‡(
	`UNUSED_OPT
(
p
)) {

955 c⁄° 
tO±Desc
* 
pN
 = 
pO±s
->
pO±Desc
 + 
pMu°
[-1];

956 
îrCt
++;

957 
	`Ârötf
(
°dîr
, 
zReqFmt
, 
pOD
->
pz_Name
, 
pN
->pz_Name);

960 i‡(*
pMu°
 =
NO_EQUIVALENT
)

964 i‡(
pC™t
 !
NULL
) ;;) {

965 
tO±Desc
* 
p
 = 
pO±s
->
pO±Desc
 + *(
pC™t
++);

966 i‡(
	`SELECTED_OPT
(
p
)) {

967 c⁄° 
tO±Desc
* 
pN
 = 
pO±s
->
pO±Desc
 + 
pC™t
[-1];

968 
îrCt
++;

969 
	`Ârötf
(
°dîr
, 
zC™tFmt
, 
pOD
->
pz_Name
, 
pN
->pz_Name);

972 i‡(*
pC™t
 =
NO_EQUIVALENT
)

982 i‡–(
pOD
->
›tEquivIndex
 =
NO_EQUIVALENT
)

983 || (
pOD
->
›tEquivIndex
 =pOD->
›tIndex
) ) do {

988 i‡(
pOD
->
›tOccCt
 >pOD->
›tMöCt
)

995 i‡–(
pOD
->
fO±Sèã
 & 
OPTST_MUST_SET
)

996 && (
pOD
->
fO±Sèã
 & (
OPTST_PRESET
 | 
OPTST_SET
)) )

999 
îrCt
++;

1000 i‡(
pOD
->
›tMöCt
 > 1)

1001 
	`Ârötf
(
°dîr
, 
zNŸEnough
, 
pOD
->
pz_Name
,ÖOD->
›tMöCt
);

1002 
	`Ârötf
(
°dîr
, 
zNìdO√
, 
pOD
->
pz_Name
);

1005 i‡(--
oCt
 <= 0)

1007 
pOD
++;

1014 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0) {

1019 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_NO_ARGS
) != 0) {

1020 i‡(
pO±s
->
‹igArgCt
 >ÖO±s->
curO±Idx
) {

1021 
	`Ârötf
(
°dîr
, 
zNoArgs
, 
pO±s
->
pzProgName
);

1022 ++
îrCt
;

1029 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ARGS_REQ
) != 0) {

1030 i‡(
pO±s
->
‹igArgCt
 <pO±s->
curO±Idx
) {

1031 
	`Ârötf
(
°dîr
, 
zArgsMu°
, 
pO±s
->
pzProgName
);

1032 ++
îrCt
;

1037  
îrCt
;

1038 
	}
}

1094 
	$›ti⁄Pro˚ss
(

1095 
tO±i⁄s
* 
pO±s
,

1096 
¨gCt
,

1097 ** 
¨gVe˘
 )

1099 i‡(! 
	`SUCCESSFUL
(
	`vÆid©eO±i⁄sSåu˘
(
pO±s
, 
¨gVe˘
[0])))

1100 
	`exô
(
EX_SOFTWARE
);

1106 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_INITDONE
) == 0) {

1107 
pO±s
->
‹igArgCt
 = 
¨gCt
;

1108 
pO±s
->
‹igArgVe˘
 = 
¨gVe˘
;

1109 
pO±s
->
fO±Së
 |
OPTPROC_INITDONE
;

1111 i‡(! 
	`SUCCESSFUL
(
	`doPª£ts
(
pO±s
)))

1119 i‡–((
pO±s
->
fO±Së
 & 
OPTPROC_TRANSLATE
) != 0)

1120 && (
pO±s
->
pTønsProc
 !
NULL
)

1121 && ((
pO±s
->
fO±Së
 & 
OPTPROC_NO_XLAT_MASK
)

1122 =
OPTPROC_NXLAT_OPT_CFG
) ) {

1124 
pO±s
->
fO±Së
 &~
OPTPROC_NXLAT_OPT_CFG
;

1125 (*
pO±s
->
pTønsProc
)();

1128 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_REORDER
) != 0)

1129 
	`›ti⁄S‹t
(
pO±s
);

1131 
pO±s
->
curO±Idx
 = 1;

1132 
pO±s
->
pzCurO±
 = 
NULL
;

1139 i‡(
pO±s
->
curO±Idx
 <= 0) {

1140 
pO±s
->
curO±Idx
 = 1;

1141 
pO±s
->
pzCurO±
 = 
NULL
;

1144 i‡(! 
	`SUCCESSFUL
(
	`doReguœrO±s
(
pO±s
)))

1145  
pO±s
->
‹igArgCt
;

1154 i‡–(
pO±s
->
•ecO±Idx
.
ßve_›ts
 !
NO_EQUIVALENT
)

1155 && (
pO±s
->
•ecO±Idx
.
ßve_›ts
 != 0)) {

1156 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
ßve_›ts
;

1158 i‡(
	`SELECTED_OPT
(
pOD
)) {

1159 
	`›ti⁄SaveFûe
(
pO±s
);

1160 
	`exô
(
EXIT_SUCCESS
);

1168 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0) {

1169 i‡(
	`checkC⁄si°ícy
(
pO±s
) != 0)

1170 (*
pO±s
->
pUßgeProc
)’O±s, 
EXIT_FAILURE
);

1173  
pO±s
->
curO±Idx
;

1174 
	}
}

	@libopts/autoopts.h

31 #i‚de‡
AUTOGEN_AUTOOPTS_H


32 
	#AUTOGEN_AUTOOPTS_H


	)

34 
	~"com∑t/com∑t.h
"

35 
	~"ag-ch¨-m≠.h
"

37 
	#AO_NAME_LIMIT
 127

	)

38 
	#AO_NAME_SIZE
 ((
size_t
)(
AO_NAME_LIMIT
 + 1))

	)

40 #i‚de‡
AG_PATH_MAX


41 #ifde‡
PATH_MAX


42 
	#AG_PATH_MAX
 ((
size_t
)
PATH_MAX
)

	)

44 
	#AG_PATH_MAX
 ((
size_t
)4096)

	)

47 #i‡
deföed
(
PATH_MAX
Ë&& (PATH_MAX > 
MAXPATHLEN
)

48 #unde‡
AG_PATH_MAX


49 
	#AG_PATH_MAX
 ((
size_t
)
PATH_MAX
)

	)

53 #unde‡
EXPORT


54 
	#EXPORT


	)

56 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
)

57 
	#DIRCH
 '\\'

	)

59 
	#DIRCH
 '/'

	)

62 #i‚de‡
EX_NOINPUT


63 
	#EX_NOINPUT
 66

	)

65 #i‚de‡
EX_SOFTWARE


66 
	#EX_SOFTWARE
 70

	)

68 #i‚de‡
EX_CONFIG


69 
	#EX_CONFIG
 78

	)

75 
	#NUM_TO_VER
(
n
Ë(“Ë>> 12), (“Ë>> 7Ë& 0x001F, (nË& 0x007F

	)

77 
	#NAMED_OPTS
(
po
) \

78 (((
po
)->
fO±Së
 & (
OPTPROC_SHORTOPT
 | 
OPTPROC_LONGOPT
)Ë=0)

	)

80 
	#SKIP_OPT
(
p
Ë((’)->
fO±Sèã
 & (
OPTST_DOCUMENT
|
OPTST_OMITTED
)Ë!0)

	)

82 
	ttDúe˘i⁄
;

83 
	#DIRECTION_PRESET
 -1

	)

84 
	#DIRECTION_PROCESS
 1

	)

85 
	#DIRECTION_CALLED
 0

	)

87 
	#PROCESSING
(
d
Ë((d)>0)

	)

88 
	#PRESETTING
(
d
Ë((d)<0)

	)

99 #unde‡
SUCCESS


100 #unde‡
FAILURE


101 #unde‡
PROBLEM


102 #unde‡
SUCCEEDED


103 #unde‡
SUCCESSFUL


104 #unde‡
FAILED


105 #unde‡
HADGLITCH


107 
	#SUCCESS
 ((
tSuc˚ss
Ë0)

	)

108 
	#FAILURE
 ((
tSuc˚ss
)-1)

	)

109 
	#PROBLEM
 ((
tSuc˚ss
Ë1)

	)

111 
	ttSuc˚ss
;

113 
	#SUCCEEDED
(
p
Ë(’Ë=
SUCCESS
)

	)

114 
	#SUCCESSFUL
(
p
Ë
	`SUCCEEDED
’)

	)

115 
	#FAILED
(
p
Ë(’Ë< 
SUCCESS
)

	)

116 
	#HADGLITCH
(
p
Ë(’Ë> 
SUCCESS
)

	)

118 
	#ShñlAsSåög
(
_s
Ë#_s

	)

119 
	#DEFAULT_SHELL
 
	`ShñlAsSåög
(
CONFIG_SHELL
)

	)

143 
	mOPTION_LOAD_COOKED
,

144 
	mOPTION_LOAD_UNCOOKED
,

145 
	mOPTION_LOAD_KEEP


146 } 
	ttO±i⁄LﬂdMode
;

148 
tO±i⁄LﬂdMode
 
›ti⁄_lﬂd_mode
;

159 
	mPAGER_STATE_INITIAL
,

160 
	mPAGER_STATE_READY
,

161 
	mPAGER_STATE_CHILD


162 } 
	tãPagîSèã
;

164 
ãPagîSèã
 
∑gîSèã
;

167 
	mENV_ALL
,

168 
	mENV_IMM
,

169 
	mENV_NON_IMM


170 } 
	tãEnvPª£tTy≥
;

173 
	mTOPT_UNDEFINED
 = 0,

174 
	mTOPT_SHORT
,

175 
	mTOPT_LONG
,

176 
	mTOPT_DEFAULT


177 } 
	tãO±Ty≥
;

180 
tO±Desc
* 
	mpOD
;

181 
tCC
* 
	mpzO±Arg
;

182 
tAoUL
 
	mÊags
;

183 
ãO±Ty≥
 
	m›tTy≥
;

184 } 
	ttO±Sèã
;

185 
	#OPTSTATE_INITIALIZER
(
°
) \

186 { 
NULL
, NULL, 
OPTST_
 ## 
°
, 
TOPT_UNDEFINED
 }

	)

188 
	#TEXTTO_TABLE
 \

189 
	`_TT_
(
LONGUSAGE
) \

190 
	`_TT_
(
USAGE
) \

191 
	`_TT_
(
VERSION
)

	)

192 
	#_TT_
(
n
) \

193 
TT_
 ## 
n
 ,

	)

195 íum { 
TEXTTO_TABLE
 
	mCOUNT_TT
 } 
	tãTextTo
;

197 #unde‡
_TT_


200 
tCC
* 
	mpzSå
;

201 
tCC
* 
	mpzReq
;

202 
tCC
* 
	mpzNum
;

203 
tCC
* 
	mpzFûe
;

204 
tCC
* 
	mpzKey
;

205 
tCC
* 
	mpzKeyL
;

206 
tCC
* 
	mpzBoﬁ
;

207 
tCC
* 
	mpzNe°
;

208 
tCC
* 
	mpzO±
;

209 
tCC
* 
	mpzNo
;

210 
tCC
* 
	mpzBrk
;

211 
tCC
* 
	mpzNoF
;

212 
tCC
* 
	mpzSpc
;

213 
tCC
* 
	mpzO±Fmt
;

214 
tCC
* 
	mpzTime
;

215 } 
	t¨g_ty≥s_t
;

217 
	#AGALOC
(
c
, 
w
Ë
	`ao_mÆloc
((
size_t
)c)

	)

218 
	#AGREALOC
(
p
, 
c
, 
w
Ë
	`ao_ªÆloc
((*Ì, (
size_t
)c)

	)

219 
	#AGFREE
(
_p
Ëdo{*
X
=(*)_p;
	`ao_‰ì
(X);}0)

	)

220 
	#AGDUPSTR
(
p
, 
s
, 
w
Ë’ = 
	`ao_°rdup
(s))

	)

223 
ao_mÆloc
(
size_t
 
sz
);

226 
ao_ªÆloc
(*
p
, 
size_t
 
sz
);

229 
ao_‰ì
(*
p
);

232 
ao_°rdup
(c⁄° *
°r
);

234 
	#TAGMEM
(
m
, 
t
)

	)

261 
	#DO_IMMEDIATELY
(
_Êg
) \

262 –(((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_IMM
)) == OPTST_IMM) \

263 || ( ((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_DISABLE_IMM
)) \

264 =(
OPTST_DISABLED
|
OPTST_DISABLE_IMM
Ë))

	)

282 
	#DO_NORMALLY
(
_Êg
) ( \

283 (((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_IMM
)) == 0) \

284 || (((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_DISABLE_IMM
)) == \

285 
OPTST_DISABLED
Ë)

	)

304 
	#DO_SECOND_TIME
(
_Êg
) ( \

305 (((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_TWICE
)) == \

306 
OPTST_TWICE
) \

307 || (((
_Êg
Ë& (
OPTST_DISABLED
|
OPTST_DISABLE_TWICE
)) == \

308 (
OPTST_DISABLED
|
OPTST_DISABLE_TWICE
Ë))

	)

313 #ifde‡
HAVE_SYS_MMAN_H


314 
	~<sys/mm™.h
>

316 #i‚de‡ 
PROT_READ


317 
	#PROT_READ
 0x01

	)

319 #i‚de‡ 
PROT_WRITE


320 
	#PROT_WRITE
 0x02

	)

322 #i‚de‡ 
MAP_SHARED


323 
	#MAP_SHARED
 0x01

	)

325 #i‚de‡ 
MAP_PRIVATE


326 
	#MAP_PRIVATE
 0x02

	)

330 #i‚de‡
MAP_FAILED


331 
	#MAP_FAILED
 ((*)-1)

	)

334 #i‚de‡ 
_SC_PAGESIZE


335 #ifde‡ 
_SC_PAGE_SIZE


336 
	#_SC_PAGESIZE
 
_SC_PAGE_SIZE


	)

340 #i‚de‡
HAVE_STRCHR


341 * 
°rchr
(c⁄° *
s
, 
c
);

342 * 
°ºchr
(c⁄° *
s
, 
c
);

350 #unde‡
DO_TRANSLATIONS


351 
	~"auto›ts/ußge-txt.h
"

356 
FILE
* 
›ti⁄_ußge_Â
;

358 
tO±Proc
 
›ti⁄PrötVîsi⁄
, 
›ti⁄PagedUßge
, 
›ti⁄LﬂdO±
;

	@libopts/autoopts/options.h

27 #i‚de‡
AUTOOPTS_OPTIONS_H_GUARD


28 
	#AUTOOPTS_OPTIONS_H_GUARD
 1

	)

29 
	~<sys/ty≥s.h
>

30 
	~<°dio.h
>

32 #i‡
deföed
(
HAVE_STDINT_H
)

33 
	~<°döt.h
>

34 #ñi‡
deföed
(
HAVE_INTTYPES_H
)

35 
	~<öây≥s.h
>

38 #i‡
deföed
(
HAVE_LIMITS_H
)

39 
	~<limôs.h
>

40 #ñi‡
deföed
(
HAVE_SYS_LIMITS_H
)

41 
	~<sys/limôs.h
>

44 #i‡
deföed
(
HAVE_SYSEXITS_H
)

45 
	~<sy£xôs.h
>

48 #i‚de‡
EX_USAGE


49 
	#EX_USAGE
 64

	)

69 
	#OPTIONS_STRUCT_VERSION
 135170

	)

70 
	#OPTIONS_VERSION_STRING
 "33:2:8"

	)

71 
	#OPTIONS_MINIMUM_VERSION
 102400

	)

72 
	#OPTIONS_MIN_VER_STRING
 "25:0:0"

	)

75 
	mOPARG_TYPE_NONE
 = 0,

76 
	mOPARG_TYPE_STRING
 = 1,

77 
	mOPARG_TYPE_ENUMERATION
 = 2,

78 
	mOPARG_TYPE_BOOLEAN
 = 3,

79 
	mOPARG_TYPE_MEMBERSHIP
 = 4,

80 
	mOPARG_TYPE_NUMERIC
 = 5,

81 
	mOPARG_TYPE_HIERARCHY
 = 6,

82 
	mOPARG_TYPE_FILE
 = 7,

83 
	mOPARG_TYPE_TIME
 = 8,

84 
	mOPARG_TYPE_FLOAT
 = 9,

85 
	mOPARG_TYPE_DOUBLE
 = 10,

86 
	mOPARG_TYPE_LONG_DOUBLE
 = 11,

87 
	mOPARG_TYPE_LONG_LONG
 = 12

88 } 
	tãO±ArgTy≥
;

90 
	s›ti⁄VÆue
 {

91 
ãO±ArgTy≥
 
	mvÆTy≥
;

92 * 
	mpzName
;

94 
	m°rVÆ
[1];

95 
	míumVÆ
;

96 
	mboﬁVÆ
;

97 
	m£tVÆ
;

98 
	ml⁄gVÆ
;

99 * 
	m√°VÆ
;

100 } 
	mv
;

101 } 
	ttO±i⁄VÆue
;

104 
	mFTYPE_MODE_MAY_EXIST
 = 0x00,

105 
	mFTYPE_MODE_MUST_EXIST
 = 0x01,

106 
	mFTYPE_MODE_MUST_NOT_EXIST
 = 0x02,

107 
	mFTYPE_MODE_EXIST_MASK
 = 0x03,

108 
	mFTYPE_MODE_NO_OPEN
 = 0x00,

109 
	mFTYPE_MODE_OPEN_FD
 = 0x10,

110 
	mFTYPE_MODE_FOPEN_FP
 = 0x20,

111 
	mFTYPE_MODE_OPEN_MASK
 = 0x30

112 } 
	tãO±FûeTy≥
;

115 
	mfûe_Êags
;

116 c⁄° * 
	mfûe_mode
;

117 } 
	ttuFûeMode
;

123 
	mOPTST_SET_ID
 = 0,

124 
	mOPTST_PRESET_ID
 = 1,

125 
	mOPTST_DEFINED_ID
 = 2,

126 
	mOPTST_RESET_ID
 = 3,

127 
	mOPTST_EQUIVALENCE_ID
 = 4,

128 
	mOPTST_DISABLED_ID
 = 5,

129 
	mOPTST_ALLOC_ARG_ID
 = 6,

130 
	mOPTST_NO_INIT_ID
 = 8,

131 
	mOPTST_NUMBER_OPT_ID
 = 9,

132 
	mOPTST_STACKED_ID
 = 10,

133 
	mOPTST_INITENABLED_ID
 = 11,

134 
	mOPTST_ARG_TYPE_1_ID
 = 12,

135 
	mOPTST_ARG_TYPE_2_ID
 = 13,

136 
	mOPTST_ARG_TYPE_3_ID
 = 14,

137 
	mOPTST_ARG_TYPE_4_ID
 = 15,

138 
	mOPTST_ARG_OPTIONAL_ID
 = 16,

139 
	mOPTST_IMM_ID
 = 17,

140 
	mOPTST_DISABLE_IMM_ID
 = 18,

141 
	mOPTST_OMITTED_ID
 = 19,

142 
	mOPTST_MUST_SET_ID
 = 20,

143 
	mOPTST_DOCUMENT_ID
 = 21,

144 
	mOPTST_TWICE_ID
 = 22,

145 
	mOPTST_DISABLE_TWICE_ID
 = 23,

146 
	mOPTST_SCALED_NUM_ID
 = 24,

147 
	mOPTST_NO_COMMAND_ID
 = 25,

148 
	mOPTST_DEPRECATED_ID
 = 26

149 } 
	t›t_°©e_íum_t
;

151 
	#OPTST_INIT
 0U

	)

152 
	#OPTST_SET
 (1U << 
OPTST_SET_ID
)

	)

153 
	#OPTST_PRESET
 (1U << 
OPTST_PRESET_ID
)

	)

154 
	#OPTST_DEFINED
 (1U << 
OPTST_DEFINED_ID
)

	)

155 
	#OPTST_RESET
 (1U << 
OPTST_RESET_ID
)

	)

156 
	#OPTST_EQUIVALENCE
 (1U << 
OPTST_EQUIVALENCE_ID
)

	)

157 
	#OPTST_DISABLED
 (1U << 
OPTST_DISABLED_ID
)

	)

158 
	#OPTST_ALLOC_ARG
 (1U << 
OPTST_ALLOC_ARG_ID
)

	)

159 
	#OPTST_NO_INIT
 (1U << 
OPTST_NO_INIT_ID
)

	)

160 
	#OPTST_NUMBER_OPT
 (1U << 
OPTST_NUMBER_OPT_ID
)

	)

161 
	#OPTST_STACKED
 (1U << 
OPTST_STACKED_ID
)

	)

162 
	#OPTST_INITENABLED
 (1U << 
OPTST_INITENABLED_ID
)

	)

163 
	#OPTST_ARG_TYPE_1
 (1U << 
OPTST_ARG_TYPE_1_ID
)

	)

164 
	#OPTST_ARG_TYPE_2
 (1U << 
OPTST_ARG_TYPE_2_ID
)

	)

165 
	#OPTST_ARG_TYPE_3
 (1U << 
OPTST_ARG_TYPE_3_ID
)

	)

166 
	#OPTST_ARG_TYPE_4
 (1U << 
OPTST_ARG_TYPE_4_ID
)

	)

167 
	#OPTST_ARG_OPTIONAL
 (1U << 
OPTST_ARG_OPTIONAL_ID
)

	)

168 
	#OPTST_IMM
 (1U << 
OPTST_IMM_ID
)

	)

169 
	#OPTST_DISABLE_IMM
 (1U << 
OPTST_DISABLE_IMM_ID
)

	)

170 
	#OPTST_OMITTED
 (1U << 
OPTST_OMITTED_ID
)

	)

171 
	#OPTST_MUST_SET
 (1U << 
OPTST_MUST_SET_ID
)

	)

172 
	#OPTST_DOCUMENT
 (1U << 
OPTST_DOCUMENT_ID
)

	)

173 
	#OPTST_TWICE
 (1U << 
OPTST_TWICE_ID
)

	)

174 
	#OPTST_DISABLE_TWICE
 (1U << 
OPTST_DISABLE_TWICE_ID
)

	)

175 
	#OPTST_SCALED_NUM
 (1U << 
OPTST_SCALED_NUM_ID
)

	)

176 
	#OPTST_NO_COMMAND
 (1U << 
OPTST_NO_COMMAND_ID
)

	)

177 
	#OPTST_DEPRECATED
 (1U << 
OPTST_DEPRECATED_ID
)

	)

178 
	#OPT_STATE_MASK
 0x07FFFF7FU

	)

180 
	#OPTST_SET_MASK
 ( \

181 
OPTST_DEFINED
 | 
OPTST_PRESET
 | 
OPTST_RESET
 | \

182 
OPTST_SET
 \

183  )

	)

185 
	#OPTST_MUTABLE_MASK
 ( \

186 
OPTST_ALLOC_ARG
 | 
OPTST_DEFINED
 | \

187 
OPTST_DISABLED
 | 
OPTST_EQUIVALENCE
 | \

188 
OPTST_PRESET
 | 
OPTST_RESET
 | \

189 
OPTST_SET
 \

190  )

	)

192 
	#OPTST_SELECTED_MASK
 ( \

193 
OPTST_DEFINED
 | 
OPTST_SET
 \

194  )

	)

196 
	#OPTST_ARG_TYPE_MASK
 ( \

197 
OPTST_ARG_TYPE_1
 | 
OPTST_ARG_TYPE_2
 | 
OPTST_ARG_TYPE_3
 | \

198 
OPTST_ARG_TYPE_4
 \

199  )

	)

201 
	#OPTST_DO_NOT_SAVE_MASK
 ( \

202 
OPTST_DOCUMENT
 | 
OPTST_NO_INIT
 | 
OPTST_OMITTED
 \

203  )

	)

205 
	#OPTST_NO_USAGE_MASK
 ( \

206 
OPTST_DEPRECATED
 | 
OPTST_NO_COMMAND
 | 
OPTST_OMITTED
 \

207  )

	)

209 #ifde‡
NO_OPTIONAL_OPT_ARGS


210 #unde‡
OPTST_ARG_OPTIONAL


211 
	#OPTST_ARG_OPTIONAL
 0

	)

214 
	#OPTST_PERSISTENT_MASK
 (~
OPTST_MUTABLE_MASK
)

	)

216 
	#SELECTED_OPT
(
_od
Ë((_od)->
fO±Sèã
 & 
OPTST_SELECTED_MASK
)

	)

217 
	#UNUSED_OPT
–
_od
Ë(((_od)->
fO±Sèã
 & 
OPTST_SET_MASK
Ë=0)

	)

218 
	#DISABLED_OPT
(
_od
Ë((_od)->
fO±Sèã
 & 
OPTST_DISABLED
)

	)

219 
	#OPTION_STATE
(
_od
Ë((_od)->
fO±Sèã
)

	)

220 
	#OPTST_SET_ARGTYPE
(
_n
Ë((_nË<< 
OPTST_ARG_TYPE_1_ID
)

	)

221 
	#OPTST_GET_ARGTYPE
(
_f
Ë(((_f)&
OPTST_ARG_TYPE_MASK
)>>
OPTST_ARG_TYPE_1_ID
)

	)

235 
	mOPTPROC_LONGOPT_ID
 = 0,

236 
	mOPTPROC_SHORTOPT_ID
 = 1,

237 
	mOPTPROC_ERRSTOP_ID
 = 2,

238 
	mOPTPROC_DISABLEDOPT_ID
 = 3,

239 
	mOPTPROC_NO_REQ_OPT_ID
 = 4,

240 
	mOPTPROC_NUM_OPT_ID
 = 5,

241 
	mOPTPROC_INITDONE_ID
 = 6,

242 
	mOPTPROC_NEGATIONS_ID
 = 7,

243 
	mOPTPROC_ENVIRON_ID
 = 8,

244 
	mOPTPROC_NO_ARGS_ID
 = 9,

245 
	mOPTPROC_ARGS_REQ_ID
 = 10,

246 
	mOPTPROC_REORDER_ID
 = 11,

247 
	mOPTPROC_GNUUSAGE_ID
 = 12,

248 
	mOPTPROC_TRANSLATE_ID
 = 13,

249 
	mOPTPROC_NXLAT_OPT_CFG_ID
 = 16,

250 
	mOPTPROC_NXLAT_OPT_ID
 = 17,

251 
	mOPTPROC_PRESETTING_ID
 = 19

252 } 
	t›çroc_°©e_íum_t
;

254 
	#OPTPROC_NONE
 0U

	)

255 
	#OPTPROC_LONGOPT
 (1U << 
OPTPROC_LONGOPT_ID
)

	)

256 
	#OPTPROC_SHORTOPT
 (1U << 
OPTPROC_SHORTOPT_ID
)

	)

257 
	#OPTPROC_ERRSTOP
 (1U << 
OPTPROC_ERRSTOP_ID
)

	)

258 
	#OPTPROC_DISABLEDOPT
 (1U << 
OPTPROC_DISABLEDOPT_ID
)

	)

259 
	#OPTPROC_NO_REQ_OPT
 (1U << 
OPTPROC_NO_REQ_OPT_ID
)

	)

260 
	#OPTPROC_NUM_OPT
 (1U << 
OPTPROC_NUM_OPT_ID
)

	)

261 
	#OPTPROC_INITDONE
 (1U << 
OPTPROC_INITDONE_ID
)

	)

262 
	#OPTPROC_NEGATIONS
 (1U << 
OPTPROC_NEGATIONS_ID
)

	)

263 
	#OPTPROC_ENVIRON
 (1U << 
OPTPROC_ENVIRON_ID
)

	)

264 
	#OPTPROC_NO_ARGS
 (1U << 
OPTPROC_NO_ARGS_ID
)

	)

265 
	#OPTPROC_ARGS_REQ
 (1U << 
OPTPROC_ARGS_REQ_ID
)

	)

266 
	#OPTPROC_REORDER
 (1U << 
OPTPROC_REORDER_ID
)

	)

267 
	#OPTPROC_GNUUSAGE
 (1U << 
OPTPROC_GNUUSAGE_ID
)

	)

268 
	#OPTPROC_TRANSLATE
 (1U << 
OPTPROC_TRANSLATE_ID
)

	)

269 
	#OPTPROC_NXLAT_OPT_CFG
 (1U << 
OPTPROC_NXLAT_OPT_CFG_ID
)

	)

270 
	#OPTPROC_NXLAT_OPT
 (1U << 
OPTPROC_NXLAT_OPT_ID
)

	)

271 
	#OPTPROC_PRESETTING
 (1U << 
OPTPROC_PRESETTING_ID
)

	)

272 
	#OPTPROC_STATE_MASK
 0x000B3FFFU

	)

274 
	#OPTPROC_NO_XLAT_MASK
 ( \

275 
OPTPROC_NXLAT_OPT
 | 
OPTPROC_NXLAT_OPT_CFG
 \

276  )

	)

278 
	#STMTS
(
s
Ëdÿ{ s; } 0)

	)

285 
	#tSCC
 c⁄°

	)

286 
	#tCC
 c⁄°

	)

287 
	#tAoSC
 

	)

288 
	#tAoUC
 

	)

289 
	#tAoUI
 

	)

290 
	#tAoUL
 

	)

291 
	#tAoUS
 

	)

297 íum { 
	mAG_FALSE
 = 0, 
	mAG_TRUE
 } 
	tag_boﬁ
;

304 
›ti⁄s
 
	ttO±i⁄s
;

305 
›tDesc
 
	ttO±Desc
;

306 
›tNames
 
	ttO±Names
;

307 
	#OPTPROC_EMIT_USAGE
 ((
tO±i⁄s
 *)0x01UL)

	)

308 
	#OPTPROC_EMIT_SHELL
 ((
tO±i⁄s
 *)0x02UL)

	)

309 
	#OPTPROC_RETURN_VALNAME
 ((
tO±i⁄s
 *)0x03UL)

	)

310 
	#OPTPROC_EMIT_LIMIT
 ((
tO±i⁄s
 *)0x0FUL)

	)

316 (
	ttO±Proc
)(
	ttO±i⁄s
* 
	tpO±s
, 
	ttO±Desc
* 
	tpO±Desc
);

317 
tO±Proc
* 
	tçO±Proc
;

324 (
	ttUßgeProc
)(
	ttO±i⁄s
* 
	tpO±s
, 
	texôCode
);

325 
tUßgeProc
* 
	tçUßgeProc
;

332 
	#NOLIMIT
 
USHRT_MAX


	)

333 
	#OPTION_LIMIT
 
SHRT_MAX


	)

334 
	#NO_EQUIVALENT
 (
OPTION_LIMIT
+1)

	)

340 
	#NUMBER_OPTION
 '#'

	)

342 
¨gLi°
 
	ttArgLi°
;

343 
	#MIN_ARG_ALLOC_CT
 6

	)

344 
	#INCR_ARG_ALLOC_CT
 8

	)

345 
	s¨gLi°
 {

346 
u£Ct
;

347 
ÆlocCt
;

348 
tCC
* 
≠zArgs
[ 
MIN_ARG_ALLOC_CT
 ];

352 c⁄° * 
¨gSåög
;

353 
uöçå_t
 
¨gEnum
;

354 
uöçå_t
 
¨gI¡±r
;

355 
¨gI¡
;

356 
¨gUöt
;

357 
¨gBoﬁ
;

358 
FILE
* 
¨gFp
;

359 
¨gFd
;

360 } 
	t›tArgBuckë_t
;

362 
	#pzLa°Arg
 
›tArg
.
¨gSåög


	)

368 
	s›tDesc
 {

369 
tAoUS
 c⁄° 
›tIndex
;

370 
tAoUS
 c⁄° 
›tVÆue
;

371 
tAoUS
 
›tA˘uÆIndex
;

372 
tAoUS
 
›tA˘uÆVÆue
;

374 
tAoUS
 c⁄° 
›tEquivIndex
;

375 
tAoUS
 c⁄° 
›tMöCt
;

376 
tAoUS
 c⁄° 
›tMaxCt
;

377 
tAoUS
 
›tOccCt
;

379 
tAoUI
 
fO±Sèã
;

380 
tAoUI
 
ª£rved
;

381 
›tArgBuckë_t
 
›tArg
;

382 * 
›tCookõ
;

384 c⁄° * c⁄° 
pO±Mu°
;

385 c⁄° * c⁄° 
pO±C™t
;

386 
çO±Proc
 c⁄° 
pO±Proc
;

387 c⁄°* c⁄° 
pzText
;

389 c⁄°* c⁄° 
pz_NAME
;

390 c⁄°* c⁄° 
pz_Name
;

391 c⁄°* c⁄° 
pz_DißbÀName
;

392 c⁄°* c⁄° 
pz_DißbÀPfx
;

399 
›tS≥cIndex
 
	ttO±S≥cIndex
;

400 
	s›tS≥cIndex
 {

401 c⁄° 
tAoUS
 
m‹e_hñp
;

402 c⁄° 
tAoUS
 
ßve_›ts
;

403 c⁄° 
tAoUS
 
numbî_›ti⁄
;

404 c⁄° 
tAoUS
 
deÁu…_›t
;

410 (
	ttO±i⁄XœãProc
)();

412 
	s›ti⁄s
 {

413 c⁄° 
°ru˘Vîsi⁄
;

414 
‹igArgCt
;

415 ** 
‹igArgVe˘
;

416 
fO±Së
;

417 
curO±Idx
;

418 * 
pzCurO±
;

420 c⁄°* 
pzProgP©h
;

421 c⁄°* 
pzProgName
;

422 c⁄°* c⁄° 
pzPROGNAME
;

423 c⁄°* c⁄° 
pzRcName
;

424 c⁄°* c⁄° 
pzC›yright
;

425 c⁄°* c⁄° 
pzC›yNŸi˚
;

426 c⁄°* c⁄° 
pzFuŒVîsi⁄
;

427 c⁄°* c⁄°* c⁄° 
∑pzHomeLi°
;

428 c⁄°* c⁄° 
pzUßgeTôÀ
;

429 c⁄°* c⁄° 
pzEx∂aö
;

430 c⁄°* c⁄° 
pzDëaû
;

431 
tO±Desc
* c⁄° 
pO±Desc
;

432 c⁄°* c⁄° 
pzBugAddr
;

434 * 
pExãnsi⁄s
;

435 * 
pSavedSèã
;

438 
çUßgeProc
 
pUßgeProc
;

439 
tO±i⁄XœãProc
* 
pTønsProc
;

441 
tO±S≥cIndex
 
•ecO±Idx
;

442 c⁄° 
›tCt
;

443 c⁄° 
¥e£tO±Ct
;

444 c⁄° * 
pzFuŒUßge
;

445 c⁄° * 
pzSh‹tUßge
;

447 
›tArgBuckë_t
 c⁄° * c⁄° 
‹igöÆO±ArgAºay
;

448 * c⁄° * c⁄° 
‹igöÆO±ArgCookõ
;

455 
	#‹igöÆO±ArgAºay_STRUCT_VERSION
 131072

	)

456 
	#HAS_‹igöÆO±ArgAºay
(
_›t
) \

457 ((
_›t
)->
°ru˘Vîsi⁄
 >
‹igöÆO±ArgAºay_STRUCT_VERSION
)

	)

463 
tkn_˘
;

464 * 
tkn_li°
[1];

465 } 
	ttokí_li°_t
;

471 
	#°∫eqvcmp
 
›ti⁄_°∫eqvcmp


	)

472 
	#°ªqvcmp
 
›ti⁄_°ªqvcmp


	)

473 
	#°ªqvm≠
 
›ti⁄_°ªqvm≠


	)

474 
	#°ªqu©e
 
›ti⁄_°ªqu©e


	)

475 
	#°πønsf‹m
 
›ti⁄_°πønsf‹m


	)

487 * 
txt_d©a
;

488 
size_t
 
txt_size
;

489 
size_t
 
txt_fuŒ_size
;

490 
txt_fd
;

491 
txt_zîo_fd
;

492 
txt_î∫o
;

493 
txt_¥Ÿ
;

494 
txt_Êags
;

495 
txt_Æloc
;

496 } 
	ttm≠_öfo_t
;

498 
	#TEXT_MMAP_FAILED_ADDR
(
a
Ë((*)◊Ë=(*)
MAP_FAILED
)

	)

500 #ifde‡ 
__˝lu•lus


502 
	#CPLUSPLUS_CLOSER
 
	}

	)
}

504 
	#CPLUSPLUS_CLOSER


	)

552 
tokí_li°_t
* 
ao_°rög_tokíize
(const*);

572 c⁄° 
tO±i⁄VÆue
* 
c⁄figFûeLﬂd
(const*);

602 
›ti⁄FûeLﬂd
(
tO±i⁄s
*, const*);

621 c⁄° 
tO±i⁄VÆue
* 
›ti⁄FödNextVÆue
(c⁄° 
tO±Desc
*, constÅOptionValue*, const*, const*);

638 c⁄° 
tO±i⁄VÆue
* 
›ti⁄FödVÆue
(c⁄° 
tO±Desc
*, const*, const*);

651 
›ti⁄Fªe
(
tO±i⁄s
*);

669 c⁄° 
tO±i⁄VÆue
* 
›ti⁄GëVÆue
(constÅOptionValue*, const*);

693 
›ti⁄LﬂdLöe
(
tO±i⁄s
*, const*);

712 c⁄° 
tO±i⁄VÆue
* 
›ti⁄NextVÆue
(constÅOptionValue*, constÅOptionValue*);

727 
›ti⁄O∆yUßge
(
tO±i⁄s
*, );

757 
›ti⁄Pro˚ss
(
tO±i⁄s
*, , **);

774 
›ti⁄Re°‹e
(
tO±i⁄s
*);

799 
›ti⁄SaveFûe
(
tO±i⁄s
*);

821 
›ti⁄SaveSèã
(
tO±i⁄s
*);

835 
›ti⁄U∆ﬂdNe°ed
(
tO±i⁄VÆue
 const *);

847 c⁄°* 
›ti⁄Vîsi⁄
();

889 #i‚de‡
HAVE_PATHFIND


890 * 
∑thföd
(const*, const*, const*);

906 
°ªqu©e
(const*);

925 
°ªqvcmp
(const*, const*);

953 
°ªqvm≠
(, , );

974 
°∫eqvcmp
(const*, const*, );

992 
°πønsf‹m
(*, const*);

995 
tO±Proc
 
	g›ti⁄SèckArg
, 
	g›ti⁄Un°ackArg
, 
	g›ti⁄BoﬁónVÆ
, 
	g›ti⁄NumîicVÆ
;

997 * 
ao_°rög_cook
(*, *);

999 
ao_°rög_cook_esˇ≥_ch¨
(const*, *, );

1001 
gíshñl›tUßge
(
tO±i⁄s
*, );

1003 
›ti⁄BoﬁónVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1005 
uöçå_t
 
›ti⁄Enumî©i⁄VÆ
(
tO±i⁄s
*, 
tO±Desc
*, const * const *, );

1007 
›ti⁄FûeCheck
(
tO±i⁄s
*, 
tO±Desc
*, 
ãO±FûeTy≥
, 
tuFûeMode
);

1009 c⁄° * 
›ti⁄Keyw‹dName
(
tO±Desc
*, );

1011 
›ti⁄LﬂdO±
(
tO±i⁄s
*, 
tO±Desc
*);

1013 
ag_boﬁ
 
›ti⁄MakeP©h
(*, , const*, const*);

1015 
›ti⁄Ne°edVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1017 
›ti⁄NumîicVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1019 
›ti⁄PagedUßge
(
tO±i⁄s
*, 
tO±Desc
*);

1021 
›ti⁄P¨£Shñl
(
tO±i⁄s
*);

1023 
›ti⁄PrötVîsi⁄
(
tO±i⁄s
*, 
tO±Desc
*);

1025 
›ti⁄PutShñl
(
tO±i⁄s
*);

1027 
›ti⁄Re£tO±
(
tO±i⁄s
*, 
tO±Desc
*);

1029 
›ti⁄SëMembîs
(
tO±i⁄s
*, 
tO±Desc
*, const * const *, );

1031 
›ti⁄ShowR™ge
(
tO±i⁄s
*, 
tO±Desc
*, *, );

1033 
›ti⁄SèckArg
(
tO±i⁄s
*, 
tO±Desc
*);

1035 
›ti⁄TimeVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1037 
›ti⁄Un°ackArg
(
tO±i⁄s
*, 
tO±Desc
*);

1039 
›ti⁄Ußge
(
tO±i⁄s
*, );

1041 
›ti⁄Vîsi⁄Stdîr
(
tO±i⁄s
*, 
tO±Desc
*);

1043 * 
ãxt_mm≠
(c⁄°*, , , 
tm≠_öfo_t
*);

1045 
ãxt_munm≠
(
tm≠_öfo_t
*);

1047 
	gCPLUSPLUS_CLOSER


	@libopts/autoopts/usage-txt.h

29 #i‚de‡
AUTOOPTS_USAGE_TXT_H_GUARD


30 
	#AUTOOPTS_USAGE_TXT_H_GUARD
 1

	)

32 #unde‡
cch_t


33 
	#cch_t
 c⁄°

	)

39 
	mfõld_˘
;

40 * 
	muçz_GnuBoﬁArg
;

41 * 
	muçz_GnuKeyArg
;

42 * 
	muçz_GnuFûeArg
;

43 * 
	muçz_GnuKeyLArg
;

44 * 
	muçz_GnuTimeArg
;

45 * 
	muçz_GnuNumArg
;

46 * 
	muçz_GnuSåArg
;

47 
cch_t
* 
	m≠z_°r
[ 129 ];

48 } 
	tußge_ãxt_t
;

54 
ußge_ãxt_t
 
›ti⁄_ußge_ãxt
;

56 #i‡
deföed
(
AUTOOPTS_INTERNAL
)

60 
	#zAO_Bad
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 0])

	)

61 
	#zAO_Big
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 1])

	)

62 
	#zAO_Eº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 2])

	)

63 
	#zAO_Sml
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 3])

	)

64 
	#zAO_Vî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 4])

	)

65 
	#zAO_Wo›s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 5])

	)

66 
	#zAlüsR™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 6])

	)

67 
	#zAŒ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 7])

	)

68 
	#zA…
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 8])

	)

69 
	#zAmbigKey
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 9])

	)

70 
	#zAmbigO±Så
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 10])

	)

71 
	#zArgsMu°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 11])

	)

72 
	#zAtMo°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 12])

	)

73 
	#zAuto
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 13])

	)

74 
	#zBadPùe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 14])

	)

75 
	#zBadVîArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 15])

	)

76 
	#zC™tFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 16])

	)

77 
	#zC™tSave
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 17])

	)

78 
	#zDeÁu…O±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 18])

	)

79 
	#zDis
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 19])

	)

80 
	#zDißbÀdEº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 20])

	)

81 
	#zDißbÀdO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 21])

	)

82 
	#zDißbÀdWhy
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 22])

	)

83 
	#zE«b
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 23])

	)

84 
	#zEquiv
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 24])

	)

85 
	#zEºO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 25])

	)

86 
	#zExamöeFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 26])

	)

87 
	#zFiveS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 27])

	)

88 
	#zFœgOkay
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 28])

	)

89 
	#zFmtFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 29])

	)

90 
	#zF‹kFaû
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 30])

	)

91 
	#zFª›íFaû
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 31])

	)

92 
	#zFSEºO±Lﬂd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 32])

	)

93 
	#zFSEºRódFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 33])

	)

94 
	#zFSO±Eº‹
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 34])

	)

95 
	#zFSO±EºMayExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 35])

	)

96 
	#zFSO±EºMu°Exi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 36])

	)

97 
	#zFSO±EºNoExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 37])

	)

98 
	#zFSO±EºO≥n
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 38])

	)

99 
	#zFSO±EºF›í
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 39])

	)

100 
	#zFûeC™nŸExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 40])

	)

101 
	#zFûeMu°Exi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 41])

	)

102 
	#zGíshñl
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 42])

	)

103 
	#zGnuBoﬁArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuBoﬁArg
)

	)

104 
	#zGnuBªak
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 43])

	)

105 
	#zGnuKeyArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuKeyArg
)

	)

106 
	#zGnuFûeArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuFûeArg
)

	)

107 
	#zGnuKeyLArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuKeyLArg
)

	)

108 
	#zGnuTimeArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuTimeArg
)

	)

109 
	#zGnuNe°Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 44])

	)

110 
	#zGnuNumArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuNumArg
)

	)

111 
	#zGnuO±Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 45])

	)

112 
	#zGnuO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 46])

	)

113 
	#zGnuSåArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuSåArg
)

	)

114 
	#zIŒO±Chr
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 47])

	)

115 
	#zIŒO±Så
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 48])

	)

116 
	#zIŒegÆ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 49])

	)

117 
	#zI¡R™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 50])

	)

118 
	#zInvÆO±Desc
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 51])

	)

119 
	#zLowîBôs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 52])

	)

120 
	#zMembîs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 53])

	)

121 
	#zMisArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 54])

	)

122 
	#zMu…iEquiv
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 55])

	)

123 
	#zMu°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 56])

	)

124 
	#zNìdO√
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 57])

	)

125 
	#zNoArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 58])

	)

126 
	#zNoArgs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 59])

	)

127 
	#zNoCª©
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 60])

	)

128 
	#zNoFœgs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 61])

	)

129 
	#zNoKey
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 62])

	)

130 
	#zNoLim
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 63])

	)

131 
	#zNoPª£t
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 64])

	)

132 
	#zNoRe£tArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 65])

	)

133 
	#zNoRq_NoShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 66])

	)

134 
	#zNoRq_ShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 67])

	)

135 
	#zNoSèt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 68])

	)

136 
	#zNoSèã
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 69])

	)

137 
	#zN⁄e
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 70])

	)

138 
	#zNŸDef
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 71])

	)

139 
	#zNŸCmdO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 72])

	)

140 
	#zNŸEnough
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 73])

	)

141 
	#zNŸFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 74])

	)

142 
	#zNŸNumbî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 75])

	)

143 
	#zNrmO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 76])

	)

144 
	#zNumbîO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 77])

	)

145 
	#zO√S∑˚
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 78])

	)

146 
	#zO∆yO√
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 79])

	)

147 
	#zO±sO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 80])

	)

148 
	#zOuçutFaû
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 81])

	)

149 
	#zP©hFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 82])

	)

150 
	#zPlsSídBugs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 83])

	)

151 
	#zPª£t
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 84])

	)

152 
	#zPª£tFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 85])

	)

153 
	#zPª£tI¡ro
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 86])

	)

154 
	#zProg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 87])

	)

155 
	#zProhib
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 88])

	)

156 
	#zRe‹dî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 89])

	)

157 
	#zR™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 90])

	)

158 
	#zR™geAbove
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 91])

	)

159 
	#zR™geLõ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 92])

	)

160 
	#zR™geBadLõ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 93])

	)

161 
	#zR™geO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 94])

	)

162 
	#zR™geOr
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 95])

	)

163 
	#zR™geEº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 96])

	)

164 
	#zR™geExa˘
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 97])

	)

165 
	#zR™geSˇÀd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 98])

	)

166 
	#zR™geU±o
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 99])

	)

167 
	#zRe£tNŸC⁄fig
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[100])

	)

168 
	#zReqFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[101])

	)

169 
	#zReqO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[102])

	)

170 
	#zReqThe£
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[103])

	)

171 
	#zReq_NoShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[104])

	)

172 
	#zReq_ShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[105])

	)

173 
	#zSïCh¨s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[106])

	)

174 
	#zSëMembîSëtögs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[107])

	)

175 
	#zShπGnuO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[108])

	)

176 
	#zSixS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[109])

	)

177 
	#zStdBoﬁArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[110])

	)

178 
	#zStdBªak
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[111])

	)

179 
	#zStdFûeArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[112])

	)

180 
	#zStdKeyArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[113])

	)

181 
	#zStdKeyLArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[114])

	)

182 
	#zStdTimeArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[115])

	)

183 
	#zStdNe°Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[116])

	)

184 
	#zStdNoArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[117])

	)

185 
	#zStdNumArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[118])

	)

186 
	#zStdO±Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[119])

	)

187 
	#zStdReqArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[120])

	)

188 
	#zStdSåArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[121])

	)

189 
	#zTabHyp
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[122])

	)

190 
	#zTabHypAnd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[123])

	)

191 
	#zTabout
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[124])

	)

192 
	#zThªeS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[125])

	)

193 
	#zTwoS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[126])

	)

194 
	#zUpTo
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[127])

	)

195 
	#zVÆidKeys
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[128])

	)

203 
	gíg_zGnuBoﬁArg
[] = "=T/F";

204 
	gíg_zGnuKeyArg
[] = "=KWd";

205 
	gíg_zGnuFûeArg
[] = "=file";

206 
	gíg_zGnuKeyLArg
[] = "=Mbr";

207 
	gíg_zGnuTimeArg
[] = "=Tim";

208 
	gíg_zGnuNumArg
[] = "=num";

209 
	gíg_zGnuSåArg
[] = "=str";

210 c⁄° 
	gußge_txt
[4218] =

365 
ußge_ãxt_t
 
	g›ti⁄_ußge_ãxt
 = {

367 
íg_zGnuBoﬁArg
, 
íg_zGnuKeyArg
, 
íg_zGnuFûeArg
, 
íg_zGnuKeyLArg
,

368 
íg_zGnuTimeArg
, 
íg_zGnuNumArg
, 
íg_zGnuSåArg
,

370 
ußge_txt
 + 0, usage_txt + 52, usage_txt + 98, usage_txt + 197,

371 
ußge_txt
 + 247, usage_txt + 338, usage_txt + 397, usage_txt + 447,

372 
ußge_txt
 + 451, usage_txt + 478, usage_txt + 527, usage_txt + 555,

373 
ußge_txt
 + 592, usage_txt + 617, usage_txt + 643, usage_txt + 683,

374 
ußge_txt
 + 820, usage_txt + 868, usage_txt + 922, usage_txt + 964,

375 
ußge_txt
 + 988, usage_txt +1028, usage_txt +1043, usage_txt +1073,

376 
ußge_txt
 +1099, usage_txt +1112, usage_txt +1126, usage_txt +1173,

377 
ußge_txt
 +1179, usage_txt +1282, usage_txt +1294, usage_txt +1345,

378 
ußge_txt
 +1374, usage_txt +1425, usage_txt +1459, usage_txt +1500,

379 
ußge_txt
 +1523, usage_txt +1549, usage_txt +1580, usage_txt +1594,

380 
ußge_txt
 +1609, usage_txt +1640, usage_txt +1667, usage_txt +1773,

381 
ußge_txt
 +1779, usage_txt +1785, usage_txt +1792, usage_txt +1803,

382 
ußge_txt
 +1829, usage_txt +1855, usage_txt +1863, usage_txt +1899,

383 
ußge_txt
 +1950, usage_txt +2006, usage_txt +2040, usage_txt +2078,

384 
ußge_txt
 +2143, usage_txt +2186, usage_txt +2221, usage_txt +2262,

385 
ußge_txt
 +2302, usage_txt +2329, usage_txt +2396, usage_txt +2444,

386 
ußge_txt
 +2477, usage_txt +2502, usage_txt +2550, usage_txt +2585,

387 
ußge_txt
 +2623, usage_txt +2650, usage_txt +2699, usage_txt +2704,

388 
ußge_txt
 +2722, usage_txt +2757, usage_txt +2801, usage_txt +2855,

389 
ußge_txt
 +2901, usage_txt +2909, usage_txt +2957, usage_txt +2959,

390 
ußge_txt
 +2984, usage_txt +3018, usage_txt +3047, usage_txt +3066,

391 
ußge_txt
 +3100, usage_txt +3136, usage_txt +3174, usage_txt +3230,

392 
ußge_txt
 +3238, usage_txt +3264, usage_txt +3330, usage_txt +3343,

393 
ußge_txt
 +3374, usage_txt +3411, usage_txt +3457, usage_txt +3473,

394 
ußge_txt
 +3479, usage_txt +3531, usage_txt +3545, usage_txt +3591,

395 
ußge_txt
 +3619, usage_txt +3664, usage_txt +3706, usage_txt +3720,

396 
ußge_txt
 +3745, usage_txt +3785, usage_txt +3828, usage_txt +3832,

397 
ußge_txt
 +4051, usage_txt +4054, usage_txt +4061, usage_txt +4065,

398 
ußge_txt
 +4073, usage_txt +4077, usage_txt +4081, usage_txt +4085,

399 
ußge_txt
 +4089, usage_txt +4093, usage_txt +4097, usage_txt +4101,

400 
ußge_txt
 +4105, usage_txt +4109, usage_txt +4113, usage_txt +4120,

401 
ußge_txt
 +4132, usage_txt +4140, usage_txt +4144, usage_txt +4147,

402 
ußge_txt
 +4180

	@libopts/boolean.c

46 
	$›ti⁄BoﬁónVÆ
–
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
 )

48 * 
pz
;

49 
ag_boﬁ
 
ªs
 = 
AG_TRUE
;

51 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

54 i‡(
pOD
->
›tArg
.
¨gSåög
 =
NULL
) {

55 
pOD
->
›tArg
.
¨gBoﬁ
 = 
AG_FALSE
;

59 *(
pOD
->
›tArg
.
¨gSåög
)) {

62 
vÆ
 = 
	`°πﬁ
–
pOD
->
›tArg
.
¨gSåög
, &
pz
, 0 );

63 i‡((
vÆ
 !0Ë|| (*
pz
 !
NUL
))

71 
NUL
:

72 
ªs
 = 
AG_FALSE
;

75 i‡(
pOD
->
›tArg
.
¨gSåög
[1] != 'f')

77 
ªs
 = 
AG_FALSE
;

80 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

81 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

82 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

84 
pOD
->
›tArg
.
¨gBoﬁ
 = 
ªs
;

85 
	}
}

	@libopts/compat/compat.h

49 #i‚de‡
COMPAT_H_GUARD


50 
	#COMPAT_H_GUARD
 1

	)

52 #i‡
deföed
(
HAVE_CONFIG_H
)

53 
	~<c⁄fig.h
>

55 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
)

56 
	~"wödows-c⁄fig.h
"

59 #îr‹ "com∑t.h" 
ªquúes
 "config.h"

60 
choke
 
	gme
.

64 #i‚de‡
HAVE_STRSIGNAL


65 * 
°rsig«l
–
signo
 );

68 
	#_GNU_SOURCE
 1

	)

69 
	#__USE_GNU
 1

	)

70 
	#__EXTENSIONS__
 1

	)

76 
	~<sys/ty≥s.h
>

77 #ifde‡
HAVE_SYS_MMAN_H


78 
	~<sys/mm™.h
>

80 
	~<sys/∑øm.h
>

81 #i‡
HAVE_SYS_PROCSET_H


82 
	~<sys/¥oc£t.h
>

84 
	~<sys/°©.h
>

85 
	~<sys/waô.h
>

87 #i‡
deföed
–
HAVE_SOLARIS_SYSINFO
 )

88 
	~<sys/sy°emöfo.h
>

89 #ñi‡
deföed
–
HAVE_UNAME_SYSCALL
 )

90 
	~<sys/ut¢ame.h
>

93 #ifde‡
DAEMON_ENABLED


94 #i‡
HAVE_SYS_STROPTS_H


95 
	~<sys/°r›ts.h
>

98 #i‡
HAVE_SYS_SOCKET_H


99 
	~<sys/sockë.h
>

102 #i‡! 
deföed
(
HAVE_SYS_POLL_H
Ë&& ! deföed(
HAVE_SYS_SELECT_H
)

103 #îr‹ 
This
 
sy°em
 
ˇ¬Ÿ
 
suµ‹t
 
d´m⁄
 
¥o˚ssög


104 
Choke
 
	gMe
.

107 #i‡
HAVE_SYS_POLL_H


108 
	~<sys/pﬁl.h
>

111 #i‡
HAVE_SYS_SELECT_H


112 
	~<sys/£À˘.h
>

115 #i‡
HAVE_NETINET_IN_H


116 
	~<√töë/ö.h
>

119 #i‡
HAVE_SYS_UN_H


120 
	~<sys/un.h
>

128 
	~<°dio.h
>

129 
	~<as£π.h
>

130 
	~<˘y≥.h
>

135 #i‡
deföed
 (
_POSIX_SOURCE
)

138 
	#REAL_DIR_ENTRY
(
dp
Ë1

	)

140 
	#REAL_DIR_ENTRY
(
dp
Ë(dp->
d_öo
 !0)

	)

143 #i‡
deföed
 (
HAVE_DIRENT_H
)

144 
	~<dúít.h
>

145 
	#D_NAMLEN
(
dúít
Ë
	`°æí
((dúít)->
d_«me
)

	)

147 
	#dúít
 
dúe˘


	)

148 
	#D_NAMLEN
(
dúít
Ë(dúít)->
d_«mÀn


	)

149 #i‡
deföed
 (
HAVE_SYS_NDIR_H
)

150 
	~<sys/ndú.h
>

152 #i‡
deföed
 (
HAVE_SYS_DIR_H
)

153 
	~<sys/dú.h
>

155 #i‡
deföed
 (
HAVE_NDIR_H
)

156 
	~<ndú.h
>

160 
	~<î∫o.h
>

161 #ifde‡
HAVE_FCNTL_H


162 
	~<f˙é.h
>

164 #i‚de‡
O_NONBLOCK


165 
	#O_NONBLOCK
 
FNDELAY


	)

168 #i‡
deföed
(
HAVE_LIBGEN
Ë&& deföed(
HAVE_LIBGEN_H
)

169 
	~<libgí.h
>

172 #i‡
deföed
(
HAVE_LIMITS_H
)

173 
	~<limôs.h
>

174 #ñi‡
deföed
(
HAVE_SYS_LIMITS_H
)

175 
	~<sys/limôs.h
>

178 
	~<mem‹y.h
>

179 
	~<£tjmp.h
>

180 
	~<sig«l.h
>

182 #i‡
deföed
–
HAVE_STDINT_H
 )

183 
	~<°döt.h
>

184 #ñi‡
deföed
–
HAVE_INTTYPES_H
 )

185 
	~<öây≥s.h
>

188 
	~<°dlib.h
>

189 
	~<°rög.h
>

191 
	~<time.h
>

193 #ifde‡
HAVE_UTIME_H


194 
	~<utime.h
>

197 #ifde‡
HAVE_UNISTD_H


198 
	~<uni°d.h
>

205 #ifde‡
__˝lu•lus


206 
	#EXTERN
 "C"

	)

208 
	#EXTERN
 

	)

212 #i‚de‡
î∫o


213 
î∫o
;

218 #i‚de‡
EXIT_FAILURE


219 
	#EXIT_SUCCESS
 0

	)

220 
	#EXIT_FAILURE
 1

	)

223 #i‚de‡
NUL


224 
	#NUL
 '\0'

	)

227 #i‚de‡
NULL


228 
	#NULL
 0

	)

231 #i‡!
deföed
 (
MAXPATHLEN
Ë&& deföed (
HAVE_SYS_PARAM_H
)

232 
	~<sys/∑øm.h
>

235 #i‡!
deföed
 (
MAXPATHLEN
Ë&& deföed (
PATH_MAX
)

236 
	#MAXPATHLEN
 
PATH_MAX


	)

239 #i‡!
deföed
 (
MAXPATHLEN
Ë&& deföed(
_MAX_PATH
)

240 
	#PATH_MAX
 
_MAX_PATH


	)

241 
	#MAXPATHLEN
 
_MAX_PATH


	)

244 #i‡!
deföed
 (
MAXPATHLEN
)

245 
	#MAXPATHLEN
 ((
size_t
)4096)

	)

248 
	#AG_PATH_MAX
 ((
size_t
)
MAXPATHLEN
)

	)

250 #i‚de‡
LONG_MAX


251 
	#LONG_MAX
 ~(1L << (8*(Ë-1))

	)

252 
	#INT_MAX
 ~(1 << (8*(Ë-1))

	)

255 #i‚de‡
ULONG_MAX


256 
	#ULONG_MAX
 ~(
OUL
)

	)

257 
	#UINT_MAX
 ~(
OU
)

	)

260 #i‚de‡
SHORT_MAX


261 
	#SHORT_MAX
 ~(1 << (8*(Ë- 1))

	)

263 
	#USHORT_MAX
 ~(
OUS
)

	)

266 #i‚de‡
HAVE_INT8_T


267 sig√d 
	töt8_t
;

268 
	#HAVE_INT8_T
 1

	)

270 #i‚de‡
HAVE_UINT8_T


271 
	tuöt8_t
;

272 
	#HAVE_UINT8_T
 1

	)

274 #i‚de‡
HAVE_INT16_T


275 sig√d 
	töt16_t
;

276 
	#HAVE_INT16_T
 1

	)

278 #i‚de‡
HAVE_UINT16_T


279 
	tuöt16_t
;

280 
	#HAVE_UINT16_T
 1

	)

283 #i‚de‡
HAVE_INT32_T


284 #i‡
SIZEOF_INT
 == 4

285 sig√d 
	töt32_t
;

286 #ñi‡
SIZEOF_LONG
 == 4

287 sig√d 
	töt32_t
;

289 
	#HAVE_INT32_T
 1

	)

292 #i‚de‡
HAVE_UINT32_T


293 #i‡
SIZEOF_INT
 == 4

294 
	tuöt32_t
;

295 #ñi‡
SIZEOF_LONG
 == 4

296 
	tuöt32_t
;

298 #îr‹ 
C™nŸ
 
¸óã
 
a
 
uöt32_t
 
ty≥
.

299 
Choke
 
	gMe
.

301 
	#HAVE_UINT32_T
 1

	)

304 #i‚de‡
HAVE_INTPTR_T


305 #i‡
SIZEOF_CHARP
 =
SIZEOF_LONG


306 sig√d 
	töçå_t
;

308 sig√d 
	töçå_t
;

310 
	#HAVE_INTPTR_T
 1

	)

313 #i‚de‡
HAVE_UINTPTR_T


314 #i‡
SIZEOF_CHARP
 =
SIZEOF_LONG


315 
	töçå_t
;

317 
	töçå_t
;

319 
	#HAVE_INTPTR_T
 1

	)

322 #i‚de‡
HAVE_UINT_T


323 
	tuöt_t
;

324 
	#HAVE_UINT_T
 1

	)

327 #i‚de‡
HAVE_SIZE_T


328 
	tsize_t
;

329 
	#HAVE_SIZE_T
 1

	)

331 #i‚de‡
HAVE_WINT_T


332 
	twöt_t
;

333 
	#HAVE_WINT_T
 1

	)

335 #i‚de‡
HAVE_PID_T


336 sig√d 
	tpid_t
;

337 
	#HAVE_PID_T
 1

	)

341 #i‚de‡
HAVE_STRCHR


342 
	#°rchr
 
ödex


	)

343 
	#°ºchr
 
rödex


	)

346 #ifde‡
USE_FOPEN_BINARY


347 #i‚de‡
FOPEN_BINARY_FLAG


348 
	#FOPEN_BINARY_FLAG
 "b"

	)

350 #i‚de‡
FOPEN_TEXT_FLAG


351 
	#FOPEN_TEXT_FLAG
 "t"

	)

354 #i‚de‡
FOPEN_BINARY_FLAG


355 
	#FOPEN_BINARY_FLAG


	)

357 #i‚de‡
FOPEN_TEXT_FLAG


358 
	#FOPEN_TEXT_FLAG


	)

362 #i‚de‡
STR


363 
	#_STR
(
s
Ë#s

	)

364 
	#STR
(
s
Ë
	`_STR
(s)

	)

370 #i‡
SIZEOF_CHARP
 > 
SIZEOF_INT


371 
	tt_w‹d
;

372 
	#WORD_MAX
 
LONG_MAX


	)

373 
	#WORD_MIN
 
LONG_MIN


	)

375 
	tt_w‹d
;

376 
	#WORD_MAX
 
INT_MAX


	)

377 
	#WORD_MIN
 
INT_MIN


	)

	@libopts/compat/pathfind.c

12 
	~"com∑t.h
"

13 #i‚de‡
HAVE_PATHFIND


14 #i‡
deföed
(
__wödows__
Ë&& !deföed(
__CYGWIN__
)

16 
	$∑thföd
–c⁄°* 
∑th
,

17 c⁄°* 
fûeName
,

18 c⁄°* 
mode
 )

20  
NULL
;

21 
	}
}

24 * 
make_absﬁuã
–c⁄° *
°rög
, c⁄° *
dŸ_∑th
 );

25 * 
ˇn⁄iˇlize_∑th«me
–*
∑th
 );

26 * 
exåa˘_cﬁ⁄_unô
–* 
dú
, c⁄° *
°rög
, *
p_ödex
 );

84 
	$∑thföd
–c⁄°* 
∑th
,

85 c⁄°* 
fûeName
,

86 c⁄°* 
mode
 )

88 
p_ödex
 = 0;

89 
mode_bôs
 = 0;

90 * 
∑thName
 = 
NULL
;

91 
zP©h
[ 
AG_PATH_MAX
 + 1 ];

93 i‡(
	`°rchr
–
mode
, 'r' )Ë
mode_bôs
 |
R_OK
;

94 i‡(
	`°rchr
–
mode
, 'w' )Ë
mode_bôs
 |
W_OK
;

95 i‡(
	`°rchr
–
mode
, 'x' )Ë
mode_bôs
 |
X_OK
;

101 
DIR
* 
dúP
;

102 * 
cﬁ⁄_unô
 = 
	`exåa˘_cﬁ⁄_unô
–
zP©h
, 
∑th
, &
p_ödex
 );

107 i‡(
cﬁ⁄_unô
 =
NULL
)

110 
dúP
 = 
	`›ídú
–
cﬁ⁄_unô
 );

115 i‡(
dúP
 =
NULL
)

122 
dúít
 *
ítP
 = 
	`ªaddú
–
dúP
 );

124 i‡(
ítP
 =(
dúít
*)
NULL
)

130 i‡(
	`°rcmp
–
ítP
->
d_«me
, 
fûeName
 ) == 0) {

131 * 
pzFuŒName
 = 
	`make_absﬁuã
–
fûeName
, 
cﬁ⁄_unô
);

136 i‡(
	`ac˚ss
–
pzFuŒName
, 
mode_bôs
 ) >= 0) {

140 
∑thName
 = 
	`ˇn⁄iˇlize_∑th«me
–
pzFuŒName
 );

143 
	`‰ì
–(*)
pzFuŒName
 );

148 
	`˛o£dú
–
dúP
 );

150 i‡(
∑thName
 !
NULL
)

154  
∑thName
;

155 
	}
}

163 
	$make_absﬁuã
–c⁄° *
°rög
, c⁄° *
dŸ_∑th
 )

165 *
ªsu…
;

166 
ªsu…_Àn
;

168 i‡(!
dŸ_∑th
 || *
°rög
 == '/') {

169 
ªsu…
 = 
	`°rdup
–
°rög
 );

171 i‡(
dŸ_∑th
 && dot_path[0]) {

172 
ªsu…
 = 
	`mÆloc
–2 + 
	`°æí
–
dŸ_∑th
 ) + såÀn–
°rög
 ) );

173 
	`°r˝y
–
ªsu…
, 
dŸ_∑th
 );

174 
ªsu…_Àn
 = 
	`°æí
–
ªsu…
 );

175 i‡(
ªsu…
[
ªsu…_Àn
 - 1] != '/') {

176 
ªsu…
[
ªsu…_Àn
++] = '/';

177 
ªsu…
[
ªsu…_Àn
] = '\0';

180 
ªsu…
 = 
	`mÆloc
–3 + 
	`°æí
–
°rög
 ) );

181 
ªsu…
[0] = '.';Ñesult[1] = '/';Ñesult[2] = '\0';

182 
ªsu…_Àn
 = 2;

185 
	`°r˝y
–
ªsu…
 + 
ªsu…_Àn
, 
°rög
 );

188  
ªsu…
;

189 
	}
}

203 
	$ˇn⁄iˇlize_∑th«me
–*
∑th
 )

205 
i
, 
°¨t
;

206 
°ub_ch¨
, *
ªsu…
;

209 
ªsu…
 = 
	`°rdup
–
∑th
 );

211 
°ub_ch¨
 = (*
∑th
 == '/') ? '/' : '.';

214 
i
 = 0;

215 
ªsu…
[
i
]) {

216 
ªsu…
[
i
] != '\0' &&Ñesult[i] != '/')

217 
i
++;

219 
°¨t
 = 
i
++;

224 i‡(!
ªsu…
[
°¨t
])

228 
ªsu…
[
i
] == '/')

229 
i
++;

231 #i‡!
	`deföed
 (
≠ﬁlo
)

232 i‡((
°¨t
 + 1Ë!
i
)

234 i‡((
°¨t
 + 1Ë!
i
 && (start != 0 || i != 2))

237 
	`°r˝y
–
ªsu…
 + 
°¨t
 + 1,Ñesu… + 
i
 );

238 
i
 = 
°¨t
 + 1;

242 i‡(
°¨t
 > 0 && 
ªsu…
[start - 1] == '\\')

246 i‡((
°¨t
 && !
ªsu…
[
i
])

247 || (
ªsu…
[
i
] == '.' && !result[i+1])) {

248 
ªsu…
[--
i
] = '\0';

253 i‡(
ªsu…
[
i
] == '.') {

255 i‡(
ªsu…
[
i
 + 1] == '/') {

256 
	`°r˝y
–
ªsu…
 + 
i
,Ñesult + i + 1 );

257 
i
 = (
°¨t
 < 0) ? 0 : start;

262 i‡(
ªsu…
[
i
 + 1] == '.' &&

263 (
ªsu…
[
i
 + 2] == '/' || !result[i + 2])) {

264 --
°¨t
 > -1 && 
ªsu…
[start] != '/')

266 
	`°r˝y
–
ªsu…
 + 
°¨t
 + 1,Ñesu… + 
i
 + 2 );

267 
i
 = (
°¨t
 < 0) ? 0 : start;

273 i‡(!*
ªsu…
) {

274 *
ªsu…
 = 
°ub_ch¨
;

275 
ªsu…
[1] = '\0';

278  
ªsu…
;

279 
	}
}

287 
	$exåa˘_cﬁ⁄_unô
–* 
pzDú
, c⁄° *
°rög
, *
p_ödex
 )

289 * 
pzDe°
 = 
pzDú
;

290 
ix
 = *
p_ödex
;

292 i‡(
°rög
 =
NULL
)

293  
NULL
;

295 i‡(()
ix
 >
	`°æí
–
°rög
 ))

296  
NULL
;

299 c⁄°* 
pzSrc
 = 
°rög
 + 
ix
;

301 *
pzSrc
 == ':')ÖzSrc++;

304 
ch
 = (*(
pzDe°
++Ë*(
pzSrc
++));

305 
ch
) {

307 
pzDe°
[-1] = 
NUL
;

308 
NUL
:

309 
c›y_d⁄e
;

312 i‡((
pzDe°
 - 
pzDú
Ë>
AG_PATH_MAX
)

314 } 
c›y_d⁄e
:;

316 
ix
 = 
pzSrc
 - 
°rög
;

319 i‡(*
pzDú
 =
NUL
)

320  
NULL
;

322 *
p_ödex
 = 
ix
;

323  
pzDú
;

324 
	}
}

	@libopts/compat/snprintf.c

2 #i‚de‡
HAVE_VPRINTF


3 
	~"choke-me:Çÿv¥öt‡™dÇÿ¢¥ötf
"

6 #i‡
deföed
(
HAVE_STDARG_H
)

7 
	~<°d¨g.h
>

8 #i‚de‡ 
VA_START


9 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊, f)

	)

10 
	#VA_END
(
a
Ë
	`va_íd
◊)

	)

12 
	#SNV_USING_STDARG_H


	)

14 #ñi‡
deföed
(
HAVE_VARARGS_H
)

15 
	~<v¨¨gs.h
>

16 #i‚de‡ 
VA_START


17 
	#VA_START
(
a
, 
f
Ë
	`va_°¨t
◊)

	)

18 
	#VA_END
(
a
Ë
	`va_íd
◊)

	)

20 #unde‡
SNV_USING_STDARG_H


23 
	~"mu°-have-°d¨g-‹-v¨¨gs
"

27 
	$¢¥ötf
(*
°r
, 
size_t
 
n
, c⁄° *
fmt
, ...)

29 
va_li°
 
≠
;

30 
rvÆ
;

32 #ifde‡
VSPRINTF_CHARSTAR


33 *
Ω
;

34 
	`VA_START
(
≠
, 
fmt
);

35 
Ω
 = 
	`v•rötf
(
°r
, 
fmt
, 
≠
);

36 
	`VA_END
(
≠
);

37 
rvÆ
 = 
	`°æí
(
Ω
);

40 
	`VA_START
(
≠
, 
fmt
);

41 
rvÆ
 = 
	`v•rötf
(
°r
, 
fmt
, 
≠
);

42 
	`VA_END
(
≠
);

45 i‡(
rvÆ
 > 
n
) {

46 
	`Ârötf
(
°dîr
, "¢¥öt‡buf„∏ovîru¿%d > %d\n", 
rvÆ
, ()
n
);

47 
	`ab‹t
();

49  
rvÆ
;

50 
	}
}

53 
	$v¢¥ötf
–*
°r
, 
size_t
 
n
, c⁄° *
fmt
, 
va_li°
 
≠
 )

55 #ifde‡
VSPRINTF_CHARSTAR


56  (
	`°æí
(
	`v•rötf
(
°r
, 
fmt
, 
≠
)));

58  (
	`v•rötf
(
°r
, 
fmt
, 
≠
));

60 
	}
}

	@libopts/compat/strchr.c

28 
	$°rchr
–c⁄° *
s
, 
c
)

31 i‡(()*
s
 =()
c
)

32  
s
;

34 } *(++
s
Ë!
NUL
);

36  
NULL
;

37 
	}
}

40 
	$°ºchr
–c⁄° *
s
, 
c
)

42 c⁄° *
e
 = 
s
 + 
	`°æí
(s);

45 i‡(--
e
 < 
s
)

48 i‡(()*
e
 =()
c
)

49  
e
;

51  
NULL
;

52 
	}
}

	@libopts/compat/strdup.c

6 
	$°rdup
–c⁄° *
s
 )

8 *
˝
;

10 i‡(
s
 =
NULL
)

11  
NULL
;

13 
˝
 = (*Ë
	`AGALOC
((Ë(
	`°æí
(
s
)+1), "strdup");

15 i‡(
˝
 !
NULL
)

16 (Ë
	`°r˝y
(
˝
, 
s
);

18  
˝
;

19 
	}
}

	@libopts/compat/windows-config.h

22 #i‚de‡
WINDOWS_CONFIG_HACKERY


23 
	#WINDOWS_CONFIG_HACKERY
 1

	)

30 #i‚de‡
__wödows__


31 
	#__wödows__
 4

	)

41 
	#¢¥ötf
 
_¢¥ötf


	)

51 
	#SIZEOF_INT
 4

	)

52 
	#SIZEOF_CHARP
 4

	)

53 
	#SIZEOF_LONG
 4

	)

54 
	#SIZEOF_SHORT
 2

	)

56 
	tuöçå_t
;

82 
	#HAVE_LIMITS_H
 1

	)

83 
	#HAVE_STRDUP
 1

	)

84 
	#HAVE_STRCHR
 1

	)

85 
	#HAVE_FCNTL_H
 1

	)

94 #i‚de‡
_WSPIAPI_H_


95 
	#_WSPIAPI_H_


	)

99 #i‚de‡
_WINSOCKAPI_


100 
	#_WINSOCKAPI_


	)

103 #i‚de‡
__RPCASYNC_H__


104 
	#__RPCASYNC_H__


	)

108 
	~<wödows.h
>

109 
	~<wösock2.h
>

110 
	~<limôs.h
>

116 
	#°rdup
 
_°rdup


	)

117 
	#°©
 
_°©


	)

118 
	#u∆ök
 
_u∆ök


	)

119 
	#fchmod
–
_x
, 
_y
 );

	)

120 
	#ssize_t
 
SSIZE_T


	)

122 
	~<io.h
>

123 
	#›í
 
_›í


	)

124 
	#˛o£
 
_˛o£


	)

125 
	#ªad
 
_ªad


	)

126 
	#wrôe
 
_wrôe


	)

127 
	#l£ek
 
_l£ek


	)

128 
	#pùe
 
_pùe


	)

129 
	#dup2
 
_dup2


	)

131 
	#O_RDWR
 
_O_RDWR


	)

132 
	#O_RDONLY
 
_O_RDONLY


	)

133 
	#O_EXCL
 
_O_EXCL


	)

135 #i‚de‡
S_ISREG


136 
	#S_IFREG
 
_S_IFREG


	)

137 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFREG
Ë=S_IFREG)

	)

140 #i‚de‡
S_ISDIR


141 
	#S_IFDIR
 
_S_IFDIR


	)

142 
	#S_ISDIR
(
mode
Ë(((modeË& 
S_IFDIR
Ë=S_IFDIR)

	)

	@libopts/config.h

5 
	#FOPEN_BINARY_FLAG
 "b"

	)

8 
	#FOPEN_TEXT_FLAG
 "t"

	)

11 
	#HAVE_ARPA_INET_H
 1

	)

14 
	#HAVE_CANONICALIZE_FILE_NAME
 1

	)

17 
	#HAVE_DEV_ZERO
 1

	)

21 
	#HAVE_DIRENT_H
 1

	)

24 
	#HAVE_DLFCN_H
 1

	)

30 
	#HAVE_ERRNO_H
 1

	)

33 
	#HAVE_FCNTL_H
 1

	)

36 
	#HAVE_FORK
 1

	)

39 
	#HAVE_GETHOSTBYNAME
 1

	)

42 
	#HAVE_INT16_T
 1

	)

45 
	#HAVE_INT32_T
 1

	)

48 
	#HAVE_INT8_T
 1

	)

51 
	#HAVE_INTPTR_T
 1

	)

54 
	#HAVE_INTTYPES_H
 1

	)

60 
	#HAVE_LIBGEN_H
 1

	)

63 
	#HAVE_LIMITS_H
 1

	)

67 
	#HAVE_MALLOC
 1

	)

70 
	#HAVE_MEMMOVE
 1

	)

73 
	#HAVE_MEMORY_H
 1

	)

76 
	#HAVE_MEMSET
 1

	)

79 
	#HAVE_MMAP
 1

	)

82 
	#HAVE_MPI
 1

	)

88 
	#HAVE_NETDB_H
 1

	)

91 
	#HAVE_NETINET_IN_H
 1

	)

97 
	#HAVE_PID_T
 1

	)

100 
	#HAVE_REALPATH
 1

	)

106 
	#HAVE_SELECT
 1

	)

109 
	#HAVE_SETJMP_H
 1

	)

112 
	#HAVE_SIZE_T
 1

	)

115 
	#HAVE_SNPRINTF
 1

	)

118 
	#HAVE_SOCKET
 1

	)

121 
	#HAVE_STDARG_H
 1

	)

124 
	#HAVE_STDBOOL_H
 1

	)

127 
	#HAVE_STDINT_H
 1

	)

130 
	#HAVE_STDLIB_H
 1

	)

133 
	#HAVE_STRCHR
 1

	)

136 
	#HAVE_STRDUP
 1

	)

139 
	#HAVE_STRFTIME
 1

	)

142 
	#HAVE_STRINGS_H
 1

	)

145 
	#HAVE_STRING_H
 1

	)

148 
	#HAVE_STRRCHR
 1

	)

151 
	#HAVE_STRSIGNAL
 1

	)

154 
	#HAVE_SYSEXITS_H
 1

	)

164 
	#HAVE_SYS_MMAN_H
 1

	)

171 
	#HAVE_SYS_PARAM_H
 1

	)

174 
	#HAVE_SYS_POLL_H
 1

	)

180 
	#HAVE_SYS_SELECT_H
 1

	)

183 
	#HAVE_SYS_SOCKET_H
 1

	)

186 
	#HAVE_SYS_STAT_H
 1

	)

189 
	#HAVE_SYS_STROPTS_H
 1

	)

192 
	#HAVE_SYS_TIME_H
 1

	)

195 
	#HAVE_SYS_TYPES_H
 1

	)

198 
	#HAVE_SYS_UN_H
 1

	)

201 
	#HAVE_SYS_WAIT_H
 1

	)

204 
	#HAVE_UINT16_T
 1

	)

207 
	#HAVE_UINT32_T
 1

	)

210 
	#HAVE_UINT8_T
 1

	)

213 
	#HAVE_UINTPTR_T
 1

	)

219 
	#HAVE_UNISTD_H
 1

	)

222 
	#HAVE_UTIME_H
 1

	)

231 
	#HAVE_VFORK
 1

	)

237 
	#HAVE_VPRINTF
 1

	)

240 
	#HAVE_WCHAR_H
 1

	)

243 
	#HAVE_WCHAR_T
 1

	)

246 
	#HAVE_WINT_T
 1

	)

249 
	#HAVE_WORKING_FORK
 1

	)

252 
	#HAVE_WORKING_VFORK
 1

	)

255 
	#HAVE__BOOL
 1

	)

259 
	#LT_OBJDIR
 ".libs/"

	)

265 
	#PACKAGE_BUGREPORT
 "gauss@cs.uèh.edu"

	)

268 
	#PACKAGE_NAME
 "i•"

	)

271 
	#PACKAGE_STRING
 "i• 0.2.0"

	)

274 
	#PACKAGE_TARNAME
 "i•"

	)

277 
	#PACKAGE_URL
 ""

	)

280 
	#PACKAGE_VERSION
 "0.2.0"

	)

283 
	#REGEX_HEADER
 <
ªgex
.
h
>

	)

286 
	#RETSIGTYPE
 

	)

289 
	#SELECT_TYPE_ARG1
 

	)

292 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

295 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

298 
	#SIZEOF_CHARP
 8

	)

301 
	#SIZEOF_INT
 4

	)

304 
	#SIZEOF_LONG
 8

	)

307 
	#SIZEOF_SHORT
 2

	)

310 
	#STDC_HEADERS
 1

	)

313 
	#TIME_WITH_SYS_TIME
 1

	)

316 
	#WITH_LIBREGEX
 1

	)

323 #i‚de‡
__˝lu•lus


	@libopts/configfile.c

31 
fûePª£t
(

32 
tO±i⁄s
* 
pO±s
,

33 c⁄°* 
pzFûeName
,

34 
dúe˘i⁄
 );

37 
h™dÀCommít
(* 
pzText
);

40 
h™dÀC⁄fig
(

41 
tO±i⁄s
* 
pO±s
,

42 
tO±Sèã
* 
pOS
,

43 * 
pzText
,

44 
dúe˘i⁄
 );

47 
h™dÀDúe˘ive
(

48 
tO±i⁄s
* 
pO±s
,

49 * 
pzText
 );

52 
h™dÀProgømSe˘i⁄
(

53 
tO±i⁄s
* 
pO±s
,

54 * 
pzText
 );

57 
h™dÀSåu˘uª
(

58 
tO±i⁄s
* 
pO±s
,

59 
tO±Sèã
* 
pOS
,

60 * 
pzText
,

61 
dúe˘i⁄
 );

64 
∑r£KeyW‹dTy≥
(

65 
tO±i⁄s
* 
pO±s
,

66 * 
pzText
,

67 
tO±i⁄VÆue
* 
pTy≥
 );

70 
∑r£SëMemTy≥
(

71 
tO±i⁄s
* 
pO±s
,

72 * 
pzText
,

73 
tO±i⁄VÆue
* 
pTy≥
 );

76 
∑r£VÆueTy≥
(

77 * 
pzText
,

78 
tO±i⁄VÆue
* 
pTy≥
 );

81 
skùUnknown
(* 
pzText
);

115 c⁄° 
tO±i⁄VÆue
*

116 
	$c⁄figFûeLﬂd
(c⁄°* 
pzFûe
)

118 
tm≠_öfo_t
 
cfgfûe
;

119 
tO±i⁄VÆue
* 
pRes
 = 
NULL
;

120 
tO±i⁄LﬂdMode
 
ßve_mode
 = 
›ti⁄_lﬂd_mode
;

122 * 
pzText
 =

123 
	`ãxt_mm≠
(
pzFûe
, 
PROT_READ
, 
MAP_PRIVATE
, &
cfgfûe
);

125 i‡(
	`TEXT_MMAP_FAILED_ADDR
(
pzText
))

126  
NULL
;

128 
›ti⁄_lﬂd_mode
 = 
OPTION_LOAD_COOKED
;

129 
pRes
 = 
	`›ti⁄LﬂdNe°ed
(
pzText
, 
pzFûe
, 
	`°æí
(pzFile));

131 i‡(
pRes
 =
NULL
) {

132 
îr
 = 
î∫o
;

133 
	`ãxt_munm≠
(&
cfgfûe
);

134 
î∫o
 = 
îr
;

136 
	`ãxt_munm≠
(&
cfgfûe
);

138 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

139  
pRes
;

140 
	}
}

167 c⁄° 
tO±i⁄VÆue
*

168 
	$›ti⁄FödVÆue
(c⁄° 
tO±Desc
* 
pO±Desc
, c⁄°* 
pzName
,

169 c⁄°* 
pzVÆ
)

171 c⁄° 
tO±i⁄VÆue
* 
pRes
 = 
NULL
;

173 i‡–(
pO±Desc
 =
NULL
)

174 || (
	`OPTST_GET_ARGTYPE
(
pO±Desc
->
fO±Sèã
Ë!
OPARG_TYPE_HIERARCHY
)) {

175 
î∫o
 = 
EINVAL
;

178 i‡(
pO±Desc
->
›tCookõ
 =
NULL
) {

179 
î∫o
 = 
ENOENT
;

183 
tArgLi°
* 
pAL
 = 
pO±Desc
->
›tCookõ
;

184 
˘
 = 
pAL
->
u£Ct
;

185 ** 
µOV
 = (**)(
pAL
->
≠zArgs
);

187 i‡(
˘
 == 0) {

188 
î∫o
 = 
ENOENT
;

192 i‡(
pzName
 =
NULL
) {

193 
pRes
 = (
tO±i⁄VÆue
*)*
µOV
;

197 --
˘
 >= 0) {

198 c⁄° 
tO±i⁄VÆue
* 
pOV
 = *(
µOV
++);

199 c⁄° 
tO±i⁄VÆue
* 
pRV
 = 
	`›ti⁄GëVÆue
(
pOV
, 
pzName
);

201 i‡(
pRV
 =
NULL
)

204 i‡(
pzVÆ
 =
NULL
) {

205 
pRes
 = 
pOV
;

209 i‡(
pRes
 =
NULL
)

210 
î∫o
 = 
ENOENT
;

213  
pRes
;

214 
	}
}

243 
tO±i⁄VÆue
 const *

244 
	$›ti⁄FödNextVÆue
(c⁄° 
tO±Desc
 * 
pO±Desc
, c⁄° 
tO±i⁄VÆue
 * 
pPªvVÆ
,

245 c⁄° * 
pzName
, c⁄° * 
pzVÆ
)

247 
foundOldVÆ
 = 0;

248 
tO±i⁄VÆue
* 
pRes
 = 
NULL
;

250 i‡–(
pO±Desc
 =
NULL
)

251 || (
	`OPTST_GET_ARGTYPE
(
pO±Desc
->
fO±Sèã
Ë!
OPARG_TYPE_HIERARCHY
)) {

252 
î∫o
 = 
EINVAL
;

255 i‡(
pO±Desc
->
›tCookõ
 =
NULL
) {

256 
î∫o
 = 
ENOENT
;

260 
tArgLi°
* 
pAL
 = 
pO±Desc
->
›tCookõ
;

261 
˘
 = 
pAL
->
u£Ct
;

262 ** 
µOV
 = (**)
pAL
->
≠zArgs
;

264 i‡(
˘
 == 0) {

265 
î∫o
 = 
ENOENT
;

269 --
˘
 >= 0) {

270 
tO±i⁄VÆue
* 
pOV
 = *(
µOV
++);

271 i‡(
foundOldVÆ
) {

272 
pRes
 = 
pOV
;

275 i‡(
pOV
 =
pPªvVÆ
)

276 
foundOldVÆ
 = 1;

278 i‡(
pRes
 =
NULL
)

279 
î∫o
 = 
ENOENT
;

282  
pRes
;

283 
	}
}

311 c⁄° 
tO±i⁄VÆue
*

312 
	$›ti⁄GëVÆue
(c⁄° 
tO±i⁄VÆue
* 
pOld
, c⁄°* 
pzVÆName
)

314 
tArgLi°
* 
pAL
;

315 
tO±i⁄VÆue
* 
pRes
 = 
NULL
;

317 i‡((
pOld
 =
NULL
Ë|| (pOld->
vÆTy≥
 !
OPARG_TYPE_HIERARCHY
)) {

318 
î∫o
 = 
EINVAL
;

319  
NULL
;

321 
pAL
 = 
pOld
->
v
.
√°VÆ
;

323 i‡(
pAL
->
u£Ct
 > 0) {

324 
˘
 = 
pAL
->
u£Ct
;

325 ** 
∑pOV
 = (**)(
pAL
->
≠zArgs
);

327 i‡(
pzVÆName
 =
NULL
) {

328 
pRes
 = (
tO±i⁄VÆue
*)*
∑pOV
;

332 
tO±i⁄VÆue
* 
pOV
 = *(
∑pOV
++);

333 i‡(
	`°rcmp
(
pOV
->
pzName
, 
pzVÆName
) == 0) {

334 
pRes
 = 
pOV
;

337 } --
˘
 > 0);

339 i‡(
pRes
 =
NULL
)

340 
î∫o
 = 
ENOENT
;

341  
pRes
;

342 
	}
}

372 
tO±i⁄VÆue
 const *

373 
	$›ti⁄NextVÆue
(
tO±i⁄VÆue
 c⁄° * 
pOVLi°
,tO±i⁄VÆuêc⁄° * 
pOldOV
 )

375 
tArgLi°
* 
pAL
;

376 
tO±i⁄VÆue
* 
pRes
 = 
NULL
;

377 
îr
 = 
EINVAL
;

379 i‡((
pOVLi°
 =
NULL
Ë|| (pOVLi°->
vÆTy≥
 !
OPARG_TYPE_HIERARCHY
)) {

380 
î∫o
 = 
EINVAL
;

381  
NULL
;

383 
pAL
 = 
pOVLi°
->
v
.
√°VÆ
;

385 
˘
 = 
pAL
->
u£Ct
;

386 ** 
∑pNV
 = (**)(
pAL
->
≠zArgs
);

388 
˘
-- > 0) {

389 
tO±i⁄VÆue
* 
pNV
 = *(
∑pNV
++);

390 i‡(
pNV
 =
pOldOV
) {

391 i‡(
˘
 == 0) {

392 
îr
 = 
ENOENT
;

395 
îr
 = 0;

396 
pRes
 = (
tO±i⁄VÆue
*)*
∑pNV
;

402 i‡(
îr
 != 0)

403 
î∫o
 = 
îr
;

404  
pRes
;

405 
	}
}

413 
	$fûePª£t
(

414 
tO±i⁄s
* 
pO±s
,

415 c⁄°* 
pzFûeName
,

416 
dúe˘i⁄
 )

418 
tm≠_öfo_t
 
cfgfûe
;

419 
tO±Sèã
 
›t°
 = 
	`OPTSTATE_INITIALIZER
(
PRESET
);

420 
tAoUL
 
°_Êags
 = 
›t°
.
Êags
;

421 * 
pzFûeText
 =

422 
	`ãxt_mm≠
(
pzFûeName
, 
PROT_READ
|
PROT_WRITE
, 
MAP_PRIVATE
, &
cfgfûe
);

424 i‡(
	`TEXT_MMAP_FAILED_ADDR
(
pzFûeText
))

427 i‡(
dúe˘i⁄
 =
DIRECTION_CALLED
) {

428 
°_Êags
 = 
OPTST_DEFINED
;

429 
dúe˘i⁄
 = 
DIRECTION_PROCESS
;

438 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_PRESETTING
) == 0)

439 
°_Êags
 = 
OPTST_SET
;

442 
›t°
.
Êags
 = 
°_Êags
;

443 
	`IS_WHITESPACE_CHAR
(*
pzFûeText
))ÖzFileText++;

445 i‡(
	`IS_VAR_FIRST_CHAR
(*
pzFûeText
)) {

446 
pzFûeText
 = 
	`h™dÀC⁄fig
(
pO±s
, &
›t°
,ÖzFûeText, 
dúe˘i⁄
);

448 } *
pzFûeText
) {

450 i‡(
	`IS_VAR_FIRST_CHAR
(
pzFûeText
[1]))

451 
pzFûeText
 =

452 
	`h™dÀSåu˘uª
(
pO±s
, &
›t°
, 
pzFûeText
, 
dúe˘i⁄
);

454 
pzFûeText
[1]) {

456 
pzFûeText
 = 
	`h™dÀDúe˘ive
(
pO±s
,ÖzFileText);

460 
pzFûeText
 = 
	`h™dÀCommít
(pzFileText);

464 
pzFûeText
 = 
	`°rchr
(pzFileText+2, '>');

465 i‡(
pzFûeText
++ !
NULL
)

469 
Æl_d⁄e
;

474 
pzFûeText
 = 
	`h™dÀProgømSe˘i⁄
(
pO±s
,ÖzFileText);

478 
pzFûeText
 = 
	`°rchr
(pzFileText+1, '\n');

482 
Æl_d⁄e
;

484 } 
pzFûeText
 !
NULL
);

486 
Æl_d⁄e
:

487 
	`ãxt_munm≠
(&
cfgfûe
);

488 
	}
}

498 
	$h™dÀCommít
(* 
pzText
)

500 * 
pz
 = 
	`°r°r
(
pzText
, "-->");

501 i‡(
pz
 !
NULL
)

502 
pz
 += 3;

503  
pz
;

504 
	}
}

515 
	$h™dÀC⁄fig
(

516 
tO±i⁄s
* 
pO±s
,

517 
tO±Sèã
* 
pOS
,

518 * 
pzText
,

519 
dúe˘i⁄
 )

521 * 
pzName
 = 
pzText
++;

522 * 
pzEnd
 = 
	`°rchr
(
pzText
, '\n');

524 i‡(
pzEnd
 =
NULL
)

525  
pzText
 + 
	`°æí
(pzText);

527 
	`IS_VALUE_NAME_CHAR
(*
pzText
))ÖzText++;

528 
	`IS_WHITESPACE_CHAR
(*
pzText
))ÖzText++;

529 i‡(
pzText
 > 
pzEnd
) {

530 
«me_⁄ly
:

531 *
pzEnd
++ = 
NUL
;

532 
	`lﬂdO±i⁄Löe
(
pO±s
, 
pOS
, 
pzName
, 
dúe˘i⁄
, 
OPTION_LOAD_UNCOOKED
);

533  
pzEnd
;

541 i‡((*
pzText
 == '=') || (*pzText == ':')) {

542 
	`IS_WHITESPACE_CHAR
(*++
pzText
)) ;

543 i‡(
pzText
 > 
pzEnd
)

544 
«me_⁄ly
;

545 } i‡(! 
	`IS_WHITESPACE_CHAR
(
pzText
[-1]))

546  
NULL
;

552 i‡(
pzEnd
[-1] == '\\') {

553 * 
pcD
 = 
pzEnd
-1;

554 * 
pcS
 = 
pzEnd
;

557 
ch
 = *(
pcS
++);

558 
ch
) {

559 
NUL
:

560 
pcS
 = 
NULL
;

563 *
pcD
 = 
NUL
;

564 
pzEnd
 = 
pcS
;

565 
c›y_d⁄e
;

568 i‡(*
pcS
 == '\n') {

569 
ch
 = *(
pcS
++);

573 *(
pcD
++Ë
ch
;

575 } 
c›y_d⁄e
:;

581 *(
pzEnd
++Ë
NUL
;

588 
	`lﬂdO±i⁄Löe
(
pO±s
, 
pOS
, 
pzName
, 
dúe˘i⁄
, 
OPTION_LOAD_UNCOOKED
);

590  
pzEnd
;

591 
	}
}

600 
	$h™dÀDúe˘ive
(

601 
tO±i⁄s
* 
pO±s
,

602 * 
pzText
 )

604 
ztôÀ
[32] = "<?";

605 
size_t
 
tôÀ_Àn
 = 
	`°æí
(
zProg
);

606 
size_t
 
«me_Àn
;

608 i‡–(
	`°∫cmp
(
pzText
+2, 
zProg
, 
tôÀ_Àn
) != 0)

609 || (! 
	`IS_WHITESPACE_CHAR
(
pzText
[
tôÀ_Àn
+2])) ) {

610 
pzText
 = 
	`°rchr
(pzText+2, '>');

611 i‡(
pzText
 !
NULL
)

612 
pzText
++;

613  
pzText
;

616 
«me_Àn
 = 
	`°æí
(
pO±s
->
pzProgName
);

617 
	`°r˝y
(
ztôÀ
+2, 
zProg
);

618 
tôÀ_Àn
 += 2;

621 
pzText
 +
tôÀ_Àn
;

623 i‡(
	`IS_WHITESPACE_CHAR
(*
pzText
)) {

624 
	`IS_WHITESPACE_CHAR
(*++
pzText
)) ;

625 i‡–(
	`°∫eqvcmp
(
pzText
, 
pO±s
->
pzProgName
, ()
«me_Àn
) == 0)

626 && (
pzText
[
«me_Àn
] == '>')) {

627 
pzText
 +
«me_Àn
 + 1;

632 
pzText
 = 
	`°r°r
’zText, 
ztôÀ
);

633 } 
pzText
 !
NULL
);

635  
pzText
;

636 
	}
}

646 
	$h™dÀProgømSe˘i⁄
(

647 
tO±i⁄s
* 
pO±s
,

648 * 
pzText
 )

650 
size_t
 
Àn
 = 
	`°æí
(
pO±s
->
pzPROGNAME
);

651 i‡–(
	`°∫cmp
(
pzText
+1, 
pO±s
->
pzPROGNAME
, 
Àn
) == 0)

652 && (
pzText
[
Àn
+1] == ']'))

653  
	`°rchr
(
pzText
 + 
Àn
 + 2, '\n');

655 i‡(
Àn
 > 16)

656  
NULL
;

659 
z
[24];

660 
	`•rötf
(
z
, "[%s]", 
pO±s
->
pzPROGNAME
);

661 
pzText
 = 
	`°r°r
’zText, 
z
);

664 i‡(
pzText
 !
NULL
)

665 
pzText
 = 
	`°rchr
(pzText, '\n');

666  
pzText
;

667 
	}
}

677 
	$h™dÀSåu˘uª
(

678 
tO±i⁄s
* 
pO±s
,

679 
tO±Sèã
* 
pOS
,

680 * 
pzText
,

681 
dúe˘i⁄
 )

683 
tO±i⁄LﬂdMode
 
mode
 = 
›ti⁄_lﬂd_mode
;

684 
tO±i⁄VÆue
 
vÆu
;

686 * 
pzName
 = ++
pzText
;

687 * 
pzD©a
;

688 * 
pcNulPoöt
;

690 
	`IS_VALUE_NAME_CHAR
(*
pzText
))ÖzText++;

691 
pcNulPoöt
 = 
pzText
;

692 
vÆu
.
vÆTy≥
 = 
OPARG_TYPE_STRING
;

694 *
pzText
) {

697 
pzText
 = 
	`∑r£Aâribuãs
(
pO±s
,ÖzText, &
mode
, &
vÆu
);

698 i‡(*
pzText
 == '>')

700 i‡(*
pzText
 != '/')

701  
NULL
;

705 i‡(
pzText
[1] != '>')

706  
NULL
;

707 *
pzText
 = 
NUL
;

708 
pzText
 += 2;

709 
	`lﬂdO±i⁄Löe
(
pO±s
, 
pOS
, 
pzName
, 
dúe˘i⁄
, 
mode
);

710  
pzText
;

716 
pzText
 = 
	`°rchr
(pzText, '>');

717 i‡(
pzText
 !
NULL
)

718 
pzText
++;

719  
pzText
;

726 *
pcNulPoöt
 = 
NUL
;

727 
pzD©a
 = ++
pzText
;

733 
z
[64], *
pz
 = z;

734 
size_t
 
Àn
 = 
	`°æí
(
pzName
) + 4;

735 i‡(
Àn
 > (
z
))

736 
pz
 = 
	`AGALOC
(
Àn
, "scanÇame");

738 
	`•rötf
(
pz
, "</%s>", 
pzName
);

739 *
pzText
 = ' ';

740 
pzText
 = 
	`°r°r
’zText, 
pz
);

741 i‡(
pz
 !
z
Ë
	`AGFREE
(pz);

743 i‡(
pzText
 =
NULL
)

744  
pzText
;

746 *
pzText
 = 
NUL
;

748 
pzText
 +
Àn
-1;

755 
	`mem£t
(
pcNulPoöt
, ' ', 
pzD©a
 -ÖcNulPoint);

761 i‡(
vÆu
.
vÆTy≥
 =
OPARG_TYPE_STRING
) {

762 * 
pzSrc
 = 
pzD©a
;

763 * 
pzD°
 = 
pzD©a
;

764 
bf
[4];

765 
bf
[2] = 
NUL
;

768 
ch
 = (()*(
pzSrc
++)) & 0xFF;

769 
ch
) {

770 
NUL
: 
°rög_fixup_d⁄e
;

773 
bf
[0] = *(
pzSrc
++);

774 
bf
[1] = *(
pzSrc
++);

775 i‡((
bf
[0] =
NUL
) || (bf[1] == NUL))

776 
°rög_fixup_d⁄e
;

777 
ch
 = 
	`°πoul
(
bf
, 
NULL
, 16);

781 *(
pzD°
++Ë
ch
;

783 } 
°rög_fixup_d⁄e
:;

784 *
pzD°
 = 
NUL
;

791 
	`lﬂdO±i⁄Löe
(
pO±s
, 
pOS
, 
pzName
, 
dúe˘i⁄
, 
mode
);

793  
pzText
;

794 
	}
}

803 
LOCAL
 

804 
	$öã∫ÆFûeLﬂd
(
tO±i⁄s
* 
pO±s
)

806 
uöt32_t
 
svÊ
;

807 
idx
;

808 
öc
;

809 
zFûeName
[ 
AG_PATH_MAX
+1 ];

811 i‡(
pO±s
->
∑pzHomeLi°
 =
NULL
)

814 
svÊ
 = 
pO±s
->
fO±Së
;

815 
öc
 = 
DIRECTION_PRESET
;

820 
pO±s
->
fO±Së
 &~
OPTPROC_ERRSTOP
;

825 
idx
 = 0; 
pO±s
->
∑pzHomeLi°
[ idx+1 ] !
NULL
; ++idx) ;

834 
°©
 
SètBuf
;

835 
cch_t
* 
pzP©h
;

840 i‡(
idx
 < 0) {

841 
öc
 = 
DIRECTION_PROCESS
;

842 
idx
 = 0;

845 
pzP©h
 = 
pO±s
->
∑pzHomeLi°
[ 
idx
 ];

850 i‡(
pzP©h
 =
NULL
)

853 
idx
 +
öc
;

855 i‡(! 
	`›ti⁄MakeP©h
(
zFûeName
, ()(zFileName),

856 
pzP©h
, 
pO±s
->
pzProgP©h
))

864 i‡(
	`°©
(
zFûeName
, &
SètBuf
) != 0)

867 i‡(
	`S_ISDIR
(
SètBuf
.
°_mode
)) {

868 
size_t
 
Àn
 = 
	`°æí
(
zFûeName
);

869 * 
pz
;

871 i‡(
Àn
 + 1 + 
	`°æí
(
pO±s
->
pzRcName
Ë>(
zFûeName
))

874 
pz
 = 
zFûeName
 + 
Àn
;

875 i‡(
pz
[-1] !
DIRCH
)

876 *(
pz
++Ë
DIRCH
;

877 
	`°r˝y
(
pz
, 
pO±s
->
pzRcName
);

880 
	`fûePª£t
(
pO±s
, 
zFûeName
, 
öc
);

887 
tO±Desc
 * 
pOD
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
ßve_›ts
+1;

888 i‡(
	`DISABLED_OPT
(
pOD
Ë&& 
	`PRESETTING
(
öc
)) {

889 
idx
 -
öc
;

890 
öc
 = 
DIRECTION_PROCESS
;

895 
pO±s
->
fO±Së
 = 
svÊ
;

896 
	}
}

933 
	$›ti⁄FûeLﬂd
(
tO±i⁄s
* 
pO±s
, c⁄°* 
pzProgøm
)

935 i‡(! 
	`SUCCESSFUL
(
	`vÆid©eO±i⁄sSåu˘
(
pO±s
, 
pzProgøm
)))

938 
pO±s
->
pzProgName
 = 
pzProgøm
;

939 
	`öã∫ÆFûeLﬂd
(
pO±s
);

941 
	}
}

956 
	$›ti⁄LﬂdO±
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pO±Desc
)

958 
°©
 
sb
;

966 i‡–
	`DISABLED_OPT
(
pO±Desc
)

967 || ((
pO±Desc
->
fO±Sèã
 & 
OPTST_RESET
) != 0))

970 i‡(
	`°©
(
pO±Desc
->
›tArg
.
¨gSåög
, &
sb
) != 0) {

971 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) == 0)

974 
	`Ârötf
(
°dîr
, 
zFSEºO±Lﬂd
, 
î∫o
, 
	`°ªº‹
(errno),

975 
pO±Desc
->
›tArg
.
¨gSåög
);

976 
	`exô
(
EX_NOINPUT
);

980 i‡(! 
	`S_ISREG
(
sb
.
°_mode
)) {

981 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) == 0)

984 
	`Ârötf
(
°dîr
, 
zNŸFûe
, 
pO±Desc
->
›tArg
.
¨gSåög
);

985 
	`exô
(
EX_NOINPUT
);

989 
	`fûePª£t
(
pO±s
, 
pO±Desc
->
›tArg
.
¨gSåög
, 
DIRECTION_CALLED
);

990 
	}
}

997 
LOCAL
 *

998 
	$∑r£Aâribuãs
(

999 
tO±i⁄s
* 
pO±s
,

1000 * 
pzText
,

1001 
tO±i⁄LﬂdMode
* 
pMode
,

1002 
tO±i⁄VÆue
* 
pTy≥
 )

1004 
size_t
 
Àn
;

1007 i‡(! 
	`IS_WHITESPACE_CHAR
(*
pzText
))

1008 *
pzText
) {

1009 '/': 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_NONE
;

1010 '>':  
pzText
;

1013 
NUL
:  
NULL
;

1016 
	`IS_WHITESPACE_CHAR
(*++
pzText
)) ;

1017 
Àn
 = 0;

1018 
	`IS_LOWER_CASE_CHAR
(
pzText
[
Àn
]))Üen++;

1020 
	`föd_x©_©åibuã_id
(
pzText
, 
Àn
)) {

1021 
XAT_KWD_TYPE
:

1022 
pzText
 = 
	`∑r£VÆueTy≥
’zText+
Àn
, 
pTy≥
);

1025 
XAT_KWD_WORDS
:

1026 
pzText
 = 
	`∑r£KeyW‹dTy≥
(
pO±s
,ÖzText+
Àn
, 
pTy≥
);

1029 
XAT_KWD_MEMBERS
:

1030 
pzText
 = 
	`∑r£SëMemTy≥
(
pO±s
,ÖzText+
Àn
, 
pTy≥
);

1033 
XAT_KWD_COOKED
:

1034 
pzText
 +
Àn
;

1035 i‡(! 
	`IS_END_XML_TOKEN_CHAR
(*
pzText
))

1036 
övÆid_kwd
;

1038 *
pMode
 = 
OPTION_LOAD_COOKED
;

1041 
XAT_KWD_UNCOOKED
:

1042 
pzText
 +
Àn
;

1043 i‡(! 
	`IS_END_XML_TOKEN_CHAR
(*
pzText
))

1044 
övÆid_kwd
;

1046 *
pMode
 = 
OPTION_LOAD_UNCOOKED
;

1049 
XAT_KWD_KEEP
:

1050 
pzText
 +
Àn
;

1051 i‡(! 
	`IS_END_XML_TOKEN_CHAR
(*
pzText
))

1052 
övÆid_kwd
;

1054 *
pMode
 = 
OPTION_LOAD_KEEP
;

1058 
XAT_KWD_INVALID
:

1059 
övÆid_kwd
:

1060 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_NONE
;

1061  
	`skùUnknown
(
pzText
);

1063 } 
pzText
 !
NULL
);

1065  
pzText
;

1066 
	}
}

1075 
	$∑r£KeyW‹dTy≥
(

1076 
tO±i⁄s
* 
pO±s
,

1077 * 
pzText
,

1078 
tO±i⁄VÆue
* 
pTy≥
 )

1080  
	`skùUnknown
(
pzText
);

1081 
	}
}

1091 
	$∑r£SëMemTy≥
(

1092 
tO±i⁄s
* 
pO±s
,

1093 * 
pzText
,

1094 
tO±i⁄VÆue
* 
pTy≥
 )

1096  
	`skùUnknown
(
pzText
);

1097 
	}
}

1105 
	$∑r£VÆueTy≥
(

1106 * 
pzText
,

1107 
tO±i⁄VÆue
* 
pTy≥
 )

1109 
size_t
 
Àn
 = 0;

1111 i‡(*(
pzText
++) != '=')

1112 
wo›s
;

1114 
	`IS_OPTION_NAME_CHAR
(
pzText
[
Àn
]))Üen++;

1115 
pzText
 +
Àn
;

1117 i‡((
Àn
 =0Ë|| (! 
	`IS_END_XML_TOKEN_CHAR
(*
pzText
))) {

1118 
wo›s
:

1119 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_NONE
;

1120  
	`skùUnknown
(
pzText
);

1123 
	`föd_vÆue_ty≥_id
(
pzText
 - 
Àn
,Üen)) {

1125 
VTP_KWD_INVALID
: 
wo›s
;

1127 
VTP_KWD_STRING
:

1128 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_STRING
;

1131 
VTP_KWD_INTEGER
:

1132 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_NUMERIC
;

1135 
VTP_KWD_BOOL
:

1136 
VTP_KWD_BOOLEAN
:

1137 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_BOOLEAN
;

1140 
VTP_KWD_KEYWORD
:

1141 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_ENUMERATION
;

1144 
VTP_KWD_SET
:

1145 
VTP_KWD_SET_MEMBERSHIP
:

1146 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_MEMBERSHIP
;

1149 
VTP_KWD_NESTED
:

1150 
VTP_KWD_HIERARCHY
:

1151 
pTy≥
->
vÆTy≥
 = 
OPARG_TYPE_HIERARCHY
;

1154  
pzText
;

1155 
	}
}

1163 
	$skùUnknown
(* 
pzText
)

1165 ;; 
pzText
++) {

1166 i‡(
	`IS_END_XML_TOKEN_CHAR
(*
pzText
)) ÖzText;

1167 i‡(*
pzText
 =
NUL
Ë 
NULL
;

1169 
	}
}

1180 
LOCAL
 
tSuc˚ss


1181 
	$vÆid©eO±i⁄sSåu˘
(
tO±i⁄s
* 
pO±s
, c⁄°* 
pzProgøm
)

1183 i‡(
pO±s
 =
NULL
) {

1184 
	`Âuts
(
zAO_Bad
, 
°dîr
);

1185 
	`exô
(
EX_CONFIG
);

1192 i‡–((
pO±s
->
fO±Së
 & 
OPTPROC_TRANSLATE
) != 0)

1193 && (
pO±s
->
pTønsProc
 !
NULL
) ) {

1199 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_NO_XLAT_MASK
Ë=
OPTPROC_NXLAT_OPT
)

1200 
pO±s
->
fO±Së
 |
OPTPROC_NXLAT_OPT_CFG
;

1201 (*
pO±s
->
pTønsProc
)();

1202 
pO±s
->
fO±Së
 &~
OPTPROC_TRANSLATE
;

1210 i‡––
pO±s
->
°ru˘Vîsi⁄
 !
OPTIONS_STRUCT_VERSION
 )

1211 && ( (
pO±s
->
°ru˘Vîsi⁄
 > 
OPTIONS_STRUCT_VERSION
 )

1212 || (
pO±s
->
°ru˘Vîsi⁄
 < 
OPTIONS_MINIMUM_VERSION
 )

1215 
	`Ârötf
(
°dîr
, 
zAO_Eº
, 
pzProgøm
, 
	`NUM_TO_VER
(
pO±s
->
°ru˘Vîsi⁄
));

1216 i‡(
pO±s
->
°ru˘Vîsi⁄
 > 
OPTIONS_STRUCT_VERSION
 )

1217 
	`Âuts
(
zAO_Big
, 
°dîr
);

1219 
	`Âuts
(
zAO_Sml
, 
°dîr
);

1221  
FAILURE
;

1228 i‡(
pO±s
->
pzProgName
 =
NULL
) {

1229 c⁄°* 
pz
 = 
	`°ºchr
(
pzProgøm
, 
DIRCH
);

1231 i‡(
pz
 =
NULL
)

1232 
pO±s
->
pzProgName
 = 
pzProgøm
;

1233 
pO±s
->
pzProgName
 = 
pz
+1;

1235 
pO±s
->
pzProgP©h
 = 
pzProgøm
;

1240 
	`°ªqu©e
(
zSïCh¨s
);

1243  
SUCCESS
;

1244 
	}
}

	@libopts/cook.c

60 
	$ao_°rög_cook_esˇ≥_ch¨
–c⁄°* 
pzIn
, * 
pRes
, 
u_öt
 
∆
 )

62 
ªs
 = 1;

64 *
pRes
 = *
pzIn
++) {

65 
NUL
:

68 i‡(*
pzIn
 != '\n')

70 
ªs
++;

73 *
pRes
 = ()
∆
;

74  
ªs
;

76 'a': *
pRes
 = '\a'; ;

77 'b': *
pRes
 = '\b'; ;

78 'f': *
pRes
 = '\f'; ;

79 'n': *
pRes
 = '\n'; ;

80 'r': *
pRes
 = '\r'; ;

81 't': *
pRes
 = '\t'; ;

82 'v': *
pRes
 = '\v'; ;

86 i‡(
	`IS_HEX_DIGIT_CHAR
(*
pzIn
)) {

87 
z
[4], *
pz
 = z;

89 dÿ*(
pz
++Ë*(
pzIn
++);

90 
	`IS_HEX_DIGIT_CHAR
(*
pzIn
Ë&& (
pz
 < 
z
 + 2));

91 *
pz
 = 
NUL
;

92 *
pRes
 = ()
	`°πoul
(
z
, 
NULL
, 16);

93 
ªs
 +
pz
 - 
z
;

104 
z
[4], *
pz
 = z + 1;

105 
vÆ
;

106 
z
[0] = *
pRes
;

108 
	`IS_OCT_DIGIT_CHAR
(*
pzIn
Ë&& (
pz
 < 
z
 + 3))

109 *(
pz
++Ë*(
pzIn
++);

110 *
pz
 = 
NUL
;

111 
vÆ
 = 
	`°πoul
(
z
, 
NULL
, 8);

112 i‡(
vÆ
 > 0xFF)

113 
vÆ
 = 0xFF;

114 *
pRes
 = ()
vÆ
;

115 
ªs
 = 
pz
 - 
z
;

122  
ªs
;

123 
	}
}

153 
	$ao_°rög_cook
–* 
pzSˇn
, * 
pLöeCt
 )

155 
l
 = 0;

156 
q
 = *
pzSˇn
;

162 * 
pzD
 = 
pzSˇn
++;

163 * 
pzS
 = 
pzSˇn
;

165 i‡(
pLöeCt
 =
NULL
)

166 
pLöeCt
 = &
l
;

176 *
pzS
 =
q
) {

177 *
pzD
 = 
NUL
;

178 
pzS
++;

180 
sˇn_f‹_quŸe
:

181 
	`IS_WHITESPACE_CHAR
(*
pzS
))

182 i‡(*(
pzS
++) == '\n')

183 (*
pLöeCt
)++;

189 *
pzS
) {

198 
pzS
[1]) {

199 :  
NULL
;

204 
pzS
 = 
	`°rchr
(ÖzS, '\n' );

205 i‡(
pzS
 =
NULL
)

206  
NULL
;

207 (*
pLöeCt
)++;

212 * 
p
 = 
	`°r°r
–
pzS
+2, "*/" );

216 i‡(
p
 =
NULL
)

217  
NULL
;

218 
pzS
 < 
p
) {

219 i‡(*(
pzS
++) == '\n')

220 (*
pLöeCt
)++;

223 
pzS
 = 
p
 + 2;

226 
sˇn_f‹_quŸe
;

233  
pzS
;

236 
q
 = *(
pzS
++);

242 *(
pzD
++Ë*(
pzS
++)) {

243 
NUL
:

244  
NULL
;

247 (*
pLöeCt
)++;

256 i‡(*
pzS
 == '\n') {

257 
pzS
++;

258 
pzD
--;

259 (*
pLöeCt
)++;

266 i‡(
q
 != '\'') {

267 
˘
 = 
	`ao_°rög_cook_esˇ≥_ch¨
–
pzS
, 
pzD
-1, (
u_öt
)'\n' );

268 i‡(
˘
 == 0)

269  
NULL
;

271 
pzS
 +
˘
;

278 *
pzS
) {

282 
pzD
[-1] = *
pzS
++;

286 
	}
}

	@libopts/enumeration.c

33 
tSCC
* 
	gpz_íum_îr_fmt
;

37 
íum_îr
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

38 c⁄° * c⁄° * 
∑z_«mes
, 
«me_˘
);

40 
uöçå_t


41 
föd_«me
(c⁄° * 
pzName
, 
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

42 c⁄° * c⁄° * 
∑z_«mes
, 
«me_˘
);

45 
£t_memb_ußge
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

46 
«me_˘
);

49 
£t_memb_shñl
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

50 
«me_˘
);

53 
£t_memb_«mes
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

54 
«me_˘
);

58 
	$íum_îr
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

59 c⁄° * c⁄° * 
∑z_«mes
, 
«me_˘
)

61 
size_t
 
max_Àn
 = 0;

62 
size_t
 
âl_Àn
 = 0;

63 
˘_down
 = 
«me_˘
;

64 
hiddí
 = 0;

69 i‡(
pO±s
 > 
OPTPROC_EMIT_LIMIT
)

70 
	`Ârötf
(
›ti⁄_ußge_Â
, 
pz_íum_îr_fmt
, 
pO±s
->
pzProgName
,

71 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
);

73 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zVÆidKeys
, 
pOD
->
pz_Name
);

80 i‡(**
∑z_«mes
 == 0x7F) {

81 
∑z_«mes
++;

82 
hiddí
 = 1;

83 
˘_down
 = --
«me_˘
;

91 c⁄° * c⁄° * 
∑z
 = 
∑z_«mes
;

94 
size_t
 
Àn
 = 
	`°æí
(*(
∑z
++)) + 1;

95 i‡(
Àn
 > 
max_Àn
)

96 
max_Àn
 = 
Àn
;

97 
âl_Àn
 +
Àn
;

98 } --
˘_down
 > 0);

100 
˘_down
 = 
«me_˘
;

106 i‡(
max_Àn
 > 35) {

108 
	`Ârötf
(
›ti⁄_ußge_Â
, " %s\n", *(
∑z_«mes
++));

109 } --
˘_down
 > 0);

115 i‡(
âl_Àn
 < 76) {

116 
	`Âutc
(' ', 
›ti⁄_ußge_Â
);

118 
	`Âutc
(' ', 
›ti⁄_ußge_Â
);

119 
	`Âuts
(*(
∑z_«mes
++), 
›ti⁄_ußge_Â
);

120 } --
˘_down
 > 0);

121 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

128 
ít_no
 = 0;

129 
zFmt
[16];

131 
	`•rötf
(
zFmt
, "%%-%ds", ()
max_Àn
);

132 
max_Àn
 = 78 / max_len;

133 
	`Âuts
(" ", 
›ti⁄_ußge_Â
);

138 
˘_down
 = 
«me_˘
;

139 --
˘_down
 > 0) {

140 i‡(++
ít_no
 =
max_Àn
) {

144 
	`Ârötf
(
›ti⁄_ußge_Â
, "%s\¿ ", *(
∑z_«mes
++));

145 
ít_no
 = 0;

149 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zFmt
, *(
∑z_«mes
++) );

151 
	`Ârötf
(
›ti⁄_ußge_Â
, "%s\n", *
∑z_«mes
);

154 i‡(
pO±s
 > 
OPTPROC_EMIT_LIMIT
) {

155 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zI¡R™ge
, 
hiddí
, 
«me_˘
 - 1 + hidden);

157 (*(
pO±s
->
pUßgeProc
))’O±s, 
EXIT_FAILURE
);

161 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_MEMBERSHIP
) {

162 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zLowîBôs
, 
«me_˘
);

163 
	`Âuts
(
zSëMembîSëtögs
, 
›ti⁄_ußge_Â
);

165 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zI¡R™ge
, 
hiddí
, 
«me_˘
 - 1 + hidden);

167 
	}
}

170 
uöçå_t


171 
	$föd_«me
(c⁄° * 
pzName
, 
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

172 c⁄° * c⁄° * 
∑z_«mes
, 
«me_˘
)

178 
uöçå_t
 
ªs
 = 
«me_˘
;

179 
size_t
 
Àn
 = 
	`°æí
((*)
pzName
);

180 
uöçå_t
 
idx
;

182 i‡(
	`IS_DEC_DIGIT_CHAR
(*
pzName
)) {

183 * 
pz
 = (*)(*)
pzName
;

184 
vÆ
 = 
	`°πoul
(
pz
, &pz, 0);

185 i‡((*
pz
 =
NUL
Ë&& (
vÆ
 < 
«me_˘
))

186  (
uöçå_t
)
vÆ
;

187 
	`íum_îr
(
pO±s
, 
pOD
, 
∑z_«mes
, ()
«me_˘
);

188  
«me_˘
;

195 
idx
 = 0; idx < 
«me_˘
; idx++) {

196 i‡(
	`°∫cmp
((*)
∑z_«mes
[
idx
], (*)
pzName
, 
Àn
) == 0) {

197 i‡(
∑z_«mes
[
idx
][
Àn
] =
NUL
)

198  
idx
;

200 
ªs
 = (ª†!
«me_˘
Ë? ~0 : 
idx
;

204 i‡(
ªs
 < 
«me_˘
)

205  
ªs
;

207 
pz_íum_îr_fmt
 = (
ªs
 =
«me_˘
Ë? 
zNoKey
 : 
zAmbigKey
;

208 
›ti⁄_ußge_Â
 = 
°dîr
;

209 
	`íum_îr
(
pO±s
, 
pOD
, 
∑z_«mes
, ()
«me_˘
);

210  
«me_˘
;

211 
	}
}

227 
	$›ti⁄Keyw‹dName
(
tO±Desc
 * 
pOD
, 
íum_vÆ
)

229 
tO±Desc
 
od
;

231 
od
.
›tArg
.
¨gEnum
 = 
íum_vÆ
;

232 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
, &
od
 );

233  
od
.
›tArg
.
¨gSåög
;

234 
	}
}

255 
uöçå_t


256 
	$›ti⁄Enumî©i⁄VÆ
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

257 c⁄° * c⁄° * 
∑z_«mes
, 
«me_˘
)

259 
uöçå_t
 
ªs
 = 0UL;

265 (
uöçå_t
)
pO±s
) {

266 (
uöçå_t
)
OPTPROC_EMIT_USAGE
:

270 
	`íum_îr
(
pO±s
, 
pOD
, 
∑z_«mes
, ()
«me_˘
);

273 (
uöçå_t
)
OPTPROC_EMIT_SHELL
:

275 
ix
 = 
pOD
->
›tArg
.
¨gEnum
;

279 i‡(
ix
 >
«me_˘
)

280 
	`¥ötf
("INVALID-%d", 
ix
);

282 
	`Âuts
(
∑z_«mes
[ 
ix
 ], 
°dout
);

287 (
uöçå_t
)
OPTPROC_RETURN_VALNAME
:

289 
tSCC
 
zInvÆ
[] = "*INVALID*";

290 
ix
 = 
pOD
->
›tArg
.
¨gEnum
;

294 i‡(
ix
 >
«me_˘
)

295  (
uöçå_t
)
zInvÆ
;

297 
pOD
->
›tArg
.
¨gSåög
 = 
∑z_«mes
[
ix
];

302 
ªs
 = 
	`föd_«me
(
pOD
->
›tArg
.
¨gSåög
, 
pO±s
,ÖOD, 
∑z_«mes
, 
«me_˘
);

304 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

305 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

306 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

307 
pOD
->
›tArg
.
¨gSåög
 = 
NULL
;

311  
ªs
;

312 
	}
}

315 
	$£t_memb_ußge
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

316 
«me_˘
)

321 
	`íum_îr
(
OPTPROC_EMIT_USAGE
, 
pOD
, 
∑z_«mes
, ()
«me_˘
 );

322 
	}
}

325 
	$£t_memb_shñl
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

326 
«me_˘
)

331 
ix
 = 0;

332 
uöçå_t
 
bôs
 = (uöçå_t)
pOD
->
›tCookõ
;

333 
size_t
 
Àn
 = 0;

335 
bôs
 &((
uöçå_t
)1 << (uöçå_t)
«me_˘
) - (uintptr_t)1;

337 
bôs
 != 0) {

338 i‡(
bôs
 & 1) {

339 i‡(
Àn
++ > 0Ë
	`Âuts
(" | ", 
°dout
);

340 
	`Âuts
(
∑z_«mes
[
ix
], 
°dout
);

342 i‡(++
ix
 >
«me_˘
) ;

343 
bôs
 >>= 1;

345 
	}
}

348 
	$£t_memb_«mes
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
, c⁄° * c⁄° * 
∑z_«mes
,

349 
«me_˘
)

351 * 
pz
;

352 
uöçå_t
 
bôs
 = (uöçå_t)
pOD
->
›tCookõ
;

353 
ix
 = 0;

354 
size_t
 
Àn
 = 5;

356 
bôs
 &((
uöçå_t
)1 << (uöçå_t)
«me_˘
) - (uintptr_t)1;

362 
bôs
 != 0) {

363 i‡(
bôs
 & 1)

364 
Àn
 +
	`°æí
(
∑z_«mes
[
ix
]) + 8;

365 i‡(++
ix
 >
«me_˘
) ;

366 
bôs
 >>= 1;

369 
pOD
->
›tArg
.
¨gSåög
 = 
pz
 = 
	`AGALOC
(
Àn
, "enumÇame");

376 
	`°r˝y
(
pz
, "none");

377 
pz
 += 4;

378 
bôs
 = (
uöçå_t
)
pOD
->
›tCookõ
;

379 
bôs
 &((
uöçå_t
)1 << (uöçå_t)
«me_˘
) - (uintptr_t)1;

380 
ix
 = 0;

382 
bôs
 != 0) {

383 i‡(
bôs
 & 1) {

384 
	`°r˝y
(
pz
, " + ");

385 
	`°r˝y
(
pz
+3, 
∑z_«mes
[
ix
]);

386 
pz
 +
	`°æí
(
∑z_«mes
[
ix
]) + 3;

388 i‡(++
ix
 >
«me_˘
) ;

389 
bôs
 >>= 1;

391 
	}
}

410 
	$›ti⁄SëMembîs
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
,

411 c⁄°* c⁄° * 
∑z_«mes
, 
«me_˘
)

417 (
uöçå_t
)
pO±s
) {

418 (
uöçå_t
)
OPTPROC_EMIT_USAGE
:

419 
	`£t_memb_ußge
(
pO±s
, 
pOD
, 
∑z_«mes
, 
«me_˘
);

422 (
uöçå_t
)
OPTPROC_EMIT_SHELL
:

423 
	`£t_memb_shñl
(
pO±s
, 
pOD
, 
∑z_«mes
, 
«me_˘
);

426 (
uöçå_t
)
OPTPROC_RETURN_VALNAME
:

427 
	`£t_memb_«mes
(
pO±s
, 
pOD
, 
∑z_«mes
, 
«me_˘
);

434 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

438 c⁄°* 
pzArg
 = 
pOD
->
›tArg
.
¨gSåög
;

439 
uöçå_t
 
ªs
;

440 i‡((
pzArg
 =
NULL
Ë|| (*pzArg =
NUL
)) {

441 
pOD
->
›tCookõ
 = (*)0;

445 
ªs
 = (
uöçå_t
)
pOD
->
›tCookõ
;

447 
tSCC
 
zS≤
[] = " ,|+\t\r\f\n";

448 
iv
, 
Àn
;

450 
pzArg
 +
	`°r•n
’zArg, 
zS≤
);

451 
iv
 = (*
pzArg
 == '!');

452 i‡(
iv
)

453 
pzArg
 +
	`°r•n
’zArg+1, 
zS≤
) + 1;

455 
Àn
 = 
	`°rc•n
(
pzArg
, 
zS≤
);

456 i‡(
Àn
 == 0)

459 i‡((
Àn
 =3Ë&& (
	`°∫cmp
(
pzArg
, 
zAŒ
, 3) == 0)) {

460 i‡(
iv
)

461 
ªs
 = 0;

462 
ªs
 = ~0UL;

464 i‡((
Àn
 =4Ë&& (
	`°∫cmp
(
pzArg
, 
zN⁄e
, 4) == 0)) {

465 i‡(! 
iv
)

466 
ªs
 = 0;

469 * 
pz
;

470 
uöçå_t
 
bô
 = 
	`°πoul
(
pzArg
, &
pz
, 0);

472 i‡(
pz
 !
pzArg
 + 
Àn
) {

473 
z
[ 
AO_NAME_SIZE
 ];

474 c⁄°* 
p
;

475 
shi·_˘
;

477 i‡(*
pz
 !
NUL
) {

478 i‡(
Àn
 >
AO_NAME_LIMIT
)

480 
	`°∫˝y
(
z
, 
pzArg
, (
size_t
)
Àn
);

481 
z
[
Àn
] = 
NUL
;

482 
p
 = 
z
;

484 
p
 = 
pzArg
;

487 
shi·_˘
 = 
	`föd_«me
(
p
, 
pO±s
, 
pOD
, 
∑z_«mes
, 
«me_˘
);

488 i‡(
shi·_˘
 >
«me_˘
) {

489 
pOD
->
›tCookõ
 = (*)0;

492 
bô
 = 1UL << 
shi·_˘
;

494 i‡(
iv
)

495 
ªs
 &~
bô
;

496 
ªs
 |
bô
;

499 i‡(
pzArg
[
Àn
] =
NUL
)

501 
pzArg
 +
Àn
 + 1;

503 i‡(
«me_˘
 < (8 * (
uöçå_t
))) {

504 
ªs
 &(1UL << 
«me_˘
) - 1UL;

507 
pOD
->
›tCookõ
 = (*)
ªs
;

509 
	}
}

	@libopts/environment.c

35 
checkEnvO±
(
tO±Sèã
 * 
os
, * 
ív_«me
,

36 
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
);

45 
LOCAL
 

46 
	$doProg«meEnv
(
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
)

48 c⁄°* 
pczO±Så
 = 
	`gëív
(
pO±s
->
pzPROGNAME
);

49 
tokí_li°_t
* 
pTL
;

50 
sv_¨gc
;

51 
tAoUI
 
sv_Êag
;

52 ** 
sv_¨gv
;

57 i‡(
pczO±Så
 =
NULL
)

64 
pTL
 = 
	`ao_°rög_tokíize
(
pczO±Så
);

65 i‡(
pTL
 =
NULL
)

71 
sv_¨gc
 = 
pO±s
->
‹igArgCt
;

72 
sv_¨gv
 = 
pO±s
->
‹igArgVe˘
;

73 
sv_Êag
 = 
pO±s
->
fO±Së
;

81 
pO±s
->
‹igArgVe˘
 = (**)(
pTL
->
tkn_li°
 - 1);

82 
pO±s
->
‹igArgCt
 = 
pTL
->
tkn_˘
 + 1;

83 
pO±s
->
fO±Së
 &~
OPTPROC_ERRSTOP
;

85 
pO±s
->
curO±Idx
 = 1;

86 
pO±s
->
pzCurO±
 = 
NULL
;

88 
ty≥
) {

89 
ENV_IMM
:

90 ()
	`doImmedüãO±s
(
pO±s
);

93 
ENV_ALL
:

94 ()
	`doImmedüãO±s
(
pO±s
);

95 
pO±s
->
curO±Idx
 = 1;

96 
pO±s
->
pzCurO±
 = 
NULL
;

99 
ENV_NON_IMM
:

100 ()
	`doReguœrO±s
(
pO±s
);

106 
	`‰ì
(
pTL
);

107 
pO±s
->
‹igArgVe˘
 = 
sv_¨gv
;

108 
pO±s
->
‹igArgCt
 = 
sv_¨gc
;

109 
pO±s
->
fO±Së
 = 
sv_Êag
;

110 
	}
}

113 
	$checkEnvO±
(
tO±Sèã
 * 
os
, * 
ív_«me
,

114 
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
)

116 
os
->
pzO±Arg
 = 
	`gëív
(
ív_«me
);

117 i‡(
os
->
pzO±Arg
 =
NULL
)

120 
os
->
Êags
 = 
OPTST_PRESET
 | 
OPTST_ALLOC_ARG
 | os->
pOD
->
fO±Sèã
;

121 
os
->
›tTy≥
 = 
TOPT_UNDEFINED
;

123 i‡–(
os
->
pOD
->
pz_DißbÀPfx
 !
NULL
)

124 && (
	`°ªqvcmp
(
os
->
pzO±Arg
, os->
pOD
->
pz_DißbÀPfx
) == 0)) {

125 
os
->
Êags
 |
OPTST_DISABLED
;

126 
os
->
pzO±Arg
 = 
NULL
;

129 
ty≥
) {

130 
ENV_IMM
:

134 i‡(
	`DO_IMMEDIATELY
(
os
->
Êags
))

138 
ENV_NON_IMM
:

142 i‡(
	`DO_NORMALLY
(
os
->
Êags
Ë|| 
	`DO_SECOND_TIME
(os->flags))

156 i‡(
os
->
pzO±Arg
 !
NULL
) {

157 i‡(
	`OPTST_GET_ARGTYPE
(
os
->
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_NONE
) {

158 
os
->
pzO±Arg
 = 
NULL
;

159 } i‡–(
os
->
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
)

160 && (*
os
->
pzO±Arg
 =
NUL
)) {

161 
os
->
pzO±Arg
 = 
NULL
;

162 } i‡(*
os
->
pzO±Arg
 =
NUL
) {

163 
os
->
pzO±Arg
 = 
zNû
;

165 
	`AGDUPSTR
(
os
->
pzO±Arg
, os->pzOptArg, "optionárgument");

166 
os
->
Êags
 |
OPTST_ALLOC_ARG
;

170 
	`h™dÀO±i⁄
(
pO±s
, 
os
);

171 
	}
}

177 
LOCAL
 

178 
	$doEnvPª£ts
(
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
)

180 
˘
;

181 
tO±Sèã
 
°
;

182 * 
pzFœgName
;

183 
size_t
 
•a˚Le·
;

184 
zEnvName
[ 
AO_NAME_SIZE
 ];

190 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ENVIRON
) == 0)

193 
	`doProg«meEnv
(
pO±s
, 
ty≥
);

195 
˘
 = 
pO±s
->
¥e£tO±Ct
;

196 
°
.
pOD
 = 
pO±s
->
pO±Desc
;

198 
pzFœgName
 = 
zEnvName


199 + 
	`¢¥ötf
(
zEnvName
, (zEnvName), "%s_", 
pO±s
->
pzPROGNAME
);

200 
•a˚Le·
 = 
AO_NAME_SIZE
 - (
pzFœgName
 - 
zEnvName
) - 1;

202 ;
˘
-- > 0; 
°
.
pOD
++) {

206 i‡–((
°
.
pOD
->
fO±Sèã
 & 
OPTST_NO_INIT
) != 0)

207 || (
°
.
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
) )

214 i‡(
	`°æí
(
°
.
pOD
->
pz_NAME
Ë>
•a˚Le·
)

220 
	`°r˝y
(
pzFœgName
, 
°
.
pOD
->
pz_NAME
);

221 
	`checkEnvO±
(&
°
, 
zEnvName
, 
pO±s
, 
ty≥
);

227 i‡–(
pO±s
->
•ecO±Idx
.
ßve_›ts
 !
NO_EQUIVALENT
)

228 && (
pO±s
->
•ecO±Idx
.
ßve_›ts
 != 0)) {

229 
°
.
pOD
 = 
pO±s
->
pO±Desc
 +ÖO±s->
•ecO±Idx
.
ßve_›ts
 + 1;

231 i‡(
°
.
pOD
->
pz_NAME
 !
NULL
) {

232 
	`°r˝y
(
pzFœgName
, 
°
.
pOD
->
pz_NAME
);

233 
	`checkEnvO±
(&
°
, 
zEnvName
, 
pO±s
, 
ty≥
);

236 
	}
}

	@libopts/file.c

45 
	$›ti⁄FûeCheck
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
,

46 
ãO±FûeTy≥
 
·y≥
, 
tuFûeMode
 
mode
)

48 i‡(
pO±s
 <
OPTPROC_EMIT_LIMIT
) {

49 i‡(
pO±s
 !
OPTPROC_EMIT_USAGE
)

52 
·y≥
 & 
FTYPE_MODE_EXIST_MASK
) {

53 
FTYPE_MODE_MUST_NOT_EXIST
:

54 
	`Âuts
(
zFûeC™nŸExi°
, 
›ti⁄_ußge_Â
);

57 
FTYPE_MODE_MUST_EXIST
:

58 
	`Âuts
(
zFûeMu°Exi°
, 
›ti⁄_ußge_Â
);

64 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0) {

65 i‡(
pOD
->
›tCookõ
 !
NULL
)

66 
	`AGFREE
(
pOD
->
›tCookõ
);

71 
°©
 
sb
;

73 
î∫o
 = 0;

75 
·y≥
 & 
FTYPE_MODE_EXIST_MASK
) {

76 
FTYPE_MODE_MUST_NOT_EXIST
:

77 i‡–(
	`°©
(
pOD
->
›tArg
.
¨gSåög
, &
sb
) == 0)

78 || (
î∫o
 !
ENOENT
) ){

79 i‡(
î∫o
 == 0)

80 
î∫o
 = 
EINVAL
;

81 
	`Ârötf
(
°dîr
, 
zFSO±Eº‹
, 
î∫o
, 
	`°ªº‹
(errno),

82 
zFSO±EºNoExi°
, 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
);

83 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

89 
FTYPE_MODE_MAY_EXIST
:

91 * 
p
 = 
	`°ºchr
(
pOD
->
›tArg
.
¨gSåög
, 
DIRCH
);

92 i‡(
p
 !
NULL
)

93 *
p
 = 
NUL
;

94 i‡–(
	`°©
(
pOD
->
›tArg
.
¨gSåög
, &
sb
) != 0)

95 || (
î∫o
 = 
EINVAL
, ! 
	`S_ISDIR
(
sb
.
°_mode
)) ){

96 
	`Ârötf
(
°dîr
, 
zFSO±Eº‹
, 
î∫o
, 
	`°ªº‹
(errno),

97 
zFSO±EºMayExi°
, 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
);

98 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

101 i‡(
p
 !
NULL
)

102 *
p
 = 
DIRCH
;

106 
FTYPE_MODE_MUST_EXIST
:

107 i‡–(
	`°©
(
pOD
->
›tArg
.
¨gSåög
, &
sb
) != 0)

108 || (
î∫o
 = 
EINVAL
, ! 
	`S_ISREG
(
sb
.
°_mode
)) ){

109 
	`Ârötf
(
°dîr
, 
zFSO±Eº‹
, 
î∫o
, 
	`°ªº‹
(errno),

110 
zFSO±EºMu°Exi°
, 
pOD
->
›tArg
.
¨gSåög
,

111 
pOD
->
pz_Name
);

112 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

119 
·y≥
 & 
FTYPE_MODE_OPEN_MASK
) {

121 
FTYPE_MODE_NO_OPEN
:

124 
FTYPE_MODE_OPEN_FD
:

126 
fd
 = 
	`›í
(
pOD
->
›tArg
.
¨gSåög
, 
mode
.
fûe_Êags
);

127 i‡(
fd
 < 0) {

128 
	`Ârötf
(
°dîr
, 
zFSO±Eº‹
, 
î∫o
, 
	`°ªº‹
(errno),

129 
zFSO±EºO≥n
, 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
);

130 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

134 i‡((
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) != 0)

135 
pOD
->
›tCookõ
 = (*ÌOD->
›tArg
.
¨gSåög
;

137 
	`AGDUPSTR
(
pOD
->
›tCookõ
,ÖOD->
›tArg
.
¨gSåög
, "fileÇame");

139 
pOD
->
›tArg
.
¨gFd
 = 
fd
;

140 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

144 
FTYPE_MODE_FOPEN_FP
:

146 
FILE
* 
Â
 = 
	`f›í
(
pOD
->
›tArg
.
¨gSåög
, 
mode
.
fûe_mode
);

147 i‡(
Â
 =
NULL
) {

148 
	`Ârötf
(
°dîr
, 
zFSO±Eº‹
, 
î∫o
, 
	`°ªº‹
(errno),

149 
zFSO±EºF›í
, 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
);

150 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

154 i‡((
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) != 0)

155 
pOD
->
›tCookõ
 = (*ÌOD->
›tArg
.
¨gSåög
;

157 
	`AGDUPSTR
(
pOD
->
›tCookõ
,ÖOD->
›tArg
.
¨gSåög
, "fileÇame");

159 
pOD
->
›tArg
.
¨gFp
 = 
Â
;

160 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

164 
	}
}

	@libopts/genshell.c

37 
	~<sys/ty≥s.h
>

38 
	~<limôs.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

42 
	#OPTION_CODE_COMPILE
 1

	)

43 
	~"gíshñl.h
"

45 #ifde‡ 
__˝lu•lus


51 
tSCC
 
zC›yright
[] =

53 
tSCC
 
zC›yrightNŸi˚
[610] =

64 
tUßgeProc
 
gíshñl›tUßge
;

66 #i‚de‡
NULL


67 
	#NULL
 0

	)

69 #i‚de‡
EXIT_SUCCESS


70 
	#EXIT_SUCCESS
 0

	)

72 #i‚de‡
EXIT_FAILURE


73 
	#EXIT_FAILURE
 1

	)

79 c⁄° 
	gzS¸ùtText
[] =

81 c⁄° 
	gzS¸ùt_NAME
[] = "SCRIPT";

82 c⁄° 
	gzS¸ùt_Name
[] = "script";

83 
	#SCRIPT_FLAGS
 (
OPTST_DISABLED
 \

84 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
))

	)

89 c⁄° 
	gzShñlText
[] =

91 c⁄° 
	gzShñl_NAME
[] = "SHELL";

92 c⁄° 
	gzNŸShñl_Name
[] = "no-shell";

93 c⁄° 
	gzNŸShñl_Pfx
[] = "no";

94 
	#zShñl_Name
 (
zNŸShñl_Name
 + 3)

	)

95 
	#SHELL_FLAGS
 (
OPTST_INITENABLED
 \

96 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
))

	)

101 c⁄° 
	gzHñpText
[] = "DisplayÉxtended usage informationándÉxit";

102 c⁄° 
	gzHñp_Name
[] = "help";

103 #ifde‡
HAVE_WORKING_FORK


104 
	#OPTST_MORE_HELP_FLAGS
 (
OPTST_IMM
 | 
OPTST_NO_INIT
)

	)

105 c⁄° 
	gzM‹e_Hñp_Name
[] = "more-help";

106 c⁄° 
	gzM‹e_HñpText
[] = "Extended usage informationÖassedÅhruÖager";

108 
	#OPTST_MORE_HELP_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

109 
	#zM‹e_Hñp_Name
 
NULL


	)

110 
	#zM‹e_HñpText
 
NULL


	)

112 #ifde‡
NO_OPTIONAL_OPT_ARGS


113 
	#OPTST_VERSION_FLAGS
 
OPTST_IMM
 | 
OPTST_NO_INIT


	)

115 
	#OPTST_VERSION_FLAGS
 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
) | \

116 
OPTST_ARG_OPTIONAL
 | 
OPTST_IMM
 | 
OPTST_NO_INIT


	)

119 c⁄° 
	gzVîsi⁄Text
[] = "Output version informationándÉxit";

120 c⁄° 
	gzVîsi⁄_Name
[] = "version";

124 
tO±Proc


125 
›ti⁄BoﬁónVÆ
, 
›ti⁄Ne°edVÆ
, 
›ti⁄NumîicVÆ
,

126 
›ti⁄PagedUßge
, 
›ti⁄PrötVîsi⁄
, 
›ti⁄Re£tO±
,

127 
›ti⁄SèckArg
, 
›ti⁄TimeVÆ
, 
›ti⁄Un°ackArg
,

128 
›ti⁄Vîsi⁄Stdîr
;

129 
tO±Proc


130 
	gdoUßgeO±
;

136 
tO±Desc
 
	g›tDesc
[ 
OPTION_CT
 ] = {

137 { 0, 
VALUE_OPT_SCRIPT
,

138  0, 
VALUE_OPT_SCRIPT
,

139  
NO_EQUIVALENT
,

141  
SCRIPT_FLAGS
, 0,

142  { 
NULL
 },

143  
NULL
,

144  
NULL
, NULL,

145  
NULL
,

146  
zS¸ùtText
, 
zS¸ùt_NAME
, 
zS¸ùt_Name
,

147  
NULL
, NULL },

149 { 1, 
VALUE_OPT_SHELL
,

150  1, 
VALUE_OPT_SHELL
,

151  
NO_EQUIVALENT
,

153  
SHELL_FLAGS
, 0,

154  { 
NULL
 },

155  
NULL
,

156  
NULL
, NULL,

157  
NULL
,

158  
zShñlText
, 
zShñl_NAME
, 
zShñl_Name
,

159  
zNŸShñl_Name
, 
zNŸShñl_Pfx
 },

161 { 
INDEX_OPT_VERSION
, 
VALUE_OPT_VERSION
,

162  
NO_EQUIVALENT
, 0,

163  
NO_EQUIVALENT
,

165  
OPTST_VERSION_FLAGS
, 0,

166  { 
NULL
 },

167  
NULL
,

168  
NULL
, NULL,

169  
›ti⁄PrötVîsi⁄
,

170  
zVîsi⁄Text
, 
NULL
, 
zVîsi⁄_Name
,

171  
NULL
, NULL },

175 { 
INDEX_OPT_HELP
, 
VALUE_OPT_HELP
,

176  
NO_EQUIVALENT
, 0,

177  
NO_EQUIVALENT
,

179  
OPTST_IMM
 | 
OPTST_NO_INIT
, 0,

180  { 
NULL
 },

181  
NULL
,

182  
NULL
, NULL,

183  
doUßgeO±
,

184  
zHñpText
, 
NULL
, 
zHñp_Name
,

185  
NULL
, NULL },

187 { 
INDEX_OPT_MORE_HELP
, 
VALUE_OPT_MORE_HELP
,

188  
NO_EQUIVALENT
, 0,

189  
NO_EQUIVALENT
,

191  
OPTST_MORE_HELP_FLAGS
, 0,

192  { 
NULL
 },

193  
NULL
,

194  
NULL
, NULL,

195  
›ti⁄PagedUßge
,

196  
zM‹e_HñpText
, 
NULL
, 
zM‹e_Hñp_Name
,

197  
NULL
, NULL }

204 
tSCC
 
	gzPROGNAME
[] = "GENSHELLOPT";

205 
tSCC
 
	gzUßgeTôÀ
[] =

208 
	#zRcName
 
NULL


	)

209 
	#≠zHomeLi°
 
NULL


	)

211 
tSCC
 
	gzBugsAddr
[] = "autogen-users@lists.sourceforge.net";

212 
tSCC
 
	gzEx∂aö
[] = "\n\
Åhat `shell' is only useful ifÅhe output file doesÇotálready\n\
. If it does,ÅhenÅhe shellÇameánd optional firstárgument\n\
 beÉxtracted fromÅhe script file.\n";

216 
tSCC
 
	gzDëaû
[] = "\n\
Åhe script fileálreadyÉxistsánd contains Automated Option Processing\n\
,Åhe secondÜine ofÅhe fileÅhroughÅheÉndingÅag will beÑeplaced\n\
ÅheÇewly generatedÅext. The first `#!'Üine will beÑegenerated.\n";

220 
tSCC
 
	gzFuŒVîsi⁄
[] = 
GENSHELLOPT_FULL_VERSION
;

223 #i‡
deföed
(
ENABLE_NLS
)

224 
	#OPTPROC_BASE
 
OPTPROC_TRANSLATE


	)

225 
tO±i⁄XœãProc
 
	gå™¶©e_›ti⁄_°rögs
;

227 
	#OPTPROC_BASE
 
OPTPROC_NONE


	)

228 
	#å™¶©e_›ti⁄_°rögs
 
NULL


	)

232 
	#gíshñl›t_fuŒ_ußge
 
NULL


	)

233 
	#gíshñl›t_sh‹t_ußge
 
NULL


	)

234 
tO±i⁄s
 
	ggíshñl›tO±i⁄s
 = {

235 
OPTIONS_STRUCT_VERSION
,

236 0, 
NULL
,

237 –
OPTPROC_BASE


238 + 
OPTPROC_ERRSTOP


239 + 
OPTPROC_SHORTOPT


240 + 
OPTPROC_LONGOPT


241 + 
OPTPROC_NO_REQ_OPT


242 + 
OPTPROC_NEGATIONS


243 + 
OPTPROC_NO_ARGS
 ),

244 0, 
NULL
,

245 
NULL
, NULL, 
zPROGNAME
,

246 
zRcName
, 
zC›yright
, 
zC›yrightNŸi˚
,

247 
zFuŒVîsi⁄
, 
≠zHomeLi°
, 
zUßgeTôÀ
,

248 
zEx∂aö
, 
zDëaû
, 
›tDesc
,

249 
zBugsAddr
,

250 
NULL
, NULL,

251 
gíshñl›tUßge
,

252 
å™¶©e_›ti⁄_°rögs
,

256 { 
INDEX_OPT_MORE_HELP
,

257 
NO_EQUIVALENT
,

258 
NO_EQUIVALENT
,

259 
NO_EQUIVALENT


262 
gíshñl›t_fuŒ_ußge
, 
gíshñl›t_sh‹t_ußge
,

263 
NULL
, NULL

270 
doUßgeO±
(

271 
tO±i⁄s
* 
pO±i⁄s
,

272 
tO±Desc
* 
pO±Desc
 )

274 ()
	gpO±i⁄s
;

275 
USAGE
(
EXIT_SUCCESS
);

279 #i‡
ENABLE_NLS


280 
	~<°dio.h
>

281 
	~<°dlib.h
>

282 
	~<°rög.h
>

283 
	~<uni°d.h
>

284 
	~<auto›ts/ußge-txt.h
>

286 * 
AO_gëãxt
(c⁄°* 
pz
);

287 
c€r˚_ô
(** 
s
);

290 
AO_gëãxt
(c⁄°* 
pz
)

292 * 
	gpzRes
;

293 i‡(
	gpz
 =
NULL
)

294  
NULL
;

295 
	gpzRes
 = 
_
(
pz
);

296 i‡(
	gpzRes
 =
pz
)

297  
pzRes
;

298 
	gpzRes
 = 
°rdup
(
pzRes
);

299 i‡(
	gpzRes
 =
NULL
) {

300 
Âuts
(
_
("Nÿmem‹y f‹ dupögÅøn¶©ed såögs\n"), 
°dîr
);

301 
exô
(
EXIT_FAILURE
);

303  
	gpzRes
;

306 
c€r˚_ô
(** 
s
Ë{ *
	gs
 = 
AO_gëãxt
(*s); }

307 
	#COERSION
(
_f
) \

308 
	`c€r˚_ô
((*)&(
gíshñl›tO±i⁄s
.
_f
))

	)

314 
å™¶©e_›ti⁄_°rögs
()

320 i‡(
	g›ti⁄_ußge_ãxt
.
	gfõld_˘
 != 0) {

326 
tO±Desc
* 
pOD
 = 
gíshñl›tO±i⁄s
.
pO±Desc
;

327 ** 
	gµz
 = (**)(*)&(
›ti⁄_ußge_ãxt
);

328 
	gix
 = 
›ti⁄_ußge_ãxt
.
fõld_˘
;

331 
	gµz
++;

332 *
	gµz
 = 
AO_gëãxt
(*
µz
);

333 } --
	gix
 > 0);

335 
COERSION
(
pzC›yright
);

336 
COERSION
(
pzC›yNŸi˚
);

337 
COERSION
(
pzFuŒVîsi⁄
);

338 
COERSION
(
pzUßgeTôÀ
);

339 
COERSION
(
pzEx∂aö
);

340 
COERSION
(
pzDëaû
);

341 
	g›ti⁄_ußge_ãxt
.
	gfõld_˘
 = 0;

343 
	gix
 = 
gíshñl›tO±i⁄s
.
›tCt
; ix > 0; ix--, 
	gpOD
++)

344 
c€r˚_ô
((*)&(
pOD
->
pzText
));

347 i‡((
	ggíshñl›tO±i⁄s
.
	gfO±Së
 & 
	gOPTPROC_NXLAT_OPT_CFG
) == 0) {

348 
tO±Desc
* 
pOD
 = 
gíshñl›tO±i⁄s
.
pO±Desc
;

349 
	gix
;

351 
	gix
 = 
gíshñl›tO±i⁄s
.
›tCt
; ix > 0; ix--, 
	gpOD
++) {

352 
c€r˚_ô
((*)&(
pOD
->
pz_Name
));

353 
c€r˚_ô
((*)&(
pOD
->
pz_DißbÀName
));

354 
c€r˚_ô
((*)&(
pOD
->
pz_DißbÀPfx
));

357 
	ggíshñl›tO±i⁄s
.
	gfO±Së
 |
OPTPROC_NXLAT_OPT_CFG
 | 
OPTPROC_NXLAT_OPT
;

363 #ifde‡ 
__˝lu•lus


	@libopts/genshell.h

42 #i‚de‡
AUTOOPTS_GENSHELL_H_GUARD


43 
	#AUTOOPTS_GENSHELL_H_GUARD
 1

	)

44 
	~<auto›ts/›ti⁄s.h
>

53 
	#AO_TEMPLATE_VERSION
 135170

	)

54 #i‡(
AO_TEMPLATE_VERSION
 < 
OPTIONS_MINIMUM_VERSION
) \

55 || (
	gAO_TEMPLATE_VERSION
 > 
	gOPTIONS_STRUCT_VERSION
)

56 #îr‹ 
›ti⁄
 
ãm∂©e
 
vîsi⁄
 
mism©ches
 
auto›ts
/
›ti⁄s
.
h
 
hódî


57 
Choke
 
	gMe
.

64 
	mINDEX_OPT_SCRIPT
 = 0,

65 
	mINDEX_OPT_SHELL
 = 1,

66 
	mINDEX_OPT_VERSION
 = 2,

67 
	mINDEX_OPT_HELP
 = 3,

68 
	mINDEX_OPT_MORE_HELP
 = 4

69 } 
	tãO±Index
;

71 
	#OPTION_CT
 5

	)

72 
	#GENSHELLOPT_VERSION
 "1"

	)

73 
	#GENSHELLOPT_FULL_VERSION
 "gíshñl›à- Gíî©êShñ»O±i⁄ Pro˚ssög S¸ùà- Vî. 1"

	)

80 
	#DESC
(
n
Ë(
gíshñl›tO±i⁄s
.
pO±Desc
[
INDEX_OPT_
##Ç])

	)

81 
	#HAVE_OPT
(
n
Ë(! 
	`UNUSED_OPT
(& 
	`DESC
“)))

	)

82 
	#OPT_ARG
(
n
Ë(
	`DESC
“).
›tArg
.
¨gSåög
)

	)

83 
	#STATE_OPT
(
n
Ë(
	`DESC
“).
fO±Sèã
 & 
OPTST_SET_MASK
)

	)

84 
	#COUNT_OPT
(
n
Ë(
	`DESC
“).
›tOccCt
)

	)

85 
	#ISSEL_OPT
(
n
Ë(
	`SELECTED_OPT
(&
	`DESC
“)))

	)

86 
	#ISUNUSED_OPT
(
n
Ë(
	`UNUSED_OPT
(& 
	`DESC
“)))

	)

87 
	#ENABLED_OPT
(
n
Ë(! 
	`DISABLED_OPT
(& 
	`DESC
“)))

	)

88 
	#STACKCT_OPT
(
n
Ë(((
tArgLi°
*)(
	`DESC
“).
›tCookõ
))->
u£Ct
)

	)

89 
	#STACKLST_OPT
(
n
Ë(((
tArgLi°
*)(
	`DESC
“).
›tCookõ
))->
≠zArgs
)

	)

90 
	#CLEAR_OPT
(
n
Ë
	`STMTS
( \

91 
	`DESC
(
n
).
fO±Sèã
 &
OPTST_PERSISTENT_MASK
; \

92 i‡((
	`DESC
(
n
).
fO±Sèã
 & 
OPTST_INITENABLED
) == 0) \

93 
	`DESC
(
n
).
fO±Sèã
 |
OPTST_DISABLED
; \

94 
	`DESC
(
n
).
›tCookõ
 = 
NULL
 )

	)

100 
	#VALUE_OPT_SCRIPT
 'o'

	)

101 
	#VALUE_OPT_SHELL
 's'

	)

102 
	#VALUE_OPT_HELP
 '?'

	)

103 
	#VALUE_OPT_MORE_HELP
 '!'

	)

104 
	#VALUE_OPT_VERSION
 'v'

	)

108 
	#ERRSKIP_OPTERR
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 &~
OPTPROC_ERRSTOP
)

	)

109 
	#ERRSTOP_OPTERR
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 |
OPTPROC_ERRSTOP
)

	)

110 
	#RESTART_OPT
(
n
Ë
	`STMTS
( \

111 
gíshñl›tO±i⁄s
.
curO±Idx
 = (
n
); \

112 
gíshñl›tO±i⁄s
.
pzCurO±
 = 
NULL
)

	)

113 
	#START_OPT
 
	`RESTART_OPT
(1)

	)

114 
	#USAGE
(
c
Ë(*
gíshñl›tO±i⁄s
.
pUßgeProc
)(&gíshñl›tO±i⁄s, c)

	)

121 #ifde‡ 
__˝lu•lus


125 
tO±i⁄s
 
gíshñl›tO±i⁄s
;

127 #i‡
deföed
(
ENABLE_NLS
)

128 #i‚de‡
_


129 
	~<°dio.h
>

130 
ölöe
 * 
aoGësText
(c⁄°* 
pz
) {

131 i‡(
	gpz
 =
NULL
)  NULL;

132  (*)
gëãxt
(
pz
);

134 
	#_
(
s
Ë
	`aoGësText
(s)

	)

137 
	#OPT_NO_XLAT_CFG_NAMES
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 |= \

138 
OPTPROC_NXLAT_OPT_CFG
;)

	)

139 
	#OPT_NO_XLAT_OPT_NAMES
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 |= \

140 
OPTPROC_NXLAT_OPT
|
OPTPROC_NXLAT_OPT_CFG
;)

	)

142 
	#OPT_XLAT_CFG_NAMES
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 &= \

143 ~(
OPTPROC_NXLAT_OPT
|
OPTPROC_NXLAT_OPT_CFG
);)

	)

144 
	#OPT_XLAT_OPT_NAMES
 
	`STMTS
(
gíshñl›tO±i⁄s
.
fO±Së
 &= \

145 ~
OPTPROC_NXLAT_OPT
;)

	)

148 
	#OPT_NO_XLAT_CFG_NAMES


	)

149 
	#OPT_NO_XLAT_OPT_NAMES


	)

151 
	#OPT_XLAT_CFG_NAMES


	)

152 
	#OPT_XLAT_OPT_NAMES


	)

154 #i‚de‡
_


155 
	#_
(
_s
Ë
	)
_s

159 #ifde‡ 
__˝lu•lus


	@libopts/libopts.c

1 #ifde‡
_WIN32


2 
	~"wö.h
"

4 
	#AUTOOPTS_INTERNAL


	)

5 
	~"com∑t/com∑t.h
"

6 
	#LOCAL
 

	)

7 
	~"auto›ts/›ti⁄s.h
"

8 
	~"auto›ts/ußge-txt.h
"

9 
	~"gíshñl.h
"

10 
	~"x©-©åibuã.h
"

11 
	~"vÆue-ty≥.h
"

12 
	~"ag-ch¨-m≠.h
"

13 
	~"auto›ts.h
"

14 
	~"¥Ÿo.h
"

15 
	~"vÆue-ty≥.c
"

16 
	~"x©-©åibuã.c
"

17 
	~"auto›ts.c
"

18 
	~"boﬁón.c
"

19 
	~"c⁄figfûe.c
"

20 
	~"cook.c
"

21 
	~"íumî©i⁄.c
"

22 
	~"ívú⁄mít.c
"

23 
	~"fûe.c
"

24 
	~"gíshñl.c
"

25 
	~"lﬂd.c
"

26 
	~"makeshñl.c
"

27 
	~"√°ed.c
"

28 
	~"numîic.c
"

29 
	~"pgußge.c
"

30 
	~"putshñl.c
"

31 
	~"ª£t.c
"

32 
	~"ª°‹e.c
"

33 
	~"ßve.c
"

34 
	~"s‹t.c
"

35 
	~"°ack.c
"

36 
	~"°ªqvcmp.c
"

37 
	~"ãxt_mm≠.c
"

38 
	~"tokíize.c
"

39 
	~"time.c
"

40 
	~"ußge.c
"

41 
	~"vîsi⁄.c
"

	@libopts/load.c

31 
tO±i⁄LﬂdMode
 
	g›ti⁄_lﬂd_mode
 = 
OPTION_LOAD_UNCOOKED
;

34 
ag_boﬁ


35 
ö£πProgømP©h
(* 
pzBuf
, 
bufSize
, c⁄° * 
pzName
,

36 c⁄° * 
pzProgP©h
);

38 
ag_boﬁ


39 
ö£πEnvVÆ
(* 
pzBuf
, 
bufSize
, c⁄° * 
pzName
,

40 c⁄° * 
pzProgP©h
);

43 
as£mbÀArgVÆue
(* 
pzTxt
, 
tO±i⁄LﬂdMode
 
mode
);

97 
ag_boﬁ


98 
	$›ti⁄MakeP©h
(* 
pzBuf
, 
bufSize
, c⁄° * 
pzName
,

99 c⁄° * 
pzProgP©h
)

101 
size_t
 
«me_Àn
 = 
	`°æí
(
pzName
);

103 #i‚de‡
PKGDATADIR


104 
	#PKGDATADIR
 ""

	)

107 c⁄° 
pkgd©adú
[] = 
PKGDATADIR
;

109 
ag_boﬁ
 
ªs
 = 
AG_TRUE
;

111 i‡(
bufSize
 <
«me_Àn
)

112  
AG_FALSE
;

117 i‡(*
pzName
 != '$') {

118 c⁄°* 
pzS
 = 
pzName
;

119 * 
pzD
 = 
pzBuf
;

120 
˘
 = 
bufSize
;

123 i‡–(*(
pzD
++Ë*(
pzS
++)Ë=
NUL
)

125 i‡(--
˘
 <= 0)

126  
AG_FALSE
;

135 
pzName
[1]) {

136 
NUL
:

137  
AG_FALSE
;

140 
ªs
 = 
	`ö£πProgømP©h
(
pzBuf
, 
bufSize
, 
pzName
, 
pzProgP©h
);

144 i‡(
pkgd©adú
[0] =
NUL
)

145  
AG_FALSE
;

147 i‡(
«me_Àn
 +  (
pkgd©adú
Ë> 
bufSize
)

148  
AG_FALSE
;

150 
	`°r˝y
(
pzBuf
, 
pkgd©adú
);

151 
	`°r˝y
(
pzBuf
 + (
pkgd©adú
Ë- 1, 
pzName
 + 2);

155 
ªs
 = 
	`ö£πEnvVÆ
(
pzBuf
, 
bufSize
, 
pzName
, 
pzProgP©h
);

158 i‡(! 
ªs
)

159  
AG_FALSE
;

161 #i‡
	`deföed
(
HAVE_CANONICALIZE_FILE_NAME
)

163 * 
pz
 = 
	`ˇn⁄iˇlize_fûe_«me
(
pzBuf
);

164 i‡(
pz
 =
NULL
)

165  
AG_FALSE
;

166 i‡(
	`°æí
(
pz
Ë< 
bufSize
)

167 
	`°r˝y
(
pzBuf
, 
pz
);

168 
	`‰ì
(
pz
);

171 #ñi‡
	`deföed
(
HAVE_REALPATH
)

173 
z
[ 
PATH_MAX
+1 ];

175 i‡(
	`ªÆ∑th
(
pzBuf
, 
z
Ë=
NULL
)

176  
AG_FALSE
;

178 i‡(
	`°æí
(
z
Ë< 
bufSize
)

179 
	`°r˝y
(
pzBuf
, 
z
);

183  
AG_TRUE
;

184 
	}
}

187 
ag_boﬁ


188 
	$ö£πProgømP©h
(* 
pzBuf
, 
bufSize
, c⁄° * 
pzName
,

189 c⁄° * 
pzProgP©h
)

191 c⁄°* 
pzP©h
;

192 c⁄°* 
pz
;

193 
skù
 = 2;

195 
pzName
[2]) {

196 
DIRCH
:

197 
skù
 = 3;

198 
NUL
:

201  
AG_FALSE
;

209 i‡(
	`°rchr
(
pzProgP©h
, 
DIRCH
Ë!
NULL
)

210 
pzP©h
 = 
pzProgP©h
;

212 
pzP©h
 = 
	`∑thföd
(
	`gëív
("PATH"), (*)
pzProgP©h
, "rx");

214 i‡(
pzP©h
 =
NULL
)

215  
AG_FALSE
;

218 
pz
 = 
	`°ºchr
(
pzP©h
, 
DIRCH
);

224 i‡(
pz
 =
NULL
)

225  
AG_FALSE
;

227 
pzName
 +
skù
;

233 i‡((
pz
 - 
pzP©h
)+1 + 
	`°æí
(
pzName
Ë>
bufSize
)

234  
AG_FALSE
;

236 
	`mem˝y
(
pzBuf
, 
pzP©h
, (
size_t
)((
pz
 -ÖzPath)+1));

237 
	`°r˝y
(
pzBuf
 + (
pz
 - 
pzP©h
Ë+ 1, 
pzName
);

243 i‡(
pzP©h
 !
pzProgP©h
)

244 
	`AGFREE
(
pzP©h
);

245  
AG_TRUE
;

246 
	}
}

249 
ag_boﬁ


250 
	$ö£πEnvVÆ
(* 
pzBuf
, 
bufSize
, c⁄° * 
pzName
,

251 c⁄° * 
pzProgP©h
)

253 * 
pzDú
 = 
pzBuf
;

256 
ch
 = ()*++
pzName
;

257 i‡(! 
	`IS_VALUE_NAME_CHAR
(
ch
))

259 *(
pzDú
++Ë()
ch
;

262 i‡(
pzDú
 =
pzBuf
)

263  
AG_FALSE
;

265 *
pzDú
 = 
NUL
;

267 
pzDú
 = 
	`gëív
(
pzBuf
);

272 i‡(
pzDú
 =
NULL
)

273  
AG_FALSE
;

275 i‡(
	`°æí
(
pzDú
Ë+ 1 + såÀn(
pzName
Ë>
bufSize
)

276  
AG_FALSE
;

278 
	`•rötf
(
pzBuf
, "%s%s", 
pzDú
, 
pzName
);

279  
AG_TRUE
;

280 
	}
}

283 
LOCAL
 

284 
	$mungeSåög
(* 
pzTxt
, 
tO±i⁄LﬂdMode
 
mode
)

286 * 
pzE
;

288 i‡(
mode
 =
OPTION_LOAD_KEEP
)

291 i‡(
	`IS_WHITESPACE_CHAR
(*
pzTxt
)) {

292 * 
pzS
 = 
pzTxt
;

293 * 
pzD
 = 
pzTxt
;

294 
	`IS_WHITESPACE_CHAR
(*++
pzS
)) ;

295 (*(
pzD
++Ë*(
pzS
++)Ë!
NUL
) ;

296 
pzE
 = 
pzD
-1;

298 
pzE
 = 
pzTxt
 + 
	`°æí
(pzTxt);

300 (
pzE
 > 
pzTxt
Ë&& 
	`IS_WHITESPACE_CHAR
(pzE[-1]))ÖzE--;

301 *
pzE
 = 
NUL
;

303 i‡(
mode
 =
OPTION_LOAD_UNCOOKED
)

306 *
pzTxt
) {

312 
pzE
[-1]) {

318 ()
	`ao_°rög_cook
(
pzTxt
, 
NULL
);

319 
	}
}

323 
	$as£mbÀArgVÆue
(* 
pzTxt
, 
tO±i⁄LﬂdMode
 
mode
)

325 c⁄° 
zBrk
[] = " \t\n:=";

326 * 
pzEnd
 = 
	`°Ωbrk
(
pzTxt
, 
zBrk
);

327 
•a˚_bªak
;

332 i‡(
pzEnd
 =
NULL
)

333  
pzTxt
 + 
	`°æí
(pzTxt);

340 i‡(
mode
 =
OPTION_LOAD_KEEP
) {

341 *(
pzEnd
++Ë
NUL
;

342  
pzEnd
;

350 
•a˚_bªak
 = 
	`IS_WHITESPACE_CHAR
(*
pzEnd
);

351 *(
pzEnd
++Ë
NUL
;

352 
	`IS_WHITESPACE_CHAR
(*
pzEnd
))ÖzEnd++;

353 i‡(
•a˚_bªak
 && ((*
pzEnd
 == ':') || (*pzEnd == '=')))

354 
	`IS_WHITESPACE_CHAR
(*++
pzEnd
)) ;

356  
pzEnd
;

357 
	}
}

366 
LOCAL
 

367 
	$lﬂdO±i⁄Löe
(

368 
tO±i⁄s
* 
pO±s
,

369 
tO±Sèã
* 
pOS
,

370 * 
pzLöe
,

371 
tDúe˘i⁄
 
dúe˘i⁄
,

372 
tO±i⁄LﬂdMode
 
lﬂd_mode
 )

374 
	`IS_WHITESPACE_CHAR
(*
pzLöe
))ÖzLine++;

377 * 
pzArg
 = 
	`as£mbÀArgVÆue
(
pzLöe
, 
lﬂd_mode
);

379 i‡(! 
	`SUCCESSFUL
(
	`l⁄gO±i⁄Föd
(
pO±s
, 
pzLöe
, 
pOS
)))

381 i‡(
pOS
->
Êags
 & 
OPTST_NO_INIT
)

383 
pOS
->
pzO±Arg
 = 
pzArg
;

386 
pOS
->
Êags
 & (
OPTST_IMM
|
OPTST_DISABLE_IMM
)) {

393 i‡(
	`PRESETTING
(
dúe˘i⁄
))

397 
OPTST_IMM
:

398 i‡(
	`PRESETTING
(
dúe˘i⁄
)) {

404 i‡((
pOS
->
Êags
 & 
OPTST_DISABLED
) == 0)

412 i‡((
pOS
->
Êags
 & 
OPTST_DISABLED
) != 0)

417 
OPTST_DISABLE_IMM
:

418 i‡(
	`PRESETTING
(
dúe˘i⁄
)) {

424 i‡((
pOS
->
Êags
 & 
OPTST_DISABLED
) != 0)

432 i‡((
pOS
->
Êags
 & 
OPTST_DISABLED
) == 0)

437 
OPTST_IMM
|
OPTST_DISABLE_IMM
:

443 i‡(
	`PROCESSING
(
dúe˘i⁄
))

451 i‡(
	`OPTST_GET_ARGTYPE
(
pOS
->
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_NONE
) {

452 i‡(*
pOS
->
pzO±Arg
 !
NUL
)

454 
pOS
->
pzO±Arg
 = 
NULL
;

456 } i‡(
pOS
->
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) {

457 i‡(*
pOS
->
pzO±Arg
 =
NUL
)

458 
pOS
->
pzO±Arg
 = 
NULL
;

460 
	`AGDUPSTR
(
pOS
->
pzO±Arg
,ÖOS->pzOptArg, "optionárgument");

461 
pOS
->
Êags
 |
OPTST_ALLOC_ARG
;

465 i‡(*
pOS
->
pzO±Arg
 =
NUL
)

466 
pOS
->
pzO±Arg
 = 
zNû
;

468 
	`AGDUPSTR
(
pOS
->
pzO±Arg
,ÖOS->pzOptArg, "optionárgument");

469 
pOS
->
Êags
 |
OPTST_ALLOC_ARG
;

474 
tO±i⁄LﬂdMode
 
sv
 = 
›ti⁄_lﬂd_mode
;

475 
›ti⁄_lﬂd_mode
 = 
lﬂd_mode
;

476 
	`h™dÀO±i⁄
(
pO±s
, 
pOS
);

477 
›ti⁄_lﬂd_mode
 = 
sv
;

479 
	}
}

508 
	$›ti⁄LﬂdLöe
(
tO±i⁄s
 * 
pO±s
, c⁄° * 
pzLöe
)

510 
tO±Sèã
 
°
 = 
	`OPTSTATE_INITIALIZER
(
SET
);

511 * 
pz
;

512 
	`AGDUPSTR
(
pz
, 
pzLöe
, "user optionÜine");

513 
	`lﬂdO±i⁄Löe
(
pO±s
, &
°
, 
pz
, 
DIRECTION_PROCESS
, 
OPTION_LOAD_COOKED
);

514 
	`AGFREE
(
pz
);

515 
	}
}

	@libopts/makeshell.c

31 
tO±i⁄s
* 
	gpShñlP¨£O±i⁄s
 = 
NULL
;

37 c⁄° 
	gzSèπM¨kî
[] =

41 c⁄° 
	gzPªambÀ
[] =

46 c⁄° 
	gzEndPªambÀ
[] =

49 c⁄° 
	gzMu…iDef
[] = "\n"

59 c⁄° 
	gzSögÀDef
[] = "\n"

64 c⁄° 
	gzSögÀNoDef
[] = "\n"

77 c⁄° 
	gzLo›Ca£
[] = "\n"

92 c⁄° 
	gzLo›O∆y
[] = "\n"

107 c⁄° 
	gzL⁄gSñe˘i⁄
[] =

110 c⁄° 
	gzFœgSñe˘i⁄
[] =

113 c⁄° 
	gzEndSñe˘i⁄
[] =

116 c⁄° 
	gzNoSñe˘i⁄
[] =

126 c⁄° 
	gzLo›End
[] =

141 c⁄° 
	gzTøûîM¨kî
[] = "\n"

150 c⁄° 
	gzO±i⁄Ca£
[] =

153 c⁄° 
	gzO±i⁄P¨tName
[] =

156 c⁄° 
	gzO±i⁄FuŒName
[] =

159 c⁄° 
	gzO±i⁄Fœg
[] =

162 c⁄° 
	gzO±i⁄EndSñe˘
[] =

165 c⁄° 
	gzO±i⁄Unknown
[] =

179 c⁄° 
	gzTextExô
[] =

183 c⁄° 
	gzPagedUßgeExô
[] =

187 c⁄° 
	gzCmdFmt
[] =

190 c⁄° 
	gzCou¡Te°
[] =

196 c⁄° 
	gzMu…iArg
[] =

201 c⁄° 
	gzSögÀArg
[] =

209 c⁄° 
	gzNoMu…iArg
[] =

216 c⁄° 
	gzNoSögÀArg
[] =

226 c⁄° 
	gzMayArg
[] =

231 c⁄° 
	gzMu°Arg
[] =

234 c⁄° 
	gzC™tArg
[] =

245 c⁄° 
	gzL⁄gO±Inô
[] =

253 c⁄° 
	gzL⁄gO±Arg
[] =

289 c⁄° 
	gzFœgO±Inô
[] =

293 c⁄° 
	gzFœgO±Arg
[] =

340 
tSCC
* 
	gpzShñl
 = 
NULL
;

341 * 
	gpzLódî
 = 
NULL
;

342 * 
	gpzTøûî
 = 
NULL
;

346 
ãxtToV¨übÀ
(
tO±i⁄s
* 
pO±s
, 
ãTextTo
 
whichV¨
, 
tO±Desc
* 
pOD
);

349 
emôUßge
(
tO±i⁄s
* 
pO±s
);

352 
emôSëup
(
tO±i⁄s
* 
pO±s
);

355 
¥ötO±i⁄A˘i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pO±Desc
);

358 
¥ötO±i⁄I«˘i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pO±Desc
);

361 
emôFœg
(
tO±i⁄s
* 
pO±s
);

364 
emôM©chEx¥
(
tCC
* 
pzM©chName
, 
tO±Desc
* 
pCurO±
, 
tO±i⁄s
* 
pO±s
);

367 
emôL⁄g
(
tO±i⁄s
* 
pO±s
);

370 
›íOuçut
(c⁄°* 
pzFûe
);

383 
	$›ti⁄P¨£Shñl
(
tO±i⁄s
* 
pO±s
)

390 i‡(
	`HAVE_OPT
(
SHELL
))

391 
pzShñl
 = 
	`OPT_ARG
(
SHELL
);

393 i‡(! 
	`ENABLED_OPT
(
SHELL
))

394 
pzShñl
 = 
NULL
;

396 i‡((
pzShñl
 = 
	`gëív
("SHELL")),

397 
pzShñl
 =
NULL
)

399 
pzShñl
 = 
DEFAULT_SHELL
;

404 i‡(
	`HAVE_OPT
(
SCRIPT
))

405 
	`›íOuçut
(
	`OPT_ARG
(
SCRIPT
));

407 
	`emôUßge
(
pO±s
);

408 
	`emôSëup
(
pO±s
);

413 
pO±s
->
fO±Së
 & (
OPTPROC_LONGOPT
|
OPTPROC_SHORTOPT
)) {

414 
OPTPROC_LONGOPT
:

415 
	`Âuts
(
zLo›Ca£
, 
°dout
);

417 
	`Âuts
(
zL⁄gSñe˘i⁄
, 
°dout
);

418 
	`Âuts
(
zL⁄gO±Inô
, 
°dout
);

419 
	`emôL⁄g
(
pO±s
);

420 
	`¥ötf
(
zL⁄gO±Arg
, 
pO±s
->
pzPROGNAME
);

421 
	`Âuts
(
zEndSñe˘i⁄
, 
°dout
);

423 
	`Âuts
(
zNoSñe˘i⁄
, 
°dout
);

427 
	`Âuts
(
zLo›O∆y
, 
°dout
);

428 
	`Âuts
(
zL⁄gO±Inô
, 
°dout
);

429 
	`emôL⁄g
(
pO±s
);

430 
	`¥ötf
(
zL⁄gO±Arg
, 
pO±s
->
pzPROGNAME
);

433 
OPTPROC_SHORTOPT
:

434 
	`Âuts
(
zLo›Ca£
, 
°dout
);

436 
	`Âuts
(
zFœgSñe˘i⁄
, 
°dout
);

437 
	`Âuts
(
zFœgO±Inô
, 
°dout
);

438 
	`emôFœg
(
pO±s
);

439 
	`¥ötf
(
zFœgO±Arg
, 
pO±s
->
pzPROGNAME
);

440 
	`Âuts
(
zEndSñe˘i⁄
, 
°dout
);

442 
	`Âuts
(
zNoSñe˘i⁄
, 
°dout
);

445 
OPTPROC_LONGOPT
|
OPTPROC_SHORTOPT
:

446 
	`Âuts
(
zLo›Ca£
, 
°dout
);

448 
	`Âuts
(
zL⁄gSñe˘i⁄
, 
°dout
);

449 
	`Âuts
(
zL⁄gO±Inô
, 
°dout
);

450 
	`emôL⁄g
(
pO±s
);

451 
	`¥ötf
(
zL⁄gO±Arg
, 
pO±s
->
pzPROGNAME
);

452 
	`Âuts
(
zEndSñe˘i⁄
, 
°dout
);

454 
	`Âuts
(
zFœgSñe˘i⁄
, 
°dout
);

455 
	`Âuts
(
zFœgO±Inô
, 
°dout
);

456 
	`emôFœg
(
pO±s
);

457 
	`¥ötf
(
zFœgO±Arg
, 
pO±s
->
pzPROGNAME
);

458 
	`Âuts
(
zEndSñe˘i⁄
, 
°dout
);

460 
	`Âuts
(
zNoSñe˘i⁄
, 
°dout
);

464 
	`¥ötf
(
zLo›End
, 
pO±s
->
pzPROGNAME
, 
zTøûîM¨kî
);

465 i‡((
pzTøûî
 !
NULL
) && (*pzTrailer != '\0'))

466 
	`Âuts
(
pzTøûî
, 
°dout
);

467 i‡(
	`ENABLED_OPT
(
SHELL
))

468 
	`¥ötf
("\√nv | gª∞'^%s_'\n", 
pO±s
->
pzPROGNAME
);

470 
	`fÊush
(
°dout
);

471 
	`fchmod
(
STDOUT_FILENO
, 0755);

472 
	`f˛o£
(
°dout
);

473 i‡(
	`„º‹
(
°dout
)) {

474 
	`Âuts
(
zOuçutFaû
, 
°dîr
);

475 
	`exô
(
EXIT_FAILURE
);

477 
	}
}

481 
	$ãxtToV¨übÀ
(
tO±i⁄s
* 
pO±s
, 
ãTextTo
 
whichV¨
, 
tO±Desc
* 
pOD
)

483 
	#_TT_
(
n
Ë
tSCC
 
z
 ##Ç [] = #n;

	)

484 
TEXTTO_TABLE


485 #unde‡
_TT_


486 
	#_TT_
(
n
Ë
z
 ##Ç ,

	)

487 c⁄°* 
≠zTTNames
[] = { 
TEXTTO_TABLE
 };

488 #unde‡
_TT_


490 #i‡! 
	`deföed
(
HAVE_WORKING_FORK
)

491 
	`¥ötf
("%1$s_%2$s_TEXT='no %2$sÅext'\n",

492 
pO±s
->
pzPROGNAME
, 
≠zTTNames
[ 
whichV¨
 ]);

494 
∆HﬁdCt
 = 0;

495 
pùeFd
[2];

496 
FILE
* 
Â
;

498 
	`¥ötf
("%s_%s_TEXT='", 
pO±s
->
pzPROGNAME
, 
≠zTTNames
[ 
whichV¨
 ]);

499 
	`fÊush
(
°dout
);

501 i‡(
	`pùe
(
pùeFd
) != 0) {

502 
	`Ârötf
(
°dîr
, 
zBadPùe
, 
î∫o
, 
	`°ªº‹
(errno));

503 
	`exô
(
EXIT_FAILURE
);

506 
	`f‹k
()) {

508 
	`Ârötf
(
°dîr
, 
zF‹kFaû
, 
î∫o
, 
	`°ªº‹
”ºno), 
pO±s
->
pzProgName
);

509 
	`exô
(
EXIT_FAILURE
);

513 
	`dup2
(
pùeFd
[1], 
STDERR_FILENO
);

514 
	`dup2
(
pùeFd
[1], 
STDOUT_FILENO
);

515 
	`˛o£
(
pùeFd
[0]);

517 
whichV¨
) {

518 
TT_LONGUSAGE
:

519 (*(
pO±s
->
pUßgeProc
))’O±s, 
EXIT_SUCCESS
);

521 
	`exô
(
EXIT_FAILURE
);

523 
TT_USAGE
:

524 (*(
pO±s
->
pUßgeProc
))’O±s, 
EXIT_FAILURE
);

526 
	`exô
(
EXIT_FAILURE
);

528 
TT_VERSION
:

529 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

530 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

531 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

533 
pOD
->
›tArg
.
¨gSåög
 = "c";

534 
	`›ti⁄PrötVîsi⁄
(
pO±s
, 
pOD
);

538 
	`exô
(
EXIT_FAILURE
);

542 
	`˛o£
(
pùeFd
[1]);

543 
Â
 = 
	`fd›í
(
pùeFd
[0], "r" 
FOPEN_BINARY_FLAG
);

547 
ch
 = 
	`fgëc
(
Â
);

548 
ch
) {

551 
∆HﬁdCt
++;

555 
∆HﬁdCt
 > 0) {

556 
	`Âutc
('\n', 
°dout
);

557 
∆HﬁdCt
--;

559 
	`Âuts
("'\\''", 
°dout
);

562 
EOF
:

563 
ídCh¨Lo›
;

566 
∆HﬁdCt
 > 0) {

567 
	`Âutc
('\n', 
°dout
);

568 
∆HﬁdCt
--;

570 
	`Âutc
(
ch
, 
°dout
);

573 } 
ídCh¨Lo›
:;

575 
	`Âuts
("'\n\n", 
°dout
);

576 
	`˛o£
(
pùeFd
[0]);

578 
	}
}

582 
	$emôUßge
(
tO±i⁄s
* 
pO±s
)

584 
zTimeBuf
[
AO_NAME_SIZE
];

592 i‡(
pzLódî
 !
NULL
)

593 
	`Âuts
(
pzLódî
, 
°dout
);

596 
tSCC
 
zStdout
[] = "stdout";

597 
tCC
* 
pzOutName
;

600 
time_t
 
curTime
 = 
	`time
(
NULL
);

601 
tm
* 
pTime
 = 
	`loˇ…ime
(&
curTime
);

602 
	`°r·ime
(
zTimeBuf
, 
AO_NAME_SIZE
, "%A %B %e, %Yáà%∏%Z", 
pTime
 );

605 i‡(
	`HAVE_OPT
(
SCRIPT
))

606 
pzOutName
 = 
	`OPT_ARG
(
SCRIPT
);

607 
pzOutName
 = 
zStdout
;

609 i‡((
pzLódî
 =
NULL
Ë&& (
pzShñl
 != NULL))

610 
	`¥ötf
("#! %s\n", 
pzShñl
);

612 
	`¥ötf
(
zPªambÀ
, 
zSèπM¨kî
, 
pzOutName
, 
zTimeBuf
);

619 * 
pzPN
 = 
zTimeBuf
;

620 
tCC
* 
pz
 = 
pO±s
->
pzPROGNAME
;

622 i‡((*
pzPN
++ = 
	`tﬁowî
(*
pz
++)) == '\0')

627 
	`¥ötf
(
zEndPªambÀ
, 
pO±s
->
pzPROGNAME
);

629 
pO±s
->
pzProgP©h
 =ÖO±s->
pzProgName
 = 
zTimeBuf
;

630 
	`ãxtToV¨übÀ
(
pO±s
, 
TT_LONGUSAGE
, 
NULL
);

631 
	`ãxtToV¨übÀ
(
pO±s
, 
TT_USAGE
, 
NULL
);

634 
tO±Desc
* 
pO±Desc
 = 
pO±s
->pOptDesc;

635 
›ti⁄Ct
 = 
pO±s
->
›tCt
;

638 i‡(
pO±Desc
->
pO±Proc
 =
›ti⁄PrötVîsi⁄
) {

639 
	`ãxtToV¨übÀ
(
pO±s
, 
TT_VERSION
, 
pO±Desc
);

643 i‡(--
›ti⁄Ct
 <= 0)

645 
pO±Desc
++;

648 
	}
}

652 
	$emôSëup
(
tO±i⁄s
* 
pO±s
)

654 
tO±Desc
* 
pO±Desc
 = 
pO±s
->pOptDesc;

655 
›ti⁄Ct
 = 
pO±s
->
¥e£tO±Ct
;

656 c⁄°* 
pzFmt
;

657 c⁄°* 
pzDeÁu…
;

659 ;
›ti⁄Ct
 > 0; 
pO±Desc
++, --optionCt) {

660 
zVÆ
[16];

666 i‡(
	`SKIP_OPT
(
pO±Desc
Ë|| (pO±Desc->
pz_NAME
 =
NULL
))

669 i‡(
pO±Desc
->
›tMaxCt
 > 1)

670 
pzFmt
 = 
zMu…iDef
;

671 
pzFmt
 = 
zSögÀDef
;

677 
	`OPTST_GET_ARGTYPE
(
pO±Desc
->
fO±Sèã
)) {

678 
OPARG_TYPE_ENUMERATION
:

679 (*(
pO±Desc
->
pO±Proc
))(
OPTPROC_EMIT_SHELL
,ÖOptDesc );

680 
pzDeÁu…
 = 
pO±Desc
->
›tArg
.
¨gSåög
;

686 
OPARG_TYPE_NUMERIC
:

687 
	`¢¥ötf
(
zVÆ
, (zVal), "%d",

688 ()
pO±Desc
->
›tArg
.
¨gI¡
);

689 
pzDeÁu…
 = 
zVÆ
;

692 
OPARG_TYPE_MEMBERSHIP
:

693 
	`¢¥ötf
(
zVÆ
, (zVal), "%lu",

694 ()
pO±Desc
->
›tArg
.
¨gI¡±r
);

695 
pzDeÁu…
 = 
zVÆ
;

698 
OPARG_TYPE_BOOLEAN
:

699 
pzDeÁu…
 = (
pO±Desc
->
›tArg
.
¨gBoﬁ
) ? "true" : "false";

703 i‡(
pO±Desc
->
›tArg
.
¨gSåög
 =
NULL
) {

704 i‡(
pzFmt
 =
zSögÀDef
)

705 
pzFmt
 = 
zSögÀNoDef
;

706 
pzDeÁu…
 = 
NULL
;

709 
pzDeÁu…
 = 
pO±Desc
->
›tArg
.
¨gSåög
;

712 
	`¥ötf
(
pzFmt
, 
pO±s
->
pzPROGNAME
, 
pO±Desc
->
pz_NAME
, 
pzDeÁu…
);

714 
	}
}

718 
	$¥ötO±i⁄A˘i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pO±Desc
)

720 i‡(
pO±Desc
->
pO±Proc
 =
›ti⁄PrötVîsi⁄
)

721 
	`¥ötf
(
zTextExô
, 
pO±s
->
pzPROGNAME
, "VERSION");

723 i‡(
pO±Desc
->
pO±Proc
 =
›ti⁄PagedUßge
)

724 
	`¥ötf
(
zPagedUßgeExô
, 
pO±s
->
pzPROGNAME
);

726 i‡(
pO±Desc
->
pO±Proc
 =
›ti⁄LﬂdO±
) {

727 
	`¥ötf
(
zCmdFmt
, "echo 'Warning: CannotÜoad options files' >&2");

728 
	`¥ötf
(
zCmdFmt
, "OPT_ARG_NEEDED=YES");

730 } i‡(
pO±Desc
->
pz_NAME
 =
NULL
) {

732 i‡(
pO±Desc
->
pO±Proc
 =
NULL
) {

733 
	`¥ötf
(
zCmdFmt
, "echo 'Warning: Cannot save options files' "

735 
	`¥ötf
(
zCmdFmt
, "OPT_ARG_NEEDED=OK");

737 
	`¥ötf
(
zTextExô
, 
pO±s
->
pzPROGNAME
, "LONGUSAGE");

740 i‡(
pO±Desc
->
›tMaxCt
 == 1)

741 
	`¥ötf
(
zSögÀArg
, 
pO±s
->
pzPROGNAME
, 
pO±Desc
->
pz_NAME
);

743 i‡(()
pO±Desc
->
›tMaxCt
 < 
NOLIMIT
)

744 
	`¥ötf
(
zCou¡Te°
, 
pO±s
->
pzPROGNAME
,

745 
pO±Desc
->
pz_NAME
,ÖO±Desc->
›tMaxCt
);

747 
	`¥ötf
(
zMu…iArg
, 
pO±s
->
pzPROGNAME
, 
pO±Desc
->
pz_NAME
);

753 i‡(
	`OPTST_GET_ARGTYPE
(
pO±Desc
->
fO±Sèã
Ë=
OPARG_TYPE_NONE
) {

754 
	`¥ötf
(
zC™tArg
, 
pO±s
->
pzPROGNAME
, 
pO±Desc
->
pz_NAME
);

756 } i‡(
pO±Desc
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) {

757 
	`¥ötf
(
zMayArg
, 
pO±s
->
pzPROGNAME
, 
pO±Desc
->
pz_NAME
);

760 
	`Âuts
(
zMu°Arg
, 
°dout
);

763 
	`Âuts
(
zO±i⁄EndSñe˘
, 
°dout
);

764 
	}
}

768 
	$¥ötO±i⁄I«˘i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pO±Desc
)

770 i‡(
pO±Desc
->
pO±Proc
 =
›ti⁄LﬂdO±
) {

771 
	`¥ötf
(
zCmdFmt
, "echo 'Warning: Cannot suppressÅheÜoading of "

774 } i‡(
pO±Desc
->
›tMaxCt
 == 1)

775 
	`¥ötf
(
zNoSögÀArg
, 
pO±s
->
pzPROGNAME
,

776 
pO±Desc
->
pz_NAME
,ÖO±Desc->
pz_DißbÀPfx
);

778 
	`¥ötf
(
zNoMu…iArg
, 
pO±s
->
pzPROGNAME
,

779 
pO±Desc
->
pz_NAME
,ÖO±Desc->
pz_DißbÀPfx
);

781 
	`¥ötf
(
zCmdFmt
, "OPT_ARG_NEEDED=NO");

782 
	`Âuts
(
zO±i⁄EndSñe˘
, 
°dout
);

783 
	}
}

787 
	$emôFœg
(
tO±i⁄s
* 
pO±s
)

789 
tO±Desc
* 
pO±Desc
 = 
pO±s
->pOptDesc;

790 
›ti⁄Ct
 = 
pO±s
->
›tCt
;

792 
	`Âuts
(
zO±i⁄Ca£
, 
°dout
);

794 ;
›ti⁄Ct
 > 0; 
pO±Desc
++, --optionCt) {

796 i‡(
	`SKIP_OPT
(
pO±Desc
))

799 i‡(
	`IS_GRAPHIC_CHAR
(
pO±Desc
->
›tVÆue
)) {

800 
	`¥ötf
(
zO±i⁄Fœg
, 
pO±Desc
->
›tVÆue
);

801 
	`¥ötO±i⁄A˘i⁄
(
pO±s
, 
pO±Desc
);

804 
	`¥ötf
(
zO±i⁄Unknown
, "Êag", 
pO±s
->
pzPROGNAME
);

805 
	}
}

812 
	$emôM©chEx¥
(
tCC
* 
pzM©chName
, 
tO±Desc
* 
pCurO±
, 
tO±i⁄s
* 
pO±s
)

814 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
;

815 
oCt
 = 
pO±s
->
›tCt
;

816 
mö
 = 1;

817 
zName
[ 256 ];

818 * 
pz
 = 
zName
;

821 
m©chCt
 = 0;

826 i‡((
pOD
 =
pCurO±
Ë|| 
	`SKIP_OPT
(pOD)){

827 i‡(--
oCt
 <= 0)

829 
pOD
++;

838  
	`touµî
(
pOD
->
pz_Name
[
m©chCt
])

839 =
	`touµî
(
pzM©chName
[
m©chCt
]))

840 
m©chCt
++;

842 i‡(
m©chCt
 > 
mö
)

843 
mö
 = 
m©chCt
;

848 i‡(
pOD
->
pz_DißbÀName
 !
NULL
) {

849 
m©chCt
 = 0;

850  
	`touµî
(
pOD
->
pz_DißbÀName
[
m©chCt
])

851 =
	`touµî
(
pzM©chName
[
m©chCt
]))

852 
m©chCt
++;

853 i‡(
m©chCt
 > 
mö
)

854 
mö
 = 
m©chCt
;

856 i‡(--
oCt
 <= 0)

858 
pOD
++;

865 i‡–(
pzM©chName
[
mö
 ] =
NUL
)

866 || (
pzM©chName
[
mö
+1] =
NUL
) )

867 
	`¥ötf
(
zO±i⁄FuŒName
, 
pzM©chName
);

870 
m©chCt
 = 0;

871 ; 
m©chCt
 <
mö
; matchCt++)

872 *
pz
++ = 
pzM©chName
[
m©chCt
];

875 *
pz
 = 
NUL
;

876 
	`¥ötf
(
zO±i⁄P¨tName
, 
zName
);

877 *
pz
++ = 
pzM©chName
[
m©chCt
++];

878 i‡(
pzM©chName
[
m©chCt
] =
NUL
) {

879 *
pz
 = 
NUL
;

880 
	`¥ötf
(
zO±i⁄FuŒName
, 
zName
);

885 
	}
}

892 
	$emôL⁄g
(
tO±i⁄s
* 
pO±s
)

894 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
;

895 
˘
 = 
pO±s
->
›tCt
;

897 
	`Âuts
(
zO±i⁄Ca£
, 
°dout
);

906 i‡(
	`SKIP_OPT
(
pOD
))

909 
	`emôM©chEx¥
(
pOD
->
pz_Name
,ÖOD, 
pO±s
);

910 
	`¥ötO±i⁄A˘i⁄
(
pO±s
, 
pOD
);

915 i‡(
pOD
->
pz_DißbÀName
 !
NULL
) {

916 
	`emôM©chEx¥
(
pOD
->
pz_DißbÀName
,ÖOD, 
pO±s
);

917 
	`¥ötO±i⁄I«˘i⁄
(
pO±s
, 
pOD
);

919 } 
pOD
++, --
˘
 > 0);

921 
	`¥ötf
(
zO±i⁄Unknown
, "›ti⁄", 
pO±s
->
pzPROGNAME
);

922 
	}
}

926 
	$›íOuçut
(c⁄°* 
pzFûe
)

928 
FILE
* 
Â
;

929 * 
pzD©a
 = 
NULL
;

930 
°©
 
°bf
;

933 * 
pzSˇn
;

934 
size_t
 
sizeLe·
;

941 i‡(
	`°©
(
pzFûe
, &
°bf
) != 0)

947 i‡(! 
	`S_ISREG
(
°bf
.
°_mode
)) {

948 
	`Ârötf
(
°dîr
, 
zNŸFûe
, 
pzFûe
);

949 
	`exô
(
EXIT_FAILURE
);

952 
pzD©a
 = 
	`AGALOC
(
°bf
.
°_size
 + 1, "file data");

953 
Â
 = 
	`f›í
(
pzFûe
, "r" 
FOPEN_BINARY_FLAG
);

955 
sizeLe·
 = ()
°bf
.
°_size
;

956 
pzSˇn
 = 
pzD©a
;

962 
ö˘
 = 
	`‰ód
((*)
pzSˇn
, (
size_t
)1, 
sizeLe·
, 
Â
);

963 i‡(
ö˘
 == 0)

966 
pzSˇn
 +
ö˘
;

967 
sizeLe·
 -
ö˘
;

969 i‡(
sizeLe·
 == 0)

976 *
pzSˇn
 = '\0';

977 
	`f˛o£
(
Â
);

978 
pzSˇn
 = 
	`°r°r
(
pzD©a
, 
zSèπM¨kî
);

979 i‡(
pzSˇn
 =
NULL
) {

980 
pzTøûî
 = 
pzD©a
;

984 *(
pzSˇn
++Ë
NUL
;

985 
pzSˇn
 = 
	`°r°r
’zSˇn, 
zTøûîM¨kî
);

986 i‡(
pzSˇn
 =
NULL
) {

987 
pzTøûî
 = 
pzD©a
;

995 
pzTøûî
 = 
pzSˇn
 + (
zTøûîM¨kî
) - 1;

996 
pzLódî
 = 
pzD©a
;

997 } 
AG_FALSE
);

999 i‡(
	`‰e›í
(
pzFûe
, "w" 
FOPEN_BINARY_FLAG
, 
°dout
) != stdout) {

1000 
	`Ârötf
(
°dîr
, 
zFª›íFaû
, 
î∫o
, 
	`°ªº‹
(errno));

1001 
	`exô
(
EXIT_FAILURE
);

1003 
	}
}

1021 
	$gíshñl›tUßge
(
tO±i⁄s
* 
pO±s
, 
exôCode
)

1023 #i‡! 
	`deföed
(
HAVE_WORKING_FORK
)

1024 
	`›ti⁄Ußge
(
pO±s
, 
exôCode
);

1030 i‡(
exôCode
 !
EXIT_SUCCESS
)

1031 
	`›ti⁄Ußge
(
pO±s
, 
exôCode
);

1032 
	`fÊush
(
°dîr
);

1033 
	`fÊush
(
°dout
);

1034 i‡(
	`„º‹
(
°dout
Ë|| fîr‹(
°dîr
))

1035 
	`exô
(
EXIT_FAILURE
);

1037 
›ti⁄_ußge_Â
 = 
°dout
;

1042 
	`f‹k
()) {

1044 
	`›ti⁄Ußge
(
pO±s
, 
EXIT_FAILURE
);

1046 
	`_exô
(
EXIT_FAILURE
);

1049 
∑gîSèã
 = 
PAGER_STATE_CHILD
;

1050 
	`›ti⁄Ußge
(
pO±s
, 
EXIT_SUCCESS
);

1052 
	`_exô
(
EXIT_FAILURE
);

1056 
°s
;

1057 
	`waô
(&
°s
);

1066 * 
pz
;

1067 
	`AGDUPSTR
(
pz
, 
pShñlP¨£O±i⁄s
->
pzPROGNAME
, "programÇame");

1068 
pShñlP¨£O±i⁄s
->
pzProgName
 = 
pz
;

1069 *
pz
 !
NUL
) {

1070 *
pz
 = 
	`tﬁowî
(*pz);

1071 
pz
++;

1078 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zGíshñl
, 
pShñlP¨£O±i⁄s
->
pzProgName
);

1079 
	`fÊush
(
›ti⁄_ußge_Â
);

1084 
	`f‹k
()) {

1086 
∑gîSèã
 = 
PAGER_STATE_CHILD
;

1089 
	`›ti⁄Ußge
(
pShñlP¨£O±i⁄s
, 
EXIT_FAILURE
);

1093 
°s
;

1094 
	`waô
(&
°s
);

1098 
	`fÊush
(
°dout
);

1099 i‡(
	`„º‹
(
°dout
)) {

1100 
	`Âuts
(
zOuçutFaû
, 
°dîr
);

1101 
	`exô
(
EXIT_FAILURE
);

1104 
	`exô
(
EXIT_SUCCESS
);

1106 
	}
}

	@libopts/nested.c

31 
	mxml_ch
;

32 
	mxml_Àn
;

33 
	mxml_txt
[8];

34 } 
	txml_xœã_t
;

36 
xml_xœã_t
 c⁄° 
	gxml_xœã
[] = {

46 
ªmove_c⁄töu©i⁄
(* 
pzSrc
);

49 
sˇn_q_°r
(c⁄°* 
pzTxt
);

51 
tO±i⁄VÆue
*

52 
add_°rög
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

53 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
);

55 
tO±i⁄VÆue
*

56 
add_boﬁ
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

57 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
);

59 
tO±i⁄VÆue
*

60 
add_numbî
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

61 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
);

63 
tO±i⁄VÆue
*

64 
add_√°ed
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

65 * 
pzVÆue
, 
size_t
 
d©aLí
);

68 
sˇn_«me
(c⁄°* 
pzName
, 
tO±i⁄VÆue
* 
pRes
);

71 
sˇn_xml
(c⁄°* 
pzName
, 
tO±i⁄VÆue
* 
pRes
);

74 
s‹t_li°
(
tArgLi°
* 
pAL
);

82 
	$ªmove_c⁄töu©i⁄
(* 
pzSrc
)

84 * 
pzD
;

87 *
pzSrc
 == '\n')ÖzSrc++;

88 
pzD
 = 
	`°rchr
(
pzSrc
, '\n');

89 i‡(
pzD
 =
NULL
)

97 
pzSrc
 = 
pzD
--;

98 i‡(*
pzD
 != '\\')

99 
pzD
++;

100 } 
pzD
 =
pzSrc
);

106 
ch
 = ((*
pzD
++Ë*(
pzSrc
++));

107 
ch
) {

108 
NUL
: ;

110 i‡(*
pzSrc
 == '\n')

111 --
pzD
;

114 
	}
}

120 
	$sˇn_q_°r
(c⁄°* 
pzTxt
)

122 
q
 = *(
pzTxt
++);

125 
ch
 = *(
pzTxt
++);

126 i‡(
ch
 =
NUL
)

127  
pzTxt
-1;

129 i‡(
ch
 =
q
)

130  
pzTxt
;

132 i‡(
ch
 == '\\') {

133 
ch
 = *(
pzTxt
++);

137 i‡(
ch
 =
NUL
)

138  
pzTxt
 - 2;

144 i‡((
ch
 =
q
) || (ch == '\\')) {

145 i‡(*(
pzTxt
++Ë=
NUL
)

146  
pzTxt
-1;

150 
	}
}

156 
tO±i⁄VÆue
*

157 
	$add_°rög
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

158 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
)

160 
tO±i⁄VÆue
* 
pNV
;

161 
size_t
 
sz
 = 
«meLí
 + 
d©aLí
 + (*
pNV
);

163 
pNV
 = 
	`AGALOC
(
sz
, "optionÇame/str valueÖair");

164 i‡(
pNV
 =
NULL
)

165  
NULL
;

167 i‡(
pzVÆue
 =
NULL
) {

168 
pNV
->
vÆTy≥
 = 
OPARG_TYPE_NONE
;

169 
pNV
->
pzName
 =ÖNV->
v
.
°rVÆ
;

172 
pNV
->
vÆTy≥
 = 
OPARG_TYPE_STRING
;

173 i‡(
d©aLí
 > 0) {

174 c⁄° * 
pzSrc
 = 
pzVÆue
;

175 * 
pzD°
 = 
pNV
->
v
.
°rVÆ
;

176 
˘
 = 
d©aLí
;

178 
ch
 = *(
pzSrc
++) & 0xFF;

179 i‡(
ch
 =
NUL
Ë
d©a_c›y_d⁄e
;

180 i‡(
ch
 == '&')

181 
ch
 = 
	`gë_•ecül_ch¨
(&
pzSrc
, &
˘
);

182 *(
pzD°
++Ë
ch
;

183 } --
˘
 > 0);

184 
d©a_c›y_d⁄e
:

185 *
pzD°
 = 
NUL
;

188 
pNV
->
v
.
°rVÆ
[0] = 
NUL
;

191 
pNV
->
pzName
 =ÖNV->
v
.
°rVÆ
 + 
d©aLí
 + 1;

194 
	`mem˝y
(
pNV
->
pzName
,ÖzName, 
«meLí
);

195 
pNV
->
pzName
[ 
«meLí
 ] = 
NUL
;

196 
	`addArgLi°E¡ry
(
µ
, 
pNV
);

197  
pNV
;

198 
	}
}

203 
tO±i⁄VÆue
*

204 
	$add_boﬁ
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

205 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
)

207 
tO±i⁄VÆue
* 
pNV
;

208 
size_t
 
sz
 = 
«meLí
 + (*
pNV
) + 1;

210 
pNV
 = 
	`AGALOC
(
sz
, "optionÇame/bool valueÖair");

211 i‡(
pNV
 =
NULL
)

212  
NULL
;

213 
	`IS_WHITESPACE_CHAR
(*
pzVÆue
Ë&& (
d©aLí
 > 0)) {

214 
d©aLí
--; 
pzVÆue
++;

216 i‡(
d©aLí
 == 0)

217 
pNV
->
v
.
boﬁVÆ
 = 0;

219 i‡(
	`IS_DEC_DIGIT_CHAR
(*
pzVÆue
))

220 
pNV
->
v
.
boﬁVÆ
 = 
	`©oi
(
pzVÆue
);

222 
pNV
->
v
.
boﬁVÆ
 = ! 
	`IS_FALSE_TYPE_CHAR
(*
pzVÆue
);

224 
pNV
->
vÆTy≥
 = 
OPARG_TYPE_BOOLEAN
;

225 
pNV
->
pzName
 = (*)(pNV + 1);

226 
	`mem˝y
(
pNV
->
pzName
,ÖzName, 
«meLí
);

227 
pNV
->
pzName
[ 
«meLí
 ] = 
NUL
;

228 
	`addArgLi°E¡ry
(
µ
, 
pNV
);

229  
pNV
;

230 
	}
}

235 
tO±i⁄VÆue
*

236 
	$add_numbî
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

237 c⁄°* 
pzVÆue
, 
size_t
 
d©aLí
)

239 
tO±i⁄VÆue
* 
pNV
;

240 
size_t
 
sz
 = 
«meLí
 + (*
pNV
) + 1;

242 
pNV
 = 
	`AGALOC
(
sz
, "optionÇame/bool valueÖair");

243 i‡(
pNV
 =
NULL
)

244  
NULL
;

245 
	`IS_WHITESPACE_CHAR
(*
pzVÆue
Ë&& (
d©aLí
 > 0)) {

246 
d©aLí
--; 
pzVÆue
++;

248 i‡(
d©aLí
 == 0)

249 
pNV
->
v
.
l⁄gVÆ
 = 0;

251 
pNV
->
v
.
l⁄gVÆ
 = 
	`°πﬁ
(
pzVÆue
, 0, 0);

253 
pNV
->
vÆTy≥
 = 
OPARG_TYPE_NUMERIC
;

254 
pNV
->
pzName
 = (*)(pNV + 1);

255 
	`mem˝y
(
pNV
->
pzName
,ÖzName, 
«meLí
);

256 
pNV
->
pzName
[ 
«meLí
 ] = 
NUL
;

257 
	`addArgLi°E¡ry
(
µ
, 
pNV
);

258  
pNV
;

259 
	}
}

264 
tO±i⁄VÆue
*

265 
	$add_√°ed
(** 
µ
, c⁄°* 
pzName
, 
size_t
 
«meLí
,

266 * 
pzVÆue
, 
size_t
 
d©aLí
)

268 
tO±i⁄VÆue
* 
pNV
;

270 i‡(
d©aLí
 == 0) {

271 
size_t
 
sz
 = 
«meLí
 + (*
pNV
) + 1;

272 
pNV
 = 
	`AGALOC
(
sz
, "emptyÇested valueÖair");

273 i‡(
pNV
 =
NULL
)

274  
NULL
;

275 
pNV
->
v
.
√°VÆ
 = 
NULL
;

276 
pNV
->
vÆTy≥
 = 
OPARG_TYPE_HIERARCHY
;

277 
pNV
->
pzName
 = (*)(pNV + 1);

278 
	`mem˝y
(
pNV
->
pzName
,ÖzName, 
«meLí
);

279 
pNV
->
pzName
[ 
«meLí
 ] = 
NUL
;

282 
pNV
 = 
	`›ti⁄LﬂdNe°ed
(
pzVÆue
, 
pzName
, 
«meLí
);

285 i‡(
pNV
 !
NULL
)

286 
	`addArgLi°E¡ry
(
µ
, 
pNV
);

288  
pNV
;

289 
	}
}

296 
	$sˇn_«me
(c⁄°* 
pzName
, 
tO±i⁄VÆue
* 
pRes
)

298 
tO±i⁄VÆue
* 
pNV
;

299 c⁄° * 
pzSˇn
 = 
pzName
+1;

300 c⁄° * 
pzVÆ
;

301 
size_t
 
«meLí
 = 1;

302 
size_t
 
d©aLí
 = 0;

308 
	`IS_VALUE_NAME_CHAR
(*
pzSˇn
)Ë{ÖzSˇn++; 
«meLí
++; }

309 i‡(
pzSˇn
[-1] =':'Ë{ÖzSˇn--; 
«meLí
--; }

310 
	`IS_HORIZ_WHITE_CHAR
(*
pzSˇn
))ÖzScan++;

312 
ª_swôch
:

314 *
pzSˇn
) {

317 
	`IS_HORIZ_WHITE_CHAR
(()*++
pzSˇn
)) ;

318 i‡((*
pzSˇn
 == '=') || (*pzScan == ':'))

319 
deÁu…_ch¨
;

320 
ª_swôch
;

324 
pzSˇn
++;

327 
NUL
:

328 
	`add_°rög
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
NULL
, (
size_t
)0);

333 
pzVÆ
 = 
pzSˇn
;

334 
pzSˇn
 = 
	`sˇn_q_°r
(pzScan);

335 
d©aLí
 = 
pzSˇn
 - 
pzVÆ
;

336 
pNV
 = 
	`add_°rög
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
pzVÆ
,

337 
d©aLí
);

338 i‡((
pNV
 !
NULL
Ë&& (
›ti⁄_lﬂd_mode
 =
OPTION_LOAD_COOKED
))

339 
	`ao_°rög_cook
(
pNV
->
v
.
°rVÆ
, 
NULL
);

343 
deÁu…_ch¨
:

348 
pzVÆ
 = 
pzSˇn
;

350 
ch
 = *(
pzSˇn
++);

351 
ch
) {

352 
NUL
:

353 
pzSˇn
--;

354 
d©aLí
 = 
pzSˇn
 - 
pzVÆ
;

355 
°rög_d⁄e
;

359 i‡–(
pzSˇn
 > 
pzVÆ
 + 2)

360 && (
pzSˇn
[-2] == '\\')

361 && (
pzSˇn
[ 0] !
NUL
))

366 
d©aLí
 = (
pzSˇn
 - 
pzVÆ
) - 1;

367 
°rög_d⁄e
:

368 
pNV
 = 
	`add_°rög
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
,

369 
pzVÆ
, 
d©aLí
);

370 i‡(
pNV
 !
NULL
)

371 
	`ªmove_c⁄töu©i⁄
(
pNV
->
v
.
°rVÆ
);

372 
Àave_sˇn_«me
;

376 } 
Àave_sˇn_«me
:;

378  
pzSˇn
;

379 
	}
}

387 
	$sˇn_xml
(c⁄°* 
pzName
, 
tO±i⁄VÆue
* 
pRes
)

389 
size_t
 
«meLí
 = 1, 
vÆLí
 = 0;

390 c⁄°* 
pzSˇn
 = ++
pzName
;

391 c⁄°* 
pzVÆ
;

392 
tO±i⁄VÆue
 
vÆu
;

393 
tO±i⁄VÆue
* 
pNewVÆ
;

394 
tO±i⁄LﬂdMode
 
ßve_mode
 = 
›ti⁄_lﬂd_mode
;

396 i‡(! 
	`IS_VAR_FIRST_CHAR
(*
pzName
)) {

397 *
pzName
) {

399 
pzName
 = 
NULL
;

403 
pzName
 = 
	`°r°r
(pzName, "-->");

404 i‡(
pzName
 !
NULL
)

405 
pzName
 += 3;

409 
pzName
 = 
	`°rchr
(pzName, '>');

410 i‡(
pzName
 !
NULL
)

411 
pzName
++;

414  
pzName
;

417 
pzSˇn
++;

418 
	`IS_VALUE_NAME_CHAR
(()*
pzSˇn
)Ë{ÖzSˇn++; 
«meLí
++; }

419 i‡(
«meLí
 > 64)

420  
NULL
;

421 
vÆu
.
vÆTy≥
 = 
OPARG_TYPE_STRING
;

423 *
pzSˇn
) {

426 
pzSˇn
 = 
	`∑r£Aâribuãs
(

427 
NULL
, (*)
pzSˇn
, &
›ti⁄_lﬂd_mode
, &
vÆu
 );

428 i‡(*
pzSˇn
 == '>') {

429 
pzSˇn
++;

433 i‡(*
pzSˇn
 != '/') {

434 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

435  
NULL
;

440 i‡(*++
pzSˇn
 != '>') {

441 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

442  
NULL
;

444 
	`add_°rög
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
NULL
, (
size_t
)0);

445 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

446  
pzSˇn
+1;

449 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

450  
NULL
;

453 
pzSˇn
++;

457 
pzVÆ
 = 
pzSˇn
;

460 
z
[68];

461 * 
pzD
 = 
z
;

462 
˘
 = 
«meLí
;

463 c⁄°* 
pzS
 = 
pzName
;

465 *(
pzD
++) = '<';

466 *(
pzD
++) = '/';

469 *(
pzD
++Ë*(
pzS
++);

470 } --
˘
 > 0);

471 *(
pzD
++) = '>';

472 *
pzD
 = 
NUL
;

474 
pzSˇn
 = 
	`°r°r
’zSˇn, 
z
);

475 i‡(
pzSˇn
 =
NULL
) {

476 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

477  
NULL
;

479 
vÆLí
 = (
pzSˇn
 - 
pzVÆ
);

480 
pzSˇn
 +
«meLí
 + 3;

481 
	`IS_WHITESPACE_CHAR
(*
pzSˇn
))ÖzScan++;

484 
vÆu
.
vÆTy≥
) {

485 
OPARG_TYPE_NONE
:

486 
	`add_°rög
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
NULL
, (
size_t
)0);

489 
OPARG_TYPE_STRING
:

490 
pNewVÆ
 = 
	`add_°rög
(

491 &(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
pzVÆ
, 
vÆLí
);

493 i‡(
›ti⁄_lﬂd_mode
 =
OPTION_LOAD_KEEP
)

495 
	`mungeSåög
(
pNewVÆ
->
v
.
°rVÆ
, 
›ti⁄_lﬂd_mode
);

498 
OPARG_TYPE_BOOLEAN
:

499 
	`add_boﬁ
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
pzVÆ
, 
vÆLí
);

502 
OPARG_TYPE_NUMERIC
:

503 
	`add_numbî
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
pzVÆ
, 
vÆLí
);

506 
OPARG_TYPE_HIERARCHY
:

508 * 
pz
 = 
	`AGALOC
(
vÆLí
+1, "hierarchical scan");

509 i‡(
pz
 =
NULL
)

511 
	`mem˝y
(
pz
, 
pzVÆ
, 
vÆLí
);

512 
pz
[
vÆLí
] = 
NUL
;

513 
	`add_√°ed
(&(
pRes
->
v
.
√°VÆ
), 
pzName
, 
«meLí
, 
pz
, 
vÆLí
);

514 
	`AGFREE
(
pz
);

518 
OPARG_TYPE_ENUMERATION
:

519 
OPARG_TYPE_MEMBERSHIP
:

524 
›ti⁄_lﬂd_mode
 = 
ßve_mode
;

525  
pzSˇn
;

526 
	}
}

535 
LOCAL
 

536 
	$u∆ﬂd_¨g_li°
(
tArgLi°
* 
pAL
)

538 
˘
 = 
pAL
->
u£Ct
;

539 
tCC
** 
µNV
 = 
pAL
->
≠zArgs
;

541 
˘
-- > 0) {

542 
tO±i⁄VÆue
* 
pNV
 = (tO±i⁄VÆue*)(*)*(
µNV
++);

543 i‡(
pNV
->
vÆTy≥
 =
OPARG_TYPE_HIERARCHY
)

544 
	`u∆ﬂd_¨g_li°
(
pNV
->
v
.
√°VÆ
);

545 
	`AGFREE
(
pNV
);

548 
	`AGFREE
((*)
pAL
);

549 
	}
}

562 
	$›ti⁄U∆ﬂdNe°ed
(
tO±i⁄VÆue
 c⁄° * 
pOV
)

564 i‡(
pOV
 =
NULL
) ;

565 i‡(
pOV
->
vÆTy≥
 !
OPARG_TYPE_HIERARCHY
) {

566 
î∫o
 = 
EINVAL
;

570 
	`u∆ﬂd_¨g_li°
(
pOV
->
v
.
√°VÆ
);

572 
	`AGFREE
((*)
pOV
);

573 
	}
}

581 
	$s‹t_li°
(
tArgLi°
* 
pAL
)

583 
ix
;

584 
lm
 = 
pAL
->
u£Ct
;

589 
ix
 = 0; ++ix < 
lm
;) {

590 
iy
 = 
ix
-1;

591 
tO±i⁄VÆue
* 
pNewNV
 = (tO±i⁄VÆue*)(*)(
pAL
->
≠zArgs
[
ix
]);

592 
tO±i⁄VÆue
* 
pOldNV
 = (tO±i⁄VÆue*)(*)(
pAL
->
≠zArgs
[
iy
]);

599 
	`°rcmp
(
pOldNV
->
pzName
, 
pNewNV
->pzName) > 0) {

600 
pAL
->
≠zArgs
[
iy
+1] = (*)
pOldNV
;

601 
pOldNV
 = (
tO±i⁄VÆue
*)(*)(
pAL
->
≠zArgs
[--
iy
]);

602 i‡(
iy
 < 0)

610 
pAL
->
≠zArgs
[
iy
+1] = (*)
pNewNV
;

612 
	}
}

630 
LOCAL
 
tO±i⁄VÆue
*

631 
	$›ti⁄LﬂdNe°ed
(c⁄°* 
pzTxt
, c⁄°* 
pzName
, 
size_t
 
«meLí
)

633 
tO±i⁄VÆue
* 
pRes
;

638 i‡(
pzTxt
 =
NULL
) {

639 
î∫o
 = 
EINVAL
;

640  
NULL
;

642 
	`IS_WHITESPACE_CHAR
(*
pzTxt
))ÖzTxt++;

643 i‡(*
pzTxt
 =
NUL
) {

644 
î∫o
 = 
ENOENT
;

645  
NULL
;

647 
pRes
 = 
	`AGALOC
((*pResË+ 
«meLí
 + 1, "nestedárgs");

648 i‡(
pRes
 =
NULL
) {

649 
î∫o
 = 
ENOMEM
;

650  
NULL
;

652 
pRes
->
vÆTy≥
 = 
OPARG_TYPE_HIERARCHY
;

653 
pRes
->
pzName
 = (*)(pRes + 1);

654 
	`mem˝y
(
pRes
->
pzName
,ÖzName, 
«meLí
);

655 
pRes
->
pzName
[
«meLí
] = 
NUL
;

658 
tArgLi°
 * 
pAL
 = 
	`AGALOC
((*pAL), "nestedárgÜist");

659 i‡(
pAL
 =
NULL
) {

660 
	`AGFREE
(
pRes
);

661  
NULL
;

664 
pRes
->
v
.
√°VÆ
 = 
pAL
;

665 
pAL
->
u£Ct
 = 0;

666 
pAL
->
ÆlocCt
 = 
MIN_ARG_ALLOC_CT
;

673 
	`IS_WHITESPACE_CHAR
(()*
pzTxt
))ÖzTxt++;

674 i‡(
	`IS_VAR_FIRST_CHAR
(()*
pzTxt
)) {

675 
pzTxt
 = 
	`sˇn_«me
’zTxt, 
pRes
);

677 *
pzTxt
) {

678 
NUL
: 
sˇn_d⁄e
;

679 '<': 
pzTxt
 = 
	`sˇn_xml
’zTxt, 
pRes
);

680 i‡(
pzTxt
 =
NULL
Ë
wo›s
;

681 i‡(*
pzTxt
 == ',')ÖzTxt++; ;

682 '#': 
pzTxt
 = 
	`°rchr
(pzTxt, '\n'); ;

683 : 
wo›s
;

685 } 
pzTxt
 !
NULL
); 
sˇn_d⁄e
:;

688 
tArgLi°
 * 
Æ
 = 
pRes
->
v
.
√°VÆ
;

689 i‡(
Æ
->
u£Ct
 != 0)

690 
	`s‹t_li°
(
Æ
);

693  
pRes
;

695 
wo›s
:

696 
	`AGFREE
(
pRes
->
v
.
√°VÆ
);

697 
	`AGFREE
(
pRes
);

698  
NULL
;

699 
	}
}

712 
	$›ti⁄Ne°edVÆ
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
)

714 i‡(
pO±s
 < 
OPTPROC_EMIT_LIMIT
)

717 i‡(
pOD
->
fO±Sèã
 & 
OPTST_RESET
) {

718 
tArgLi°
* 
pAL
 = 
pOD
->
›tCookõ
;

719 
˘
;

720 
tCC
 ** 
av
;

722 i‡(
pAL
 =
NULL
)

724 
˘
 = 
pAL
->
u£Ct
;

725 
av
 = 
pAL
->
≠zArgs
;

727 --
˘
 >= 0) {

728 * 
p
 = (*)*(
av
++);

729 
	`›ti⁄U∆ﬂdNe°ed
((
tO±i⁄VÆue
 c⁄° *)
p
);

732 
	`AGFREE
(
pOD
->
›tCookõ
);

735 
tO±i⁄VÆue
* 
pOV
 = 
	`›ti⁄LﬂdNe°ed
(

736 
pOD
->
›tArg
.
¨gSåög
,ÖOD->
pz_Name
, 
	`°æí
(pOD->pz_Name));

738 i‡(
pOV
 !
NULL
)

739 
	`addArgLi°E¡ry
(&(
pOD
->
›tCookõ
), (*)
pOV
);

741 
	}
}

746 
LOCAL
 

747 
	$gë_•ecül_ch¨
(c⁄° ** 
µz
, * 
˘
)

749 c⁄° * 
pz
 = *
µz
;

751 i‡(*
˘
 < 3)

754 i‡(*
pz
 == '#') {

755 
ba£
 = 10;

756 
ªtch
;

758 
pz
++;

759 i‡(*
pz
 == 'x') {

760 
ba£
 = 16;

761 
pz
++;

763 
ªtch
 = ()
	`°πoul
(
pz
, (**)&pz, 
ba£
);

764 i‡(*
pz
 != ';')

766 
ba£
 = ++
pz
 - *
µz
;

767 i‡(
ba£
 > *
˘
)

770 *
˘
 -
ba£
;

771 *
µz
 = 
pz
;

772  
ªtch
;

776 
˘r
 = (
xml_xœã
) / (xml_xlate[0]);

777 
xml_xœã_t
 c⁄° * 
xœç
 = 
xml_xœã
;

780 i‡–(*
˘
 >
xœç
->
xml_Àn
)

781 && (
	`°∫cmp
(
pz
, 
xœç
->
xml_txt
, xœç->
xml_Àn
) == 0)) {

782 *
µz
 +
xœç
->
xml_Àn
;

783 *
˘
 -
xœç
->
xml_Àn
;

784  
xœç
->
xml_ch
;

787 i‡(--
˘r
 <= 0)

789 
xœç
++;

793 
	}
}

798 
LOCAL
 

799 
	$emô_•ecül_ch¨
(
FILE
 * 
Â
, 
ch
)

801 
˘r
 = (
xml_xœã
) / (xml_xlate[0]);

802 
xml_xœã_t
 c⁄° * 
xœç
 = 
xml_xœã
;

804 
	`putc
('&', 
Â
);

806 i‡(
ch
 =
xœç
->
xml_ch
) {

807 
	`Âuts
(
xœç
->
xml_txt
, 
Â
);

810 i‡(--
˘r
 <= 0)

812 
xœç
++;

814 
	`Ârötf
(
Â
, "#x%02X;", (
ch
 & 0xFF));

815 
	}
}

	@libopts/numeric.c

41 
	$›ti⁄ShowR™ge
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
, * 
∫g_èbÀ
, 
∫g_˘
)

43 c⁄° 
buŒë
[] = "\t\t\t\t- ";

44 c⁄° 
dìpö
[] = "\t\t\t\t ";

45 c⁄° 
⁄ëab
[] = "\t";

47 c⁄° såu˘ {c⁄° 
rmö
, 
rmax
;} * 
∫g
 = 
∫g_èbÀ
;

49 c⁄° * 
pz_ödít
 =

50 (
pO±s
 !
OPTPROC_EMIT_USAGE
Ë? 
⁄ëab
 : 
buŒë
;

52 i‡((
pO±s
 =
OPTPROC_EMIT_USAGE
Ë|| (pO±†> 
OPTPROC_EMIT_LIMIT
)) {

53 c⁄° * 
lõ_ö_ønge
 = 
zR™geLõ
;

55 i‡(
pO±s
 > 
OPTPROC_EMIT_LIMIT
) {

56 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geEº
,

57 
pO±s
->
pzProgName
, 
pOD
->
pz_Name
,ÖOD->
›tArg
.
¨gSåög
);

58 
	`Ârötf
(
›ti⁄_ußge_Â
, "Thê%†›ti⁄:\n", 
pOD
->
pz_Name
);

59 
lõ_ö_ønge
 = 
zR™geBadLõ
;

60 
pz_ödít
 = "";

63 i‡(
pOD
->
fO±Sèã
 & 
OPTST_SCALED_NUM
)

64 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geSˇÀd
, 
pz_ödít
);

66 i‡(
∫g_˘
 > 1) {

67 
	`Ârötf
(
›ti⁄_ußge_Â
, 
lõ_ö_ønge
, 
pz_ödít
);

68 
pz_ödít
 =

69 (
pO±s
 !
OPTPROC_EMIT_USAGE
Ë? 
⁄ëab
 : 
dìpö
;

72 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geO∆y
, 
pz_ödít
);

73 
pz_ödít
 = 
⁄ëab
 + 1;

77 i‡(
∫g
->
rmax
 =
LONG_MIN
)

78 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geExa˘
, 
pz_ödít
, 
∫g
->
rmö
);

79 i‡(
∫g
->
rmö
 =
LONG_MIN
)

80 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geU±o
, 
pz_ödít
, 
∫g
->
rmax
);

81 i‡(
∫g
->
rmax
 =
LONG_MAX
)

82 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™geAbove
, 
pz_ödít
, 
∫g
->
rmö
);

84 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zR™ge
, 
pz_ödít
, 
∫g
->
rmö
,

85 
∫g
->
rmax
);

87 i‡(--
∫g_˘
 <= 0) {

88 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

91 
	`Âuts
(
zR™geOr
, 
›ti⁄_ußge_Â
);

92 
∫g
++;

93 
pz_ödít
 =

94 (
pO±s
 !
OPTPROC_EMIT_USAGE
Ë? 
⁄ëab
 : 
dìpö
;

97 i‡(
pO±s
 > 
OPTPROC_EMIT_LIMIT
)

98 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

100 
	}
}

114 
	$›ti⁄NumîicVÆ
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
 )

116 * 
pz
;

117 
vÆ
;

125 i‡–(
pOD
 =
NULL
)

126 || (
pOD
->
›tArg
.
¨gSåög
 =
NULL
)

127 || ((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0))

130 
î∫o
 = 0;

131 
vÆ
 = 
	`°πﬁ
(
pOD
->
›tArg
.
¨gSåög
, &
pz
, 0);

132 i‡((
pz
 =
pOD
->
›tArg
.
¨gSåög
Ë|| (
î∫o
 != 0))

133 
bad_numbî
;

135 i‡((
pOD
->
fO±Sèã
 & 
OPTST_SCALED_NUM
) != 0)

136 *(
pz
++)) {

137 '\0': 
pz
--; ;

138 't': 
vÆ
 *= 1000;

139 'g': 
vÆ
 *= 1000;

140 'm': 
vÆ
 *= 1000;

141 'k': 
vÆ
 *= 1000; ;

143 'T': 
vÆ
 *= 1024;

144 'G': 
vÆ
 *= 1024;

145 'M': 
vÆ
 *= 1024;

146 'K': 
vÆ
 *= 1024; ;

148 : 
bad_numbî
;

151 i‡(*
pz
 !
NUL
)

152 
bad_numbî
;

154 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

155 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

156 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

159 
pOD
->
›tArg
.
¨gI¡
 = 
vÆ
;

162 
bad_numbî
:

164 
	`Ârötf
–
°dîr
, 
zNŸNumbî
, 
pO±s
->
pzProgName
, 
pOD
->
›tArg
.
¨gSåög
 );

165 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0)

166 (*(
pO±s
->
pUßgeProc
))’O±s, 
EXIT_FAILURE
);

168 
pOD
->
›tArg
.
¨gI¡
 = ~0;

169 
	}
}

	@libopts/parse-duration.c

17 #i‚de‡
WIN_INCLUDE


18 
	~<c⁄fig.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<limôs.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

28 
	~"∑r£-duøti⁄.h
"

30 #i‚de‡
_


31 
	#_
(
_s
Ë
	)
_s

34 #i‚de‡
NUL


35 
	#NUL
 '\0'

	)

38 
	#cch_t
 c⁄°

	)

41 
	mNOTHING_IS_DONE
,

42 
	mYEAR_IS_DONE
,

43 
	mMONTH_IS_DONE
,

44 
	mWEEK_IS_DONE
,

45 
	mDAY_IS_DONE
,

46 
	mHOUR_IS_DONE
,

47 
	mMINUTE_IS_DONE
,

48 
	mSECOND_IS_DONE


49 } 
	twh©s_d⁄e_t
;

51 
	#SEC_PER_MIN
 60

	)

52 
	#SEC_PER_HR
 (
SEC_PER_MIN
 * 60)

	)

53 
	#SEC_PER_DAY
 (
SEC_PER_HR
 * 24)

	)

54 
	#SEC_PER_WEEK
 (
SEC_PER_DAY
 * 7)

	)

55 
	#SEC_PER_MONTH
 (
SEC_PER_DAY
 * 30)

	)

56 
	#SEC_PER_YEAR
 (
SEC_PER_DAY
 * 365)

	)

58 
	#TIME_MAX
 0x7FFFFFFF

	)

60 
ölöe


61 
	$°r_c⁄°_to_ul
 (
cch_t
 * 
°r
, cch_à** 
µz
, 
ba£
)

63  
	`°πoul
 (
°r
, (**)
µz
, 
ba£
);

64 
	}
}

66 
ölöe


67 
	$°r_c⁄°_to_l
 (
cch_t
 * 
°r
, cch_à** 
µz
, 
ba£
)

69  
	`°πﬁ
 (
°r
, (**)
µz
, 
ba£
);

70 
	}
}

72 
time_t
 
ölöe


73 
	$sˇÀ_n_add
 (
time_t
 
ba£
,Åime_à
vÆ
, 
sˇÀ
)

75 i‡(
ba£
 =
BAD_TIME
)

77 i‡(
î∫o
 == 0)

78 
î∫o
 = 
EINVAL
;

79  
BAD_TIME
;

82 i‡(
vÆ
 > 
TIME_MAX
 / 
sˇÀ
)

84 
î∫o
 = 
ERANGE
;

85  
BAD_TIME
;

88 
vÆ
 *
sˇÀ
;

89 i‡(
ba£
 > 
TIME_MAX
 - 
vÆ
)

91 
î∫o
 = 
ERANGE
;

92  
BAD_TIME
;

95  
ba£
 + 
vÆ
;

96 
	}
}

98 
time_t


99 
	$∑r£_hr_mö_£c
 (
time_t
 
°¨t
, 
cch_t
 * 
pz
)

101 
Õ˘
 = 0;

103 
î∫o
 = 0;

107 (*
pz
 =':'Ë&& (
Õ˘
++ <= 1))

109 
v
 = 
	`°r_c⁄°_to_ul
 (
pz
+1, &pz, 10);

111 i‡(
î∫o
 != 0)

112  
BAD_TIME
;

114 
°¨t
 = 
	`sˇÀ_n_add
 (
v
, start, 60);

116 i‡(
î∫o
 != 0)

117  
BAD_TIME
;

121 
	`is•a˚
 (()*
pz
))Öz++;

122 i‡(*
pz
 !
NUL
)

124 
î∫o
 = 
EINVAL
;

125  
BAD_TIME
;

128  
°¨t
;

129 
	}
}

131 
time_t


132 
	$∑r£_sˇÀd_vÆue
 (
time_t
 
ba£
, 
cch_t
 ** 
µz
, cch_à* 
ídp
, 
sˇÀ
)

134 
cch_t
 * 
pz
 = *
µz
;

135 
time_t
 
vÆ
;

137 i‡(
ba£
 =
BAD_TIME
)

138  
ba£
;

140 
î∫o
 = 0;

141 
vÆ
 = 
	`°r_c⁄°_to_ul
 (
pz
, &pz, 10);

142 i‡(
î∫o
 != 0)

143  
BAD_TIME
;

144 
	`is•a˚
 (()*
pz
))Öz++;

145 i‡(
pz
 !
ídp
)

147 
î∫o
 = 
EINVAL
;

148  
BAD_TIME
;

151 *
µz
 = 
pz
;

152  
	`sˇÀ_n_add
 (
ba£
, 
vÆ
, 
sˇÀ
);

153 
	}
}

155 
time_t


156 
	$∑r£_yór_m⁄th_day
 (
cch_t
 * 
pz
, cch_à* 
ps
)

158 
time_t
 
ªs
 = 0;

160 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
ps
, 
SEC_PER_YEAR
);

162 
ps
 = 
	`°rchr
 (++
pz
, '-');

163 i‡(
ps
 =
NULL
)

165 
î∫o
 = 
EINVAL
;

166  
BAD_TIME
;

168 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_MONTH
);

170 
pz
++;

171 
ps
 = 
pz
 + 
	`°æí
 (pz);

172  
	`∑r£_sˇÀd_vÆue
 (
ªs
, &
pz
, 
ps
, 
SEC_PER_DAY
);

173 
	}
}

175 
time_t


176 
	$∑r£_yórm⁄thday
 (
cch_t
 * 
ö_pz
)

178 
time_t
 
ªs
 = 0;

179 
buf
[8];

180 
cch_t
 * 
pz
;

182 i‡(
	`°æí
 (
ö_pz
) != 8)

184 
î∫o
 = 
EINVAL
;

185  
BAD_TIME
;

188 
	`mem˝y
 (
buf
, 
ö_pz
, 4);

189 
buf
[4] = 
NUL
;

190 
pz
 = 
buf
;

191 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
buf
 + 4, 
SEC_PER_YEAR
);

193 
	`mem˝y
 (
buf
, 
ö_pz
 + 4, 2);

194 
buf
[2] = 
NUL
;

195 
pz
 = 
buf
;

196 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
buf
 + 2, 
SEC_PER_MONTH
);

198 
	`mem˝y
 (
buf
, 
ö_pz
 + 6, 2);

199 
buf
[2] = 
NUL
;

200 
pz
 = 
buf
;

201  
	`∑r£_sˇÀd_vÆue
 (
ªs
, &
pz
, 
buf
 + 2, 
SEC_PER_DAY
);

202 
	}
}

204 
time_t


205 
	$∑r£_YMWD
 (
cch_t
 * 
pz
)

207 
time_t
 
ªs
 = 0;

208 
cch_t
 * 
ps
 = 
	`°rchr
 (
pz
, 'Y');

209 i‡(
ps
 !
NULL
)

211 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
ps
, 
SEC_PER_YEAR
);

212 
pz
++;

215 
ps
 = 
	`°rchr
 (
pz
, 'M');

216 i‡(
ps
 !
NULL
)

218 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_MONTH
);

219 
pz
++;

222 
ps
 = 
	`°rchr
 (
pz
, 'W');

223 i‡(
ps
 !
NULL
)

225 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_WEEK
);

226 
pz
++;

229 
ps
 = 
	`°rchr
 (
pz
, 'D');

230 i‡(
ps
 !
NULL
)

232 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_DAY
);

233 
pz
++;

236 
	`is•a˚
 (()*
pz
))Öz++;

237 i‡(*
pz
 !
NUL
)

239 
î∫o
 = 
EINVAL
;

240  
BAD_TIME
;

243  
ªs
;

244 
	}
}

246 
time_t


247 
	$∑r£_hour_möuã_£c⁄d
 (
cch_t
 * 
pz
, cch_à* 
ps
)

249 
time_t
 
ªs
 = 0;

251 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
ps
, 
SEC_PER_HR
);

253 
ps
 = 
	`°rchr
 (++
pz
, ':');

254 i‡(
ps
 =
NULL
)

256 
î∫o
 = 
EINVAL
;

257  
BAD_TIME
;

260 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_MIN
);

262 
pz
++;

263 
ps
 = 
pz
 + 
	`°æí
 (pz);

264  
	`∑r£_sˇÀd_vÆue
 (
ªs
, &
pz
, 
ps
, 1);

265 
	}
}

267 
time_t


268 
	$∑r£_hourmöuã£c⁄d
 (
cch_t
 * 
ö_pz
)

270 
time_t
 
ªs
 = 0;

271 
buf
[4];

272 
cch_t
 * 
pz
;

274 i‡(
	`°æí
 (
ö_pz
) != 6)

276 
î∫o
 = 
EINVAL
;

277  
BAD_TIME
;

280 
	`mem˝y
 (
buf
, 
ö_pz
, 2);

281 
buf
[2] = 
NUL
;

282 
pz
 = 
buf
;

283 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
buf
 + 2, 
SEC_PER_HR
);

285 
	`mem˝y
 (
buf
, 
ö_pz
 + 2, 2);

286 
buf
[2] = 
NUL
;

287 
pz
 = 
buf
;

288 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
buf
 + 2, 
SEC_PER_MIN
);

290 
	`mem˝y
 (
buf
, 
ö_pz
 + 4, 2);

291 
buf
[2] = 
NUL
;

292 
pz
 = 
buf
;

293  
	`∑r£_sˇÀd_vÆue
 (
ªs
, &
pz
, 
buf
 + 2, 1);

294 
	}
}

296 
time_t


297 
	$∑r£_HMS
 (
cch_t
 * 
pz
)

299 
time_t
 
ªs
 = 0;

300 
cch_t
 * 
ps
 = 
	`°rchr
 (
pz
, 'H');

301 i‡(
ps
 !
NULL
)

303 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (0, &
pz
, 
ps
, 
SEC_PER_HR
);

304 
pz
++;

307 
ps
 = 
	`°rchr
 (
pz
, 'M');

308 i‡(
ps
 !
NULL
)

310 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 
SEC_PER_MIN
);

311 
pz
++;

314 
ps
 = 
	`°rchr
 (
pz
, 'S');

315 i‡(
ps
 !
NULL
)

317 
ªs
 = 
	`∑r£_sˇÀd_vÆue
 (ªs, &
pz
, 
ps
, 1);

318 
pz
++;

321 
	`is•a˚
 (()*
pz
))Öz++;

322 i‡(*
pz
 !
NUL
)

324 
î∫o
 = 
EINVAL
;

325  
BAD_TIME
;

328  
ªs
;

329 
	}
}

331 
time_t


332 
	$∑r£_time
 (
cch_t
 * 
pz
)

334 
cch_t
 * 
ps
;

335 
time_t
 
ªs
 = 0;

340 
ps
 = 
	`°rchr
 (
pz
, ':');

341 i‡(
ps
 !
NULL
)

343 
ªs
 = 
	`∑r£_hour_möuã_£c⁄d
 (
pz
, 
ps
);

349 i‡(
ps
 = 
	`°Ωbrk
 (
pz
, "HMS"),

350 
ps
 =
NULL
)

353 
ªs
 = 
	`∑r£_hourmöuã£c⁄d
 (
pz
);

357 
ªs
 = 
	`∑r£_HMS
 (
pz
);

359  
ªs
;

360 
	}
}

363 
	$åim
(* 
pz
)

366 
	`is•a˚
 (()*
pz
))Öz++;

370 * 
≥
 = 
pz
 + 
	`°æí
 (pz);

371 (
≥
 > 
pz
Ë&& 
	`is•a˚
 (()pe[-1]))Öe--;

372 *
≥
 = 
NUL
;

375  
pz
;

376 
	}
}

381 
time_t


382 
	$∑r£_≥riod
 (
cch_t
 * 
ö_pz
)

384 * 
pz
 = 
	`x°rdup
 (
ö_pz
);

385 * 
pT
 = 
	`°rchr
 (
pz
, 'T');

386 * 
ps
;

387 * 
Âå
 = 
pz
;

388 
time_t
 
ªs
 = 0;

390 i‡(
pT
 !
NUL
)

392 *(
pT
++Ë
NUL
;

393 
pz
 = 
	`åim
 (pz);

394 
pT
 = 
	`åim
 (pT);

400 
ps
 = 
	`°rchr
 (
pz
, '-');

401 i‡(
ps
 !
NULL
)

403 
ªs
 = 
	`∑r£_yór_m⁄th_day
 (
pz
, 
ps
);

409 i‡(
ps
 = 
	`°Ωbrk
 (
pz
, "YMWD"),

410 
ps
 =
NULL
)

413 
ªs
 = 
	`∑r£_yórm⁄thday
 (
pz
);

417 
ªs
 = 
	`∑r£_YMWD
 (
pz
);

419 i‡((
î∫o
 =0Ë&& (
pT
 !
NULL
))

421 
time_t
 
vÆ
 = 
	`∑r£_time
 (
pT
);

422 
ªs
 = 
	`sˇÀ_n_add
 (ªs, 
vÆ
, 1);

425 
	`‰ì
 (
Âå
);

426  
ªs
;

427 
	}
}

429 
time_t


430 
	$∑r£_n⁄_iso8601
(
cch_t
 * 
pz
)

432 
wh©s_d⁄e_t
 
wh©d_we_do
 = 
NOTHING_IS_DONE
;

434 
time_t
 
ªs
 = 0;

437 
time_t
 
vÆ
;

439 
î∫o
 = 0;

440 
vÆ
 = 
	`°r_c⁄°_to_l
 (
pz
, &pz, 10);

441 i‡(
î∫o
 != 0)

442 
bad_time
;

448 i‡(*
pz
 == ':')

450 i‡(
wh©d_we_do
 >
MINUTE_IS_DONE
)

453 
vÆ
 = 
	`∑r£_hr_mö_£c
 (vÆ, 
pz
);

455 i‡((
wh©d_we_do
 =
HOUR_IS_DONE
Ë&& (
vÆ
 >
SEC_PER_HR
))

458  
	`sˇÀ_n_add
 (
ªs
, 
vÆ
, 1);

462 
mu…
;

465 
	`is•a˚
 (()*
pz
))Öz++;

467 *
pz
)

469 : 
bad_time
;

470 
NUL
:

471  
	`sˇÀ_n_add
 (
ªs
, 
vÆ
, 1);

474 i‡(
wh©d_we_do
 >
YEAR_IS_DONE
)

475 
bad_time
;

476 
mu…
 = 
SEC_PER_YEAR
;

477 
wh©d_we_do
 = 
YEAR_IS_DONE
;

481 i‡(
wh©d_we_do
 >
MONTH_IS_DONE
)

482 
bad_time
;

483 
mu…
 = 
SEC_PER_MONTH
;

484 
wh©d_we_do
 = 
MONTH_IS_DONE
;

488 i‡(
wh©d_we_do
 >
WEEK_IS_DONE
)

489 
bad_time
;

490 
mu…
 = 
SEC_PER_WEEK
;

491 
wh©d_we_do
 = 
WEEK_IS_DONE
;

495 i‡(
wh©d_we_do
 >
DAY_IS_DONE
)

496 
bad_time
;

497 
mu…
 = 
SEC_PER_DAY
;

498 
wh©d_we_do
 = 
DAY_IS_DONE
;

502 i‡(
wh©d_we_do
 >
HOUR_IS_DONE
)

503 
bad_time
;

504 
mu…
 = 
SEC_PER_HR
;

505 
wh©d_we_do
 = 
HOUR_IS_DONE
;

509 i‡(
wh©d_we_do
 >
MINUTE_IS_DONE
)

510 
bad_time
;

511 
mu…
 = 
SEC_PER_MIN
;

512 
wh©d_we_do
 = 
MINUTE_IS_DONE
;

516 
mu…
 = 1;

517 
wh©d_we_do
 = 
SECOND_IS_DONE
;

521 
ªs
 = 
	`sˇÀ_n_add
 (ªs, 
vÆ
, 
mu…
);

523 
	`is•a˚
 (()*++
pz
)) ;

524 i‡(*
pz
 =
NUL
)

525  
ªs
;

527 i‡(! 
	`isdigô
 (()*
pz
))

531 } 
wh©d_we_do
 < 
SECOND_IS_DONE
);

533 
bad_time
:

534 
î∫o
 = 
EINVAL
;

535  
BAD_TIME
;

536 
	}
}

538 
time_t


539 
	$∑r£_duøti⁄
 (c⁄° * 
pz
)

541 
time_t
 
ªs
 = 0;

543 
	`is•a˚
 (()*
pz
))Öz++;

546 i‡(*
pz
 == 'P')

548 
ªs
 = 
	`∑r£_≥riod
 (
pz
 + 1);

549 i‡((
î∫o
 !0Ë|| (
ªs
 =
BAD_TIME
))

551  
ªs
;

554 i‡(*
pz
 == 'T')

556 
ªs
 = 
	`∑r£_time
 (
pz
 + 1);

557 i‡((
î∫o
 !0Ë|| (
ªs
 =
BAD_TIME
))

559  
ªs
;

562 i‡(! 
	`isdigô
 (()*
pz
))

565 
ªs
 = 
	`∑r£_n⁄_iso8601
 (
pz
);

566 i‡((
î∫o
 =0Ë&& (
ªs
 !
BAD_TIME
))

567  
ªs
;

571 
	`Ârötf
 (
°dîr
, 
	`_
("InvÆidÅimêduøti⁄: %s\n"), 
pz
);

572 i‡(
î∫o
 == 0)

573 
î∫o
 = 
EINVAL
;

574  
BAD_TIME
;

575 
	}
}

	@libopts/parse-duration.h

73 #i‚de‡
GNULIB_PARSE_DURATION_H


74 
	#GNULIB_PARSE_DURATION_H


	)

76 
	~<time.h
>

78 
	#BAD_TIME
 ((
time_t
)~0)

	)

80 
time_t
 
∑r£_duøti⁄
(c⁄° * 
ö_pz
);

	@libopts/pgusage.c

33 
ãPagîSèã
 
	g∑gîSèã
 = 
PAGER_STATE_INITIAL
;

48 
	$›ti⁄PagedUßge
(
tO±i⁄s
* 
pO±i⁄s
, 
tO±Desc
* 
pOD
)

50 #i‡! 
	`deföed
(
HAVE_WORKING_FORK
)

51 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

54 (*
pO±i⁄s
->
pUßgeProc
)’O±i⁄s, 
EXIT_SUCCESS
);

56 
pid_t
 
my_pid
;

57 
zPageUßge
[ 1024 ];

64 
∑gîSèã
) {

65 
PAGER_STATE_INITIAL
:

67 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

70 
my_pid
 = 
	`gëpid
();

71 #ifde‡
HAVE_SNPRINTF


72 
	`¢¥ötf
(
zPageUßge
, (zPageUßge), "/tmp/u£.%lu", (
tAoUL
)
my_pid
);

74 
	`•rötf
(
zPageUßge
, "/tmp/u£.%lu", (
tAoUL
)
my_pid
);

76 
	`u∆ök
(
zPageUßge
);

81 
›ti⁄_ußge_Â
 = 
	`f›í
(
zPageUßge
, "w" 
FOPEN_BINARY_FLAG
);

82 i‡(
›ti⁄_ußge_Â
 =
NULL
)

83 
	`_exô
(
EXIT_FAILURE
);

85 
∑gîSèã
 = 
PAGER_STATE_READY
;

90 
	`©exô
(((*)())
›ti⁄PagedUßge
);

96 (*
pO±i⁄s
->
pUßgeProc
)’O±i⁄s, 
EXIT_SUCCESS
);

99 
	`_exô
(
EXIT_FAILURE
);

102 
PAGER_STATE_READY
:

104 
tSCC
 
zPage
[] = "%1$s /tmp/use.%2$lu ;Ñm -f /tmp/use.%2$lu";

105 
tCC
* 
pzPagî
 = (tCC*)
	`gëív
("PAGER");

110 i‡(
pzPagî
 =
NULL
)

111 
pzPagî
 = "more";

116 #ifde‡
HAVE_SNPRINTF


117 
	`¢¥ötf
(
zPageUßge
, (zPageUßge), 
zPage
, 
pzPagî
, (
tAoUL
)
my_pid
);

119 
	`•rötf
(
zPageUßge
, 
zPage
, 
pzPagî
, (
tAoUL
)
my_pid
);

121 
	`f˛o£
(
°dîr
);

122 
	`dup2
(
STDOUT_FILENO
, 
STDERR_FILENO
);

124 ()
	`sy°em
(
zPageUßge
);

127 
PAGER_STATE_CHILD
:

134 
	}
}

	@libopts/proto.h

6 #i‚de‡
AUTOOPTS_PROTO_H_GUARD


7 
	#AUTOOPTS_PROTO_H_GUARD
 1

	)

9 #i‚de‡
LOCAL


10 
	#LOCAL
 

	)

11 
	#REDEF_LOCAL
 1

	)

13 #unde‡
REDEF_LOCAL


18 
LOCAL
 *

19 
ao_mÆloc
(
size_t
 
sz
);

21 
LOCAL
 *

22 
ao_ªÆloc
(*
p
, 
size_t
 
sz
);

24 
LOCAL
 

25 
ao_‰ì
(*
p
);

27 
LOCAL
 *

28 
ao_°rdup
(c⁄° *
°r
);

30 
LOCAL
 
tSuc˚ss


31 
h™dÀO±i⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Sèã
* 
pO±Sèã
);

33 
LOCAL
 
tSuc˚ss


34 
l⁄gO±i⁄Föd
(
tO±i⁄s
* 
pO±s
, * 
pzO±Name
, 
tO±Sèã
* 
pO±Sèã
);

36 
LOCAL
 
tSuc˚ss


37 
sh‹tO±i⁄Föd
(
tO±i⁄s
* 
pO±s
, 
uöt_t
 
›tVÆue
, 
tO±Sèã
* 
pO±Sèã
);

39 
LOCAL
 
tSuc˚ss


40 
doImmedüãO±s
(
tO±i⁄s
* 
pO±s
);

42 
LOCAL
 
tSuc˚ss


43 
doReguœrO±s
(
tO±i⁄s
* 
pO±s
);

48 
LOCAL
 

49 
öã∫ÆFûeLﬂd
(
tO±i⁄s
* 
pO±s
);

51 
LOCAL
 *

52 
∑r£Aâribuãs
(

53 
tO±i⁄s
* 
pO±s
,

54 * 
pzText
,

55 
tO±i⁄LﬂdMode
* 
pMode
,

56 
tO±i⁄VÆue
* 
pTy≥
 );

58 
LOCAL
 
tSuc˚ss


59 
vÆid©eO±i⁄sSåu˘
(
tO±i⁄s
* 
pO±s
, c⁄°* 
pzProgøm
);

64 
LOCAL
 

65 
doProg«meEnv
(
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
);

67 
LOCAL
 

68 
doEnvPª£ts
(
tO±i⁄s
* 
pO±s
, 
ãEnvPª£tTy≥
 
ty≥
);

73 
LOCAL
 

74 
mungeSåög
(* 
pzTxt
, 
tO±i⁄LﬂdMode
 
mode
);

76 
LOCAL
 

77 
lﬂdO±i⁄Löe
(

78 
tO±i⁄s
* 
pO±s
,

79 
tO±Sèã
* 
pOS
,

80 * 
pzLöe
,

81 
tDúe˘i⁄
 
dúe˘i⁄
,

82 
tO±i⁄LﬂdMode
 
lﬂd_mode
 );

87 
LOCAL
 

88 
u∆ﬂd_¨g_li°
(
tArgLi°
* 
pAL
);

90 
LOCAL
 
tO±i⁄VÆue
*

91 
›ti⁄LﬂdNe°ed
(c⁄°* 
pzTxt
, c⁄°* 
pzName
, 
size_t
 
«meLí
);

93 
LOCAL
 

94 
gë_•ecül_ch¨
(c⁄° ** 
µz
, * 
˘
);

96 
LOCAL
 

97 
emô_•ecül_ch¨
(
FILE
 * 
Â
, 
ch
);

102 
LOCAL
 

103 
›ti⁄S‹t
(
tO±i⁄s
* 
pO±s
);

108 
LOCAL
 

109 
addArgLi°E¡ry
(** 
µAL
, * 
íåy
);

111 #ifde‡
REDEF_LOCAL


112 #unde‡
LOCAL


113 
	#LOCAL


	)

	@libopts/putshell.c

31 c⁄° 
	gzO±VÆFmt
[] = "%s_%s=";

32 c⁄° 
	gzO±End
[] = "\nexport %s_%s\n";

33 c⁄° 
	gzO±NumFmt
[] = "%1$s_%2$s=%3$d # 0x%3$X\nexport %1$s_%2$s\n";

37 
¥öt_quŸ_°r
(
tCC
* 
pzSå
);

40 
¥öt_íumî©i⁄
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
);

43 
¥öt_membîshù
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
);

46 
¥öt_°acked_¨g
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
);

49 
¥öt_ª‹dîög
(
tO±i⁄s
 * 
pO±s
);

57 
	$¥öt_quŸ_°r
(
tCC
* 
pzSå
)

62 i‡((
pzSå
 =
NULL
Ë|| (*pzSå =
NUL
)) {

63 
	`Âuts
("''", 
°dout
);

71 *
pzSå
 == '\'') {

72 
	`Âuts
("\\'", 
°dout
);

73 
pzSå
++;

75 i‡(*
pzSå
 =
NUL
)

81 
	`Âutc
('\'', 
°dout
);

83 
tCC
* 
pz
 = 
	`°rchr
(
pzSå
, '\'');

84 i‡(
pz
 =
NULL
)

90 ()
	`fwrôe
(
pzSå
, (
size_t
)(
pz
 -ÖzSå), (size_t)1, 
°dout
);

91 
	`Âutc
('\'', 
°dout
);

92 
pzSå
 = 
pz
;

98 *++
pzSå
 ='\''Ë
	`Âuts
("\\'", 
°dout
);

99 i‡(*
pzSå
 =
NUL
)

102 
	`Âutc
('\'', 
°dout
);

109 
	`Âuts
(
pzSå
, 
°dout
);

110 
	`Âutc
('\'', 
°dout
);

111 
	}
}

114 
	$¥öt_íumî©i⁄
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
)

116 
uöçå_t
 
e_vÆ
 = 
pOD
->
›tArg
.
¨gEnum
;

117 
	`¥ötf
(
zO±VÆFmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
);

122 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
,ÖOD);

123 
	`¥ötf
("'%s'", 
pOD
->
›tArg
.
¨gSåög
);

124 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
)

125 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

126 
pOD
->
›tArg
.
¨gEnum
 = 
e_vÆ
;

128 
	`¥ötf
(
zO±End
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
);

129 
	}
}

132 
	$¥öt_membîshù
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
)

134 c⁄° * 
pz
;

135 
uöçå_t
 
vÆ
 = 1;

136 
	`¥ötf
(
zO±NumFmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

137 ()(
uöçå_t
)(
pOD
->
›tCookõ
));

138 
pOD
->
›tCookõ
 = (*)(
uöçå_t
)~0UL;

139 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
,ÖOD);

145 
pz
 = 
pOD
->
›tArg
.
¨gSåög
 + 7;

146 *
pz
 !
NUL
) {

147 
	`¥ötf
("ty≥£à-x -ò%s_", 
pOD
->
pz_NAME
);

148 
	`IS_PLUS_N_SPACE_CHAR
(*
pz
))Öz++;

151 
ch
 = *(
pz
++);

152 i‡(
	`IS_LOWER_CASE_CHAR
(
ch
)Ë
	`Âutc
(
	`touµî
(ch), 
°dout
);

153 i‡(
	`IS_UPPER_CASE_CHAR
(
ch
)Ë
	`Âutc
(ch, 
°dout
);

154 i‡(
	`IS_PLUS_N_SPACE_CHAR
(
ch
)Ë
«me_d⁄e
;

155 i‡(
ch
 =
NUL
Ë{ 
pz
--; 
«me_d⁄e
; }

156 
	`Âutc
('_', 
°dout
);

157 } 
«me_d⁄e
:;

158 
	`¥ötf
("=%1$lu # 0x%1$lX\n", ()
vÆ
);

159 
vÆ
 <<= 1;

162 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

163 
pOD
->
›tArg
.
¨gSåög
 = 
NULL
;

164 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

165 
	}
}

168 
	$¥öt_°acked_¨g
(
tO±i⁄s
 * 
pO±s
, 
tO±Desc
 * 
pOD
)

170 
tSCC
 
zO±CookõCt
[] = "%1$s_%2$s_CT=%3$d\nexport %1$s_%2$s_CT\n";

172 
tArgLi°
* 
pAL
 = (tArgLi°*)
pOD
->
›tCookõ
;

173 
tCC
** 
µz
 = 
pAL
->
≠zArgs
;

174 
˘
 = 
pAL
->
u£Ct
;

176 
	`¥ötf
(
zO±CookõCt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
, 
˘
);

178 --
˘
 >= 0) {

179 
tSCC
 
num¨g_z
[] = "%s_%s_%d=";

180 
tSCC
 
íd_z
[] = "\nexport %s_%s_%d\n";

182 
	`¥ötf
(
num¨g_z
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

183 
pAL
->
u£Ct
 - 
˘
);

184 
	`¥öt_quŸ_°r
(*(
µz
++));

185 
	`¥ötf
(
íd_z
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

186 
pAL
->
u£Ct
 - 
˘
);

188 
	}
}

191 
	$¥öt_ª‹dîög
(
tO±i⁄s
 * 
pO±s
)

193 
›tIx
;

195 
	`Âuts
("£à--", 
°dout
);

197 
›tIx
 = 
pO±s
->
curO±Idx
; o±Ix <ÖO±s->
‹igArgCt
; optIx++) {

199 * 
pzArg
 = 
pO±s
->
‹igArgVe˘
[ 
›tIx
 ];

201 i‡(
	`°rchr
(
pzArg
, '\''Ë=
NULL
)

202 
	`¥ötf
(" '%s'", 
pzArg
);

205 
	`Âuts
(" '", 
°dout
);

207 
ch
 = *(
pzArg
++);

208 
ch
) {

209 '\'': 
	`Âuts
("'\\''", 
°dout
); ;

210 
NUL
: 
¨g_d⁄e
;

211 : 
	`Âutc
(
ch
, 
°dout
); ;

213 } 
¨g_d⁄e
:;

214 
	`Âutc
('\'', 
°dout
);

217 
	`Âuts
("\nOPTION_CT=0\n", 
°dout
);

218 
	}
}

228 
	$›ti⁄PutShñl
(
tO±i⁄s
* 
pO±s
)

230 
›tIx
 = 0;

231 
tSCC
 
zO±CtFmt
[] = "OPTION_CT=%d\nexport OPTION_CT\n";

232 
tSCC
 
zO±Dißbl
[] = "%1$s_%2$s=%3$s\nexport %1$s_%2$s\n";

233 
tSCC
 
zFuŒO±Fmt
[]= "%1$s_%2$s='%3$s'\nexport %1$s_%2$s\n";

234 
tSCC
 
zEquivMode
[] = "%1$s_%2$s_MODE='%3$s'\nexport %1$s_%2$s_MODE\n";

236 
	`¥ötf
(
zO±CtFmt
, 
pO±s
->
curO±Idx
-1);

239 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
 + 
›tIx
;

241 i‡(
	`SKIP_OPT
(
pOD
))

251 i‡(
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
)

259 i‡(
pOD
->
›tA˘uÆIndex
 !
›tIx
) {

260 
tO±Desc
* 
p
 = 
pO±s
->
pO±Desc
 + 
pOD
->
›tA˘uÆIndex
;

261 
p
->
›tArg
 = 
pOD
->optArg;

262 
p
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

263 
p
->
fO±Sèã
 |
pOD
->fO±Sèã & ~
OPTST_PERSISTENT_MASK
;

264 
	`¥ötf
(
zEquivMode
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
, 
p
->pz_NAME);

265 
pOD
 = 
p
;

273 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_MEMBERSHIP
) {

274 
	`¥öt_membîshù
(
pO±s
, 
pOD
);

284 i‡(
	`UNUSED_OPT
(
pOD
Ë&& 
	`DISABLED_OPT
(pOD)) {

291 i‡–(
pOD
->
fO±Sèã
 & 
OPTST_STACKED
)

292 && (
pOD
->
›tCookõ
 !
NULL
) ) {

293 
	`¥öt_°acked_¨g
(
pO±s
, 
pOD
);

301 i‡((
pOD
->
fO±Sèã
 & 
OPTST_DISABLED
) != 0) {

302 
	`¥ötf
(
zO±Dißbl
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

303 (
pOD
->
pz_DißbÀPfx
 !
NULL
)

304 ? 
pOD
->
pz_DißbÀPfx
 : "false");

312 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_NUMERIC
) {

313 
	`¥ötf
(
zO±NumFmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

314 ()
pOD
->
›tArg
.
¨gI¡
);

323 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_ENUMERATION
) {

324 
	`¥öt_íumî©i⁄
(
pO±s
, 
pOD
);

332 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_BOOLEAN
) {

333 
	`¥ötf
(
zFuŒO±Fmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

334 (
pOD
->
›tArg
.
¨gBoﬁ
 == 0) ? "false" : "true");

342 i‡–(
pOD
->
›tArg
.
¨gSåög
 =
NULL
)

343 || (
pOD
->
›tArg
.
¨gSåög
[0] =
NUL
) ) {

345 
	`¥ötf
(
zO±NumFmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
,

346 
pOD
->
›tOccCt
);

353 
	`¥ötf
(
zO±VÆFmt
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
);

354 
	`¥öt_quŸ_°r
(
pOD
->
›tArg
.
¨gSåög
);

355 
	`¥ötf
(
zO±End
, 
pO±s
->
pzPROGNAME
, 
pOD
->
pz_NAME
);

357 } ++
›tIx
 < 
pO±s
->
¥e£tO±Ct
 );

359 i‡–((
pO±s
->
fO±Së
 & 
OPTPROC_REORDER
) != 0)

360 && (
pO±s
->
curO±Idx
 <ÖO±s->
‹igArgCt
))

361 
	`¥öt_ª‹dîög
(
pO±s
);

363 
	`fÊush
(
°dout
);

364 
	}
}

	@libopts/reset.c

29 
	$›ti⁄Re£t
–
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
 )

31 
pOD
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

32 
pOD
->
fO±Sèã
 |
OPTST_RESET
;

33 i‡(
pOD
->
pO±Proc
 !
NULL
)

34 
pOD
->
	`pO±Proc
(
pO±s
,ÖOD);

35 
pOD
->
›tArg
.
¨gSåög
 =

36 
pO±s
->
‹igöÆO±ArgAºay
[ 
pOD
->
›tIndex
 ].
¨gSåög
;

37 
pOD
->
›tCookõ
 = 
pO±s
->
‹igöÆO±ArgCookõ
[ÖOD->
›tIndex
 ];

38 
pOD
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

39 
	}
}

43 
	$›ti⁄Re£tEvîythög
(
tO±i⁄s
 * 
pO±s
)

45 
tO±Desc
 * 
pOD
 = 
pO±s
->
pO±Desc
;

46 
˘
 = 
pO±s
->
¥e£tO±Ct
;

49 
	`›ti⁄Re£t
(
pO±s
, 
pOD
);

51 i‡(--
˘
 <= 0)

53 
pOD
++;

55 
	}
}

70 
	$›ti⁄Re£tO±
–
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
 )

72 
ag_boﬁ
 
ª£t_a˘ive
 = 
AG_FALSE
;

74 
tO±Sèã
 
›t_°©e
 = 
	`OPTSTATE_INITIALIZER
(
DEFINED
);

75 c⁄° * 
pzArg
 = 
pOD
->
›tArg
.
¨gSåög
;

76 
tSuc˚ss
 
succ
;

78 i‡(
ª£t_a˘ive
)

81 i‡–(! 
	`HAS_‹igöÆO±ArgAºay
(
pO±s
))

82 || (
pO±s
->
‹igöÆO±ArgCookõ
 =
NULL
)) {

83 
	`Âuts
(
zRe£tNŸC⁄fig
, 
°dîr
);

84 
	`_exô
(
EX_SOFTWARE
);

87 i‡((
pzArg
 =
NULL
Ë|| (*pzArg =
NUL
)) {

88 
	`Âuts
(
zNoRe£tArg
, 
°dîr
);

89 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

91 
	`as£π
(0 == 1);

94 
ª£t_a˘ive
 = 
AG_TRUE
;

96 i‡(
pzArg
[1] =
NUL
) {

97 i‡(*
pzArg
 == '*') {

98 
	`›ti⁄Re£tEvîythög
(
pO±s
);

99 
ª£t_a˘ive
 = 
AG_FALSE
;

103 
succ
 = 
	`sh‹tO±i⁄Föd
(
pO±s
, (
tAoUC
)*
pzArg
, &
›t_°©e
);

104 i‡(! 
	`SUCCESSFUL
(
succ
)) {

105 
	`Ârötf
(
°dîr
, 
zIŒO±Chr
, 
pO±s
->
pzProgP©h
, *
pzArg
);

106 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

108 
	`as£π
(0 == 1);

111 
succ
 = 
	`l⁄gO±i⁄Föd
(
pO±s
, (*)
pzArg
, &
›t_°©e
);

112 i‡(! 
	`SUCCESSFUL
(
succ
)) {

113 
	`Ârötf
(
°dîr
, 
zIŒO±Så
, 
pO±s
->
pzProgP©h
, 
pzArg
);

114 
pO±s
->
	`pUßgeProc
’O±s, 
EXIT_FAILURE
);

116 
	`as£π
(0 == 1);

126 
	`›ti⁄Re£t
(
pO±s
, 
›t_°©e
.
pOD
);

127 
ª£t_a˘ive
 = 
AG_FALSE
;

128 
	}
}

	@libopts/restore.c

39 
	$fixupSavedO±i⁄Args
(
tO±i⁄s
* 
pO±s
)

41 
tO±i⁄s
* 
p
 = 
pO±s
->
pSavedSèã
;

42 
tO±Desc
* 
pOD
 = 
pO±s
->
pO±Desc
;

43 
˘
 = 
pO±s
->
›tCt
;

49 ; 
˘
-- > 0; 
pOD
++) {

50 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

51 
OPARG_TYPE_STRING
:

52 i‡(
pOD
->
fO±Sèã
 & 
OPTST_STACKED
) {

53 
tO±Desc
* 
q
 = 
p
->
pO±Desc
 + (
pOD
 - 
pO±s
->pOptDesc);

54 
q
->
›tCookõ
 = 
NULL
;

56 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

57 
tO±Desc
* 
q
 = 
p
->
pO±Desc
 + (
pOD
 - 
pO±s
->pOptDesc);

58 
	`AGDUPSTR
(
q
->
›tArg
.
¨gSåög
, 
pOD
->optArg.argString, "arg");

62 
OPARG_TYPE_HIERARCHY
:

64 
tO±Desc
* 
q
 = 
p
->
pO±Desc
 + (
pOD
 - 
pO±s
->pOptDesc);

65 
q
->
›tCookõ
 = 
NULL
;

69 
	}
}

95 
	$›ti⁄SaveSèã
(
tO±i⁄s
* 
pO±s
)

97 
tO±i⁄s
* 
p
 = (tO±i⁄s*)
pO±s
->
pSavedSèã
;

99 i‡(
p
 =
NULL
) {

100 
size_t
 
sz
 = (*
pO±s
Ë+ (pO±s->
›tCt
 * (
tO±Desc
));

101 
p
 = 
	`AGALOC
(
sz
, "saved option state");

102 i‡(
p
 =
NULL
) {

103 
tCC
* 
pzName
 = 
pO±s
->
pzProgName
;

104 i‡(
pzName
 =
NULL
) {

105 
pzName
 = 
pO±s
->
pzPROGNAME
;

106 i‡(
pzName
 =
NULL
)

107 
pzName
 = 
zNû
;

109 
	`Ârötf
(
°dîr
, 
zC™tSave
, 
pzName
, 
sz
);

110 
	`exô
(
EXIT_FAILURE
);

113 
pO±s
->
pSavedSèã
 = 
p
;

116 
	`mem˝y
(
p
, 
pO±s
, (*p));

117 
	`mem˝y
(
p
 + 1, 
pO±s
->
pO±Desc
,Ö->
›tCt
 * (
tO±Desc
));

119 
	`fixupSavedO±i⁄Args
(
pO±s
);

120 
	}
}

139 
	$›ti⁄Re°‹e
(
tO±i⁄s
* 
pO±s
)

141 
tO±i⁄s
* 
p
 = (tO±i⁄s*)
pO±s
->
pSavedSèã
;

143 i‡(
p
 =
NULL
) {

144 
tCC
* 
pzName
 = 
pO±s
->
pzProgName
;

145 i‡(
pzName
 =
NULL
) {

146 
pzName
 = 
pO±s
->
pzPROGNAME
;

147 i‡(
pzName
 =
NULL
)

148 
pzName
 = 
zNû
;

150 
	`Ârötf
(
°dîr
, 
zNoSèã
, 
pzName
);

151 
	`exô
(
EXIT_FAILURE
);

154 
pO±s
->
pSavedSèã
 = 
NULL
;

155 
	`›ti⁄Fªe
(
pO±s
);

157 
	`mem˝y
(
pO±s
, 
p
, (*p));

158 
	`mem˝y
(
pO±s
->
pO±Desc
, 
p
+1,Ö->
›tCt
 * (
tO±Desc
));

159 
pO±s
->
pSavedSèã
 = 
p
;

161 
	`fixupSavedO±i⁄Args
(
pO±s
);

162 
	}
}

178 
	$›ti⁄Fªe
(
tO±i⁄s
* 
pO±s
)

180 
‰ì_ßved_°©e
:

182 
tO±Desc
* 
p
 = 
pO±s
->
pO±Desc
;

183 
˘
 = 
pO±s
->
›tCt
;

185 i‡(
p
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

186 
	`AGFREE
(
p
->
›tArg
.
¨gSåög
);

187 
p
->
›tArg
.
¨gSåög
 = 
NULL
;

188 
p
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

191 
	`OPTST_GET_ARGTYPE
(
p
->
fO±Sèã
)) {

192 
OPARG_TYPE_STRING
:

193 #ifde‡
WITH_LIBREGEX


194 i‡–(
p
->
fO±Sèã
 & 
OPTST_STACKED
)

195 && (
p
->
›tCookõ
 !
NULL
)) {

196 
p
->
›tArg
.
¨gSåög
 = ".*";

197 
	`›ti⁄Un°ackArg
(
pO±s
, 
p
);

204 
OPARG_TYPE_HIERARCHY
:

205 i‡(
p
->
›tCookõ
 !
NULL
)

206 
	`u∆ﬂd_¨g_li°
(
p
->
›tCookõ
);

210 
p
->
›tCookõ
 = 
NULL
;

211 } 
p
++, --
˘
 > 0);

213 i‡(
pO±s
->
pSavedSèã
 !
NULL
) {

214 
tO±i⁄s
 * 
p
 = (tO±i⁄s*)
pO±s
->
pSavedSèã
;

215 
	`mem˝y
(
pO±s
, 
p
, (*p));

216 
	`mem˝y
(
pO±s
->
pO±Desc
, 
p
+1,Ö->
›tCt
 * (
tO±Desc
));

217 
	`AGFREE
(
pO±s
->
pSavedSèã
);

218 
pO±s
->
pSavedSèã
 = 
NULL
;

219 
‰ì_ßved_°©e
;

221 
	}
}

	@libopts/save.c

32 c⁄° 
	gzW¨n
[] = "%s WARNING: cannot save options - ";

33 c⁄° 
	g˛o£_xml
[] = "</%s>\n";

36 
tCC
*

37 
födDúName
(
tO±i⁄s
* 
pO±s
, * 
p_‰ì
);

39 
tCC
*

40 
födFûeName
(
tO±i⁄s
* 
pO±s
, * 
p_‰ì_«me
);

43 
¥ötE¡ry
(

44 
FILE
 * 
Â
,

45 
tO±Desc
 * 
p
,

46 
tCC
* 
pzLA
 );

49 
¥öt_a_vÆue
(
FILE
 * 
Â
, 
dïth
, 
tO±Desc
 * 
pOD
, 
tO±i⁄VÆue
 c⁄° * 
ovp
);

52 
¥öt_a_°rög
(
FILE
 * 
Â
, c⁄° * 
«me
, c⁄° * 
pz
);

55 
¥ötVÆueLi°
(
FILE
 * 
Â
, c⁄° * 
«me
, 
tArgLi°
 * 
Æ
);

58 
¥ötHõørchy
(
FILE
 * 
Â
, 
tO±Desc
 * 
p
);

60 
FILE
 *

61 
›íSaveFûe
(
tO±i⁄s
* 
pO±s
);

64 
¥ötNoArgO±
(
FILE
 * 
Â
, 
tO±Desc
 * 
p
,ÅO±Des¯* 
pOD
);

67 
¥ötSåögArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
);

70 
¥ötEnumArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
);

73 
¥ötSëMembîArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
);

76 
¥ötFûeArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
, 
tO±i⁄s
* 
pO±s
);

79 
tCC
*

80 
	$födDúName
(
tO±i⁄s
* 
pO±s
, * 
p_‰ì
)

82 
tCC
* 
pzDú
;

84 i‡–(
pO±s
->
•ecO±Idx
.
ßve_›ts
 =
NO_EQUIVALENT
)

85 || (
pO±s
->
•ecO±Idx
.
ßve_›ts
 == 0))

86  
NULL
;

88 
pzDú
 = 
pO±s
->
pO±Desc
[ÖO±s->
•ecO±Idx
.
ßve_›ts
 ].
›tArg
.
¨gSåög
;

89 i‡((
pzDú
 !
NULL
Ë&& (*pzDú !
NUL
))

90  
pzDú
;

97 
tCC
* c⁄°* 
∑pz
 = 
pO±s
->
∑pzHomeLi°
;

98 i‡(
∑pz
 =
NULL
)

99  
NULL
;

101 
∑pz
[1] !
NULL
)Öapz++;

102 
pzDú
 = *
∑pz
;

108 i‡(*
pzDú
 != '$')

109  
pzDú
;

112 
tCC
* 
pzEndDú
 = 
	`°rchr
(++
pzDú
, 
DIRCH
);

113 * 
pzFûeName
;

114 * 
pzEnv
;

116 i‡(
pzEndDú
 !
NULL
) {

117 
z
[ 
AO_NAME_SIZE
 ];

118 i‡((
pzEndDú
 - 
pzDú
Ë> 
AO_NAME_LIMIT
 )

119  
NULL
;

120 
	`°∫˝y
(
z
, 
pzDú
, (
size_t
)(
pzEndDú
 -ÖzDir));

121 
z
[ (
pzEndDú
 - 
pzDú
Ë] = 
NUL
;

122 
pzEnv
 = 
	`gëív
(
z
);

129 
pzEnv
 = 
	`gëív
(
pzDú
);

132 i‡(
pzEnv
 =
NULL
) {

133 
	`Ârötf
(
°dîr
, 
zW¨n
, 
pO±s
->
pzProgName
);

134 
	`Ârötf
(
°dîr
, 
zNŸDef
, 
pzDú
);

135  
NULL
;

138 i‡(
pzEndDú
 =
NULL
)

139  
pzEnv
;

142 
size_t
 
sz
 = 
	`°æí
(
pzEnv
Ë+ såÀn(
pzEndDú
) + 2;

143 
pzFûeName
 = (*)
	`AGALOC
(
sz
, "dirÇame");

146 i‡(
pzFûeName
 =
NULL
)

147  
NULL
;

149 *
p_‰ì
 = 1;

154 
	`•rötf
(
pzFûeName
, "%s/%s", 
pzEnv
, 
pzEndDú
);

155  
pzFûeName
;

157 
	}
}

160 
tCC
*

161 
	$födFûeName
(
tO±i⁄s
* 
pO±s
, * 
p_‰ì_«me
)

163 
tCC
* 
pzDú
;

164 
°©
 
°Buf
;

165 
‰ì_dú_«me
 = 0;

167 
pzDú
 = 
	`födDúName
(
pO±s
, &
‰ì_dú_«me
);

168 i‡(
pzDú
 =
NULL
)

169  
NULL
;

175 i‡(
	`°©
(
pzDú
, &
°Buf
) != 0) do {

181 i‡(
î∫o
 =
ENOENT
) {

182 
z
[
AG_PATH_MAX
];

188 * 
pzDúCh
 = 
	`°ºchr
(
pzDú
, 
DIRCH
);

189 i‡(
pzDúCh
 =
NULL
) {

190 
°Buf
.
°_mode
 = 
S_IFREG
;

194 
	`°∫˝y
(
z
, 
pzDú
, (
size_t
)(
pzDúCh
 -ÖzDir));

195 
z
[ 
pzDúCh
 - 
pzDú
 ] = 
NUL
;

197 i‡–(
	`°©
(
z
, &
°Buf
) == 0)

198 && 
	`S_ISDIR
(
°Buf
.
°_mode
)) {

204 
°Buf
.
°_mode
 = 
S_IFREG
;

212 
	`Ârötf
(
°dîr
, 
zW¨n
, 
pO±s
->
pzProgName
);

213 
	`Ârötf
(
°dîr
, 
zNoSèt
, 
î∫o
, 
	`°ªº‹
”ºno), 
pzDú
);

214 i‡(
‰ì_dú_«me
)

215 
	`AGFREE
((*)
pzDú
);

216  
NULL
;

223 i‡(
	`S_ISDIR
(
°Buf
.
°_mode
)) {

224 
size_t
 
sz
 = 
	`°æí
(
pzDú
Ë+ såÀn(
pO±s
->
pzRcName
) + 2;

227 * 
pzP©h
 = (*)
	`AGALOC
(
sz
, "fileÇame");

228 #ifde‡
HAVE_SNPRINTF


229 
	`¢¥ötf
(
pzP©h
, 
sz
, "%s/%s", 
pzDú
, 
pO±s
->
pzRcName
);

231 
	`•rötf
(
pzP©h
, "%s/%s", 
pzDú
, 
pO±s
->
pzRcName
);

233 i‡(
‰ì_dú_«me
)

234 
	`AGFREE
((*)
pzDú
);

235 
pzDú
 = 
pzP©h
;

236 
‰ì_dú_«me
 = 1;

243 i‡(
	`°©
(
pzDú
, &
°Buf
) != 0) {

244 i‡(
î∫o
 !
ENOENT
) {

245 
	`Ârötf
(
°dîr
, 
zW¨n
, 
pO±s
->
pzProgName
);

246 
	`Ârötf
(
°dîr
, 
zNoSèt
, 
î∫o
, 
	`°ªº‹
(errno),

247 
pzDú
);

248 
	`AGFREE
((*)
pzDú
);

249  
NULL
;

255 
°Buf
.
°_mode
 = 
S_IFREG
;

263 i‡(! 
	`S_ISREG
(
°Buf
.
°_mode
)) {

264 
	`Ârötf
(
°dîr
, 
zW¨n
, 
pO±s
->
pzProgName
);

265 
	`Ârötf
(
°dîr
, 
zNŸFûe
, 
pzDú
);

266 i‡(
‰ì_dú_«me
)

267 
	`AGFREE
((*)
pzDú
);

268  
NULL
;

274 
	`u∆ök
(
pzDú
);

275 *
p_‰ì_«me
 = 
‰ì_dú_«me
;

276  
pzDú
;

277 
	}
}

281 
	$¥ötE¡ry
(

282 
FILE
 * 
Â
,

283 
tO±Desc
 * 
p
,

284 
tCC
* 
pzLA
 )

293 c⁄° * 
pz
;

294 i‡(! 
	`DISABLED_OPT
(
p
Ë|| (p->
›tEquivIndex
 !
NO_EQUIVALENT
))

295 
pz
 = 
p
->
pz_Name
;

297 
pz
 = 
p
->
pz_DißbÀName
;

299 
	`Ârötf
(
Â
, "%-18s", 
pz
);

305 i‡(
	`OPTST_GET_ARGTYPE
(
p
->
fO±Sèã
Ë=
OPARG_TYPE_NUMERIC
)

306 
	`Ârötf
(
Â
, " %d\n", ()(
t_w‹d
)
pzLA
);

311 i‡(
pzLA
 =
NULL
)

312 
	`Âutc
('\n', 
Â
);

315 
	`Âutc
(' ', 
Â
); fputc(' ', fp);

317 
tCC
* 
pzNl
 = 
	`°rchr
(
pzLA
, '\n');

323 i‡(
pzNl
 =
NULL
)

329 ()
	`fwrôe
(
pzLA
, (
size_t
)(
pzNl
 -ÖzLA), (size_t)1, 
Â
);

330 
pzLA
 = 
pzNl
+1;

331 
	`Âuts
("\\\n", 
Â
);

337 
	`Âuts
(
pzLA
, 
Â
);

338 
	`Âutc
('\n', 
Â
);

340 
	}
}

344 
	$¥öt_a_vÆue
(
FILE
 * 
Â
, 
dïth
, 
tO±Desc
 * 
pOD
, 
tO±i⁄VÆue
 c⁄° * 
ovp
)

346 c⁄° 
boﬁ_©r
[] = "<%1$sÅype=boolean>%2$s</%1$s>\n";

347 c⁄° 
numb_©r
[] = "<%1$sÅype=integer>0x%2$lX</%1$s>\n";

348 c⁄° 
ty≥_©r
[] = "<%sÅype=%s>";

349 c⁄° 
nuŒ_©r
[] = "<%s/>\n";

351 --
dïth
 >= 0)

352 
	`putc
(' ', 
Â
),Öutc(' ', fp);

354 
ovp
->
vÆTy≥
) {

356 
OPARG_TYPE_NONE
:

357 
	`Ârötf
(
Â
, 
nuŒ_©r
, 
ovp
->
pzName
);

360 
OPARG_TYPE_STRING
:

361 
	`¥öt_a_°rög
(
Â
, 
ovp
->
pzName
, ovp->
v
.
°rVÆ
);

364 
OPARG_TYPE_ENUMERATION
:

365 
OPARG_TYPE_MEMBERSHIP
:

366 i‡(
pOD
 !
NULL
) {

367 
tAoUI
 
›t_°©e
 = 
pOD
->
fO±Sèã
;

368 
uöçå_t
 
vÆ
 = 
pOD
->
›tArg
.
¨gEnum
;

369 c⁄° * 
typ
 = (
ovp
->
vÆTy≥
 =
OPARG_TYPE_ENUMERATION
)

372 
	`Ârötf
(
Â
, 
ty≥_©r
, 
ovp
->
pzName
, 
typ
);

378 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
,ÖOD );

379 i‡(
pOD
->
›tArg
.
¨gSåög
 !
NULL
) {

380 
	`Âuts
(
pOD
->
›tArg
.
¨gSåög
, 
Â
);

382 i‡(
ovp
->
vÆTy≥
 !
OPARG_TYPE_ENUMERATION
) {

386 
	`AGFREE
((*)
pOD
->
›tArg
.
¨gSåög
);

390 
pOD
->
›tArg
.
¨gEnum
 = 
vÆ
;

391 
pOD
->
fO±Sèã
 = 
›t_°©e
;

392 
	`Ârötf
(
Â
, 
˛o£_xml
, 
ovp
->
pzName
);

397 
OPARG_TYPE_NUMERIC
:

398 
	`Ârötf
(
Â
, 
numb_©r
, 
ovp
->
pzName
, ovp->
v
.
l⁄gVÆ
);

401 
OPARG_TYPE_BOOLEAN
:

402 
	`Ârötf
(
Â
, 
boﬁ_©r
, 
ovp
->
pzName
,

403 
ovp
->
v
.
boﬁVÆ
 ? "true" : "false");

406 
OPARG_TYPE_HIERARCHY
:

407 
	`¥ötVÆueLi°
(
Â
, 
ovp
->
pzName
, ovp->
v
.
√°VÆ
);

410 
	}
}

414 
	$¥öt_a_°rög
(
FILE
 * 
Â
, c⁄° * 
«me
, c⁄° * 
pz
)

416 c⁄° 
›í_©r
[] = "<%s>";

418 
	`Ârötf
(
Â
, 
›í_©r
, 
«me
);

420 
ch
 = (()*(
pz
++)) & 0xFF;

422 
ch
) {

423 
NUL
: 
°rög_d⁄e
;

428 #i‡
__GNUC__
 >= 4

432 
	`emô_•ecül_ch¨
(
Â
, 
ch
);

436 #i‡
__GNUC__
 < 4

437 i‡–((
ch
 >= 1) && (ch <= (' ' - 1)))

438 || ((
ch
 >= ('~' + 1)) && (ch <= 0xFF)) ) {

439 
	`emô_•ecül_ch¨
(
Â
, 
ch
);

443 
	`putc
(
ch
, 
Â
);

445 } 
°rög_d⁄e
:;

446 
	`Ârötf
(
Â
, 
˛o£_xml
, 
«me
);

447 
	}
}

451 
	$¥ötVÆueLi°
(
FILE
 * 
Â
, c⁄° * 
«me
, 
tArgLi°
 * 
Æ
)

453 
dïth
 = 1;

455 
•_˘
;

456 
›t_˘
;

457 ** 
›t_li°
;

459 i‡(
Æ
 =
NULL
)

461 
›t_˘
 = 
Æ
->
u£Ct
;

462 
›t_li°
 = (**)
Æ
->
≠zArgs
;

464 i‡(
›t_˘
 <= 0) {

465 
	`Ârötf
(
Â
, "<%s/>\n", 
«me
);

469 
	`Ârötf
(
Â
, "<%†ty≥Úe°ed>\n", 
«me
);

471 
dïth
++;

472 --
›t_˘
 >= 0) {

473 
tO±i⁄VÆue
 c⁄° * 
ovp
 = *(
›t_li°
++);

475 
	`¥öt_a_vÆue
(
Â
, 
dïth
, 
NULL
, 
ovp
);

477 
dïth
--;

479 
•_˘
 = 
dïth
; --sp_ct >= 0;)

480 
	`putc
(' ', 
Â
),Öutc(' ', fp);

481 
	`Ârötf
(
Â
, "</%s>\n", 
«me
);

482 
	}
}

486 
	$¥ötHõørchy
(
FILE
 * 
Â
, 
tO±Desc
 * 
p
)

488 
›t_˘
;

489 
tArgLi°
 * 
Æ
 = 
p
->
›tCookõ
;

490 ** 
›t_li°
;

492 i‡(
Æ
 =
NULL
)

495 
›t_˘
 = 
Æ
->
u£Ct
;

496 
›t_li°
 = (**)
Æ
->
≠zArgs
;

498 i‡(
›t_˘
 <= 0)

502 
tO±i⁄VÆue
 c⁄° * 
ba£
 = *(
›t_li°
++);

503 
tO±i⁄VÆue
 c⁄° * 
ovp
 = 
	`›ti⁄GëVÆue
(
ba£
, 
NULL
);

505 i‡(
ovp
 =
NULL
)

508 
	`Ârötf
(
Â
, "<%†ty≥Úe°ed>\n", 
p
->
pz_Name
);

511 
	`¥öt_a_vÆue
(
Â
, 1, 
p
, 
ovp
);

513 } 
ovp
 = 
	`›ti⁄NextVÆue
(
ba£
, ovp),

514 
ovp
 !
NULL
);

516 
	`Ârötf
(
Â
, "</%s>\n", 
p
->
pz_Name
);

517 } --
›t_˘
 > 0);

518 
	}
}

521 
FILE
 *

522 
	$›íSaveFûe
(
tO±i⁄s
* 
pO±s
)

524 
FILE
* 
Â
;

527 
‰ì_«me
 = 0;

528 
tCC
* 
pzFName
 = 
	`födFûeName
(
pO±s
, &
‰ì_«me
);

529 i‡(
pzFName
 =
NULL
)

530  
NULL
;

532 
Â
 = 
	`f›í
(
pzFName
, "w" 
FOPEN_BINARY_FLAG
);

533 i‡(
Â
 =
NULL
) {

534 
	`Ârötf
(
°dîr
, 
zW¨n
, 
pO±s
->
pzProgName
);

535 
	`Ârötf
(
°dîr
, 
zNoCª©
, 
î∫o
, 
	`°ªº‹
”ºno), 
pzFName
);

536 i‡(
‰ì_«me
)

537 
	`AGFREE
((*Ë
pzFName
 );

538  
Â
;

541 i‡(
‰ì_«me
)

542 
	`AGFREE
((*)
pzFName
);

546 c⁄°* 
pz
 = 
pO±s
->
pzUßgeTôÀ
;

547 
	`Âuts
("# ", 
Â
);

548 dÿ{ 
	`Âutc
(*
pz
, 
Â
); } *(pz++) != '\n');

552 
time_t
 
timeVÆ
 = 
	`time
(
NULL
);

553 * 
pzTime
 = 
	`˘ime
(&
timeVÆ
);

555 
	`Ârötf
(
Â
, 
zPª£tFûe
, 
pzTime
);

556 #ifde‡
HAVE_ALLOCATED_CTIME


562 
	`AGFREE
((*)
pzTime
);

566  
Â
;

567 
	}
}

570 
	$¥ötNoArgO±
(
FILE
 * 
Â
, 
tO±Desc
 * 
p
,ÅO±Des¯* 
pOD
)

577 c⁄° * 
pznm
 =

578 (
	`DISABLED_OPT
(
p
)Ë? 
pOD
->
pz_DißbÀName
 :ÖOD->
pz_Name
;

584 i‡(
pznm
 =
NULL
)

585 
pznm
 = 
pOD
->
pz_Name
;

587 
	`Ârötf
(
Â
, "%s\n", 
pznm
);

588 
	}
}

591 
	$¥ötSåögArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
)

593 i‡(
pOD
->
fO±Sèã
 & 
OPTST_STACKED
) {

594 
tArgLi°
* 
pAL
 = (tArgLi°*)
pOD
->
›tCookõ
;

595 
u˘
 = 
pAL
->
u£Ct
;

596 
tCC
** 
µz
 = 
pAL
->
≠zArgs
;

601 i‡(
u˘
 > 1)

602 
pOD
->
fO±Sèã
 &~
OPTST_DISABLED
;

604 
u˘
-- > 0)

605 
	`¥ötE¡ry
(
Â
, 
pOD
, *(
µz
++));

607 
	`¥ötE¡ry
(
Â
, 
pOD
,ÖOD->
›tArg
.
¨gSåög
);

609 
	}
}

612 
	$¥ötEnumArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
)

614 
uöçå_t
 
vÆ
 = 
pOD
->
›tArg
.
¨gEnum
;

620 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
,ÖOD);

621 
	`¥ötE¡ry
(
Â
, 
pOD
, (*)’OD->
›tArg
.
¨gSåög
));

623 
pOD
->
›tArg
.
¨gEnum
 = 
vÆ
;

624 
	}
}

627 
	$¥ötSëMembîArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
)

629 
uöçå_t
 
vÆ
 = 
pOD
->
›tArg
.
¨gEnum
;

635 (*(
pOD
->
pO±Proc
))(
OPTPROC_RETURN_VALNAME
,ÖOD);

636 
	`¥ötE¡ry
(
Â
, 
pOD
, (*)’OD->
›tArg
.
¨gSåög
));

638 i‡(
pOD
->
›tArg
.
¨gSåög
 !
NULL
) {

642 
	`AGFREE
((*)
pOD
->
›tArg
.
¨gSåög
);

643 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

646 
pOD
->
›tArg
.
¨gEnum
 = 
vÆ
;

647 
	}
}

650 
	$¥ötFûeArg
(
FILE
 * 
Â
, 
tO±Desc
 * 
pOD
, 
tO±i⁄s
* 
pO±s
)

656 i‡(
pOD
->
›tCookõ
 !
NULL
)

657 
	`¥ötE¡ry
(
Â
, 
pOD
,ÖOD->
›tCookõ
);

659 i‡(
	`HAS_‹igöÆO±ArgAºay
(
pO±s
)) {

660 c⁄° * 
‹ig
 =

661 
pO±s
->
‹igöÆO±ArgAºay
[
pOD
->
›tIndex
].
¨gSåög
;

663 i‡(
pOD
->
›tArg
.
¨gSåög
 =
‹ig
)

666 
	`¥ötE¡ry
(
Â
, 
pOD
,ÖOD->
›tArg
.
¨gSåög
);

668 
	}
}

701 
	$›ti⁄SaveFûe
(
tO±i⁄s
* 
pO±s
)

703 
tO±Desc
* 
pOD
;

704 
˘
;

705 
FILE
* 
Â
 = 
	`›íSaveFûe
(
pO±s
);

707 i‡(
Â
 =
NULL
)

713 
˘
 = 
pO±s
->
¥e£tO±Ct
;

714 
pOD
 = 
pO±s
->
pO±Desc
;

716 
tO±Desc
* 
p
;

727 i‡(
	`UNUSED_OPT
(
pOD
))

730 i‡((
pOD
->
fO±Sèã
 & 
OPTST_DO_NOT_SAVE_MASK
) != 0)

733 i‡–(
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
)

734 && (
pOD
->
›tEquivIndex
 !pOD->
›tIndex
))

742 
p
 = ((
pOD
->
fO±Sèã
 & 
OPTST_EQUIVALENCE
) != 0)

743 ? (
pO±s
->
pO±Desc
 + 
pOD
->
›tA˘uÆIndex
) :ÖOD;

745 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

746 
OPARG_TYPE_NONE
:

747 
	`¥ötNoArgO±
(
Â
, 
p
, 
pOD
);

750 
OPARG_TYPE_NUMERIC
:

751 
	`¥ötE¡ry
(
Â
, 
p
, (*)’->
›tArg
.
¨gI¡
));

754 
OPARG_TYPE_STRING
:

755 
	`¥ötSåögArg
(
Â
, 
p
);

758 
OPARG_TYPE_ENUMERATION
:

759 
	`¥ötEnumArg
(
Â
, 
p
);

762 
OPARG_TYPE_MEMBERSHIP
:

763 
	`¥ötSëMembîArg
(
Â
, 
p
);

766 
OPARG_TYPE_BOOLEAN
:

767 
	`¥ötE¡ry
(
Â
, 
p
,Ö->
›tArg
.
¨gBoﬁ
 ? "true" : "false");

770 
OPARG_TYPE_HIERARCHY
:

771 
	`¥ötHõørchy
(
Â
, 
p
);

774 
OPARG_TYPE_FILE
:

775 
	`¥ötFûeArg
(
Â
, 
p
, 
pO±s
);

781 } 
pOD
++, (--
˘
 > 0));

783 
	`f˛o£
(
Â
);

784 
	}
}

	@libopts/sort.c

31 
tSuc˚ss


32 
mu°H™dÀArg
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

33 ** 
µzO±s
, * 
pO±sIdx
);

35 
tSuc˚ss


36 
mayH™dÀArg
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

37 ** 
µzO±s
, * 
pO±sIdx
);

39 
tSuc˚ss


40 
checkSh‹tO±s
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

41 ** 
µzO±s
, * 
pO±sIdx
);

49 
tSuc˚ss


50 
	$mu°H™dÀArg
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

51 ** 
µzO±s
, * 
pO±sIdx
)

58 
pOS
->
›tTy≥
) {

59 
TOPT_SHORT
:

64 i‡(*
pzArg
 !
NUL
)

65  
SUCCESS
;

68 
TOPT_LONG
:

73 i‡(
pOS
->
pzO±Arg
 !
NULL
)

74  
SUCCESS
;

78  
FAILURE
;

80 i‡(
pO±s
->
curO±Idx
 >pO±s->
‹igArgCt
)

81  
FAILURE
;

83 
µzO±s
[ (*
pO±sIdx
)++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

84  
SUCCESS
;

85 
	}
}

87 
tSuc˚ss


88 
	$mayH™dÀArg
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

89 ** 
µzO±s
, * 
pO±sIdx
)

94 
pOS
->
›tTy≥
) {

95 
TOPT_SHORT
:

101 i‡(*
pzArg
 !
NUL
)

102  
SUCCESS
;

105 
TOPT_LONG
:

110 i‡(
pOS
->
pzO±Arg
 !
NULL
)

111  
SUCCESS
;

115  
FAILURE
;

117 i‡(
pO±s
->
curO±Idx
 >pO±s->
‹igArgCt
)

118  
PROBLEM
;

120 
pzArg
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

121 i‡(*
pzArg
 != '-')

122 
µzO±s
[ (*
pO±sIdx
)++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

123  
SUCCESS
;

124 
	}
}

130 
tSuc˚ss


131 
	$checkSh‹tO±s
(
tO±i⁄s
* 
pO±s
, * 
pzArg
, 
tO±Sèã
* 
pOS
,

132 ** 
µzO±s
, * 
pO±sIdx
)

134 *
pzArg
 !
NUL
) {

135 i‡(
	`FAILED
(
	`sh‹tO±i⁄Föd
(
pO±s
, (
tAoUC
)*
pzArg
, 
pOS
)))

136  
FAILURE
;

141 i‡(
	`OPTST_GET_ARGTYPE
(
pOS
->
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_NONE
) {

142 
pzArg
++;

144 } i‡(
pOS
->
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) {

149 i‡(
pzArg
[1] !
NUL
)

150  
SUCCESS
;

152 
pzArg
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

153 i‡(*
pzArg
 != '-')

154 
µzO±s
[ (*
pO±sIdx
)++ ] =

155 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

156  
SUCCESS
;

163 i‡(
pzArg
[1] =
NUL
) {

164 i‡(
pO±s
->
curO±Idx
 >pO±s->
‹igArgCt
)

165  
FAILURE
;

166 
µzO±s
[ (*
pO±sIdx
)++ ] =

167 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

169  
SUCCESS
;

172  
SUCCESS
;

173 
	}
}

179 
LOCAL
 

180 
	$›ti⁄S‹t
(
tO±i⁄s
* 
pO±s
)

182 ** 
µzO±s
;

183 ** 
µzOpds
;

184 
›tsIdx
 = 0;

185 
›dsIdx
 = 0;

187 
tO±Sèã
 
os
 = 
	`OPTSTATE_INITIALIZER
(
DEFINED
);

192 i‡–(
	`gëív
("POSIXLY_CORRECT"Ë!
NULL
)

193 || 
	`NAMED_OPTS
(
pO±s
))

199 
µzO±s
 = 
	`mÆloc
(
pO±s
->
‹igArgCt
 * (*));

200 i‡(
µzO±s
 =
NULL
)

201 
exô_no_mem
;

203 
µzOpds
 = 
	`mÆloc
(
pO±s
->
‹igArgCt
 * (*));

204 i‡(
µzOpds
 =
NULL
) {

205 
	`‰ì
(
µzO±s
);

206 
exô_no_mem
;

209 
pO±s
->
curO±Idx
 = 1;

210 
pO±s
->
pzCurO±
 = 
NULL
;

218 * 
pzArg
;

219 
tSuc˚ss
 
ªs
;

225 i‡(
pO±s
->
curO±Idx
 >pO±s->
‹igArgCt
) {

226 
î∫o
 = 0;

227 
joöLi°s
;

230 
pzArg
 = 
pO±s
->
‹igArgVe˘
[ÖO±s->
curO±Idx
 ];

231 i‡(*
pzArg
 != '-') {

232 
µzOpds
[ 
›dsIdx
++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

236 
pzArg
[1]) {

237 
NUL
:

241 
µzOpds
[ 
›dsIdx
++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

249 i‡(
pzArg
[2] =
NUL
) {

250 
µzO±s
[ 
›tsIdx
++ ] =

251 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

252 
ª°O≥ønds
;

254 
ªs
 = 
	`l⁄gO±i⁄Föd
(
pO±s
, 
pzArg
+2, &
os
);

263 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_SHORTOPT
) == 0) {

264 
ªs
 = 
	`l⁄gO±i⁄Föd
(
pO±s
, 
pzArg
+1, &
os
);

266 
ªs
 = 
	`sh‹tO±i⁄Föd
(
pO±s
, (
tAoUC
)
pzArg
[1], &
os
);

270 i‡(
	`FAILED
(
ªs
)) {

271 
î∫o
 = 
EINVAL
;

272 
‰ìTemps
;

280 
µzO±s
[ 
›tsIdx
++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

282 i‡(
	`OPTST_GET_ARGTYPE
(
os
.
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_NONE
) {

288 i‡–(
os
.
›tTy≥
 =
TOPT_SHORT
)

289 && 
	`FAILED
(
	`checkSh‹tO±s
(
pO±s
, 
pzArg
+2, &
os
, 
µzO±s
,

290 &
›tsIdx
)) ) {

291 
î∫o
 = 
EINVAL
;

292 
‰ìTemps
;

295 } i‡(
os
.
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) {

296 
	`mayH™dÀArg
(
pO±s
, 
pzArg
+2, &
os
, 
µzO±s
, &
›tsIdx
)) {

297 
FAILURE
: 
î∫o
 = 
EIO
; 
‰ìTemps
;

298 
PROBLEM
: 
î∫o
 = 0; 
joöLi°s
;

302 
	`mu°H™dÀArg
(
pO±s
, 
pzArg
+2, &
os
, 
µzO±s
, &
›tsIdx
)) {

303 
PROBLEM
:

304 
FAILURE
: 
î∫o
 = 
EIO
; 
‰ìTemps
;

309 
ª°O≥ønds
:

310 
pO±s
->
curO±Idx
 <ÖO±s->
‹igArgCt
)

311 
µzOpds
[ 
›dsIdx
++ ] = 
pO±s
->
‹igArgVe˘
[ (pO±s->
curO±Idx
)++ ];

313 
joöLi°s
:

314 i‡(
›tsIdx
 > 0)

315 
	`mem˝y
(
pO±s
->
‹igArgVe˘
 + 1, 
µzO±s
, 
›tsIdx
 * (*));

316 i‡(
›dsIdx
 > 0)

317 
	`mem˝y
(
pO±s
->
‹igArgVe˘
 + 1 + 
›tsIdx
, 
µzOpds
,

318 
›dsIdx
 * (*));

320 
‰ìTemps
:

321 
	`‰ì
(
µzO±s
);

322 
	`‰ì
(
µzOpds
);

325 
exô_no_mem
:

326 
î∫o
 = 
ENOMEM
;

328 
	}
}

	@libopts/stack.c

31 #ifde‡
WITH_LIBREGEX


32 #ö˛udê
REGEX_HEADER


46 
	$›ti⁄Un°ackArg
(

47 
tO±i⁄s
* 
pO±s
,

48 
tO±Desc
* 
pO±Desc
 )

50 
ªs
;

52 
tArgLi°
* 
pAL
;

54 i‡((
pO±Desc
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

56 
pAL
 = (
tArgLi°
*)
pO±Desc
->
›tCookõ
;

62 i‡(
pAL
 =
NULL
) {

63 
pO±Desc
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

64 i‡((
pO±Desc
->
fO±Sèã
 & 
OPTST_INITENABLED
) == 0)

65 
pO±Desc
->
fO±Sèã
 |
OPTST_DISABLED
;

69 #ifde‡
WITH_LIBREGEX


71 
ªgex_t
 
ª
;

72 
i
, 
˘
, 
dIdx
;

74 i‡(
	`ªgcomp
(&
ª
, 
pO±Desc
->
›tArg
.
¨gSåög
, 
REG_NOSUB
) != 0)

83 
i
 = 0, 
dIdx
 = 0, 
˘
 = 
pAL
->
u£Ct
; --ct >= 0; i++) {

84 
tCC
* 
pzSrc
 = 
pAL
->
≠zArgs
[ 
i
 ];

85 * 
pzEq
 = 
	`°rchr
(
pzSrc
, '=');

87 i‡(
pzEq
 !
NULL
)

88 *
pzEq
 = 
NUL
;

90 
ªs
 = 
	`ªgexec
(&
ª
, 
pzSrc
, (
size_t
)0, 
NULL
, 0);

91 
ªs
) {

98 
	`AGFREE
(
pzSrc
);

99 
pAL
->
u£Ct
--;

103 
REG_NOMATCH
:

104 i‡(
pzEq
 !
NULL
)

105 *
pzEq
 = '=';

111 i‡(
dIdx
 !
i
)

112 
pAL
->
≠zArgs
[ 
dIdx
 ] = 
pzSrc
;

113 
dIdx
++;

117 
	`ªg‰ì
(&
ª
);

121 
i
, 
˘
, 
dIdx
;

129 
i
 = 0, 
dIdx
 = 0, 
˘
 = 
pAL
->
u£Ct
; --ct >= 0; i++) {

130 
tCC
* 
pzSrc
 = 
pAL
->
≠zArgs
[ 
i
 ];

131 * 
pzEq
 = 
	`°rchr
(
pzSrc
, '=');

133 i‡(
pzEq
 !
NULL
)

134 *
pzEq
 = 
NUL
;

136 i‡(
	`°rcmp
(
pzSrc
, 
pO±Desc
->
›tArg
.
¨gSåög
) == 0) {

142 
	`AGFREE
(
pzSrc
);

143 
pAL
->
u£Ct
--;

145 i‡(
pzEq
 !
NULL
)

146 *
pzEq
 = '=';

152 i‡(
dIdx
 !
i
)

153 
pAL
->
≠zArgs
[ 
dIdx
 ] = 
pzSrc
;

154 
dIdx
++;

163 i‡(
pAL
->
u£Ct
 == 0) {

164 
pO±Desc
->
fO±Sèã
 &
OPTST_PERSISTENT_MASK
;

165 i‡((
pO±Desc
->
fO±Sèã
 & 
OPTST_INITENABLED
) == 0)

166 
pO±Desc
->
fO±Sèã
 |
OPTST_DISABLED
;

167 
	`AGFREE
((*)
pAL
);

168 
pO±Desc
->
›tCookõ
 = 
NULL
;

170 
	}
}

178 
LOCAL
 

179 
	$addArgLi°E¡ry
(** 
µAL
, * 
íåy
)

181 
tArgLi°
* 
pAL
 = *(**)
µAL
;

187 i‡(
pAL
 =
NULL
) {

188 
pAL
 = (
tArgLi°
*)
	`AGALOC
((*pAL), "new optionárg stack");

189 i‡(
pAL
 =
NULL
)

191 
pAL
->
u£Ct
 = 0;

192 
pAL
->
ÆlocCt
 = 
MIN_ARG_ALLOC_CT
;

193 *
µAL
 = (*)
pAL
;

200 i‡(
pAL
->
u£Ct
 >pAL->
ÆlocCt
) {

201 
size_t
 
sz
 = (*
pAL
);

202 
pAL
->
ÆlocCt
 +
INCR_ARG_ALLOC_CT
;

208 
sz
 +(*Ë* (
pAL
->
ÆlocCt
 - 
MIN_ARG_ALLOC_CT
);

209 
pAL
 = (
tArgLi°
*)
	`AGREALOC
((*ÌAL, 
sz
, "expanded optárg stack");

210 i‡(
pAL
 =
NULL
)

212 *
µAL
 = (*)
pAL
;

218 
pAL
->
≠zArgs
[ (pAL->
u£Ct
)++ ] = 
íåy
;

219 
	}
}

233 
	$›ti⁄SèckArg
(

234 
tO±i⁄s
* 
pO±s
,

235 
tO±Desc
* 
pOD
 )

237 * 
pz
;

239 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0) {

240 
tArgLi°
* 
pAL
 = (*)
pOD
->
›tCookõ
;

241 
ix
;

242 i‡(
pAL
 =
NULL
)

245 
ix
 = 
pAL
->
u£Ct
;

246 --
ix
 >= 0)

247 
	`AGFREE
(
pAL
->
≠zArgs
[
ix
]);

248 
	`AGFREE
(
pAL
);

251 i‡(
pOD
->
›tArg
.
¨gSåög
 =
NULL
)

254 
	`AGDUPSTR
(
pz
, 
pOD
->
›tArg
.
¨gSåög
, "stackárg");

255 
	`addArgLi°E¡ry
(&(
pOD
->
›tCookõ
), (*)
pz
);

257 
	}
}

	@libopts/streqvcmp.c

38 
	gch¨m≠
[] = {

101 
	$°∫eqvcmp
(
tCC
* 
s1
,ÅCC* 
s2
, 
˘
)

103 ; 
˘
 > 0; --ct) {

104 
u1
 = (Ë*
s1
++;

105 
u2
 = (Ë*
s2
++;

106 
dif
 = 
ch¨m≠
[ 
u1
 ] - ch¨m≠[ 
u2
 ];

108 i‡(
dif
 != 0)

109  
dif
;

111 i‡(
u1
 =
NUL
)

116 
	}
}

140 
	$°ªqvcmp
(
tCC
* 
s1
,ÅCC* 
s2
)

143 
u1
 = (Ë*
s1
++;

144 
u2
 = (Ë*
s2
++;

145 
dif
 = 
ch¨m≠
[ 
u1
 ] - ch¨m≠[ 
u2
 ];

147 i‡(
dif
 != 0)

148  
dif
;

150 i‡(
u1
 =
NUL
)

153 
	}
}

185 
	$°ªqvm≠
(
From
, 
To
, 
˘
)

187 i‡(
˘
 == 0) {

188 
˘
 = (
ch¨m≠
) - 1;

190 
ch¨m≠
[ 
˘
 ] = ct;

191 } --
˘
 >= 0);

195 
chTo
 = ()
To
 & 0xFF;

196 
chFrom
 = ()
From
 & 0xFF;

199 
ch¨m≠
[ 
chFrom
 ] = ()
chTo
;

200 
chFrom
++;

201 
chTo
++;

202 i‡((
chFrom
 >(
ch¨m≠
)Ë|| (
chTo
 >= (charmap)))

204 } --
˘
 > 0);

206 
	}
}

225 
	$°ªqu©e
(c⁄°* 
s
)

227 i‡((
s
 !
NULL
Ë&& (*†!
NUL
)) {

228 
equiv
 = ()*
s
;

229 *
s
 !
NUL
)

230 
ch¨m≠
[ ()*(
s
++Ë] = 
equiv
;

232 
	}
}

254 
	$°πønsf‹m
(* 
d
, c⁄°* 
s
)

257 *(
d
++Ë()
ch¨m≠
[ ()*
s
 ];

258 } *(
s
++Ë!
NUL
);

259 
	}
}

	@libopts/text_mmap.c

27 #i‚de‡
MAP_ANONYMOUS


28 #ifde‡ 
MAP_ANON


29 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

39 
	#AO_INVALID_FD
 -1

	)

41 
	#FILE_WRITABLE
(
_¥t
,
_Êg
) \

42 –(
_¥t
 & 
PROT_WRITE
) \

43 && ((
_Êg
 & (
MAP_SHARED
|
MAP_PRIVATE
)Ë=MAP_SHARED))

	)

44 
	#MAP_FAILED_PTR
 ((*)
MAP_FAILED
)

	)

100 
	$ãxt_mm≠
(c⁄°* 
pzFûe
, 
¥Ÿ
, 
Êags
, 
tm≠_öfo_t
* 
pMI
)

102 
	`mem£t
(
pMI
, 0, (*pMI));

103 #ifde‡
HAVE_MMAP


104 
pMI
->
txt_zîo_fd
 = -1;

106 
pMI
->
txt_fd
 = -1;

112 
°©
 
sb
;

113 i‡(
	`°©
(
pzFûe
, &
sb
) != 0) {

114 
pMI
->
txt_î∫o
 = 
î∫o
;

115  
MAP_FAILED_PTR
;

118 i‡(! 
	`S_ISREG
(
sb
.
°_mode
)) {

119 
pMI
->
txt_î∫o
 = 
î∫o
 = 
EINVAL
;

120  
MAP_FAILED_PTR
;

123 
pMI
->
txt_size
 = 
sb
.
°_size
;

130 
o_Êag
;

137 i‡(
	`FILE_WRITABLE
(
¥Ÿ
,
Êags
))

138 
o_Êag
 = 
O_RDWR
;

140 
o_Êag
 = 
O_RDONLY
;

146 i‡(((
Êags
 & 
MAP_SHARED
Ë=0Ë&& (
¥Ÿ
 & 
PROT_WRITE
))

147 
o_Êag
 |
O_EXCL
;

149 
pMI
->
txt_fd
 = 
	`›í
(
pzFûe
, 
o_Êag
);

152 i‡(
pMI
->
txt_fd
 =
AO_INVALID_FD
) {

153 
pMI
->
txt_î∫o
 = 
î∫o
;

154  
MAP_FAILED_PTR
;

157 #ifde‡
HAVE_MMAP


162 
pMI
->
txt_d©a
 =

163 
	`mm≠
(
NULL
, 
pMI
->
txt_size
+1, 
¥Ÿ
, 
Êags
,ÖMI->
txt_fd
, (
size_t
)0);

164 i‡(
pMI
->
txt_d©a
 =
MAP_FAILED_PTR
) {

165 
pMI
->
txt_î∫o
 = 
î∫o
;

166 
Áû_ªtu∫
;

174 
pMI
->
txt_zîo_fd
 = -1;

175 
pMI
->
txt_î∫o
 = 0;

178 * 
pNuls
;

179 #ifde‡
_SC_PAGESIZE


180 
size_t
 
pgsz
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

182 
size_t
 
pgsz
 = 
	`gë∑gesize
();

189 
pMI
->
txt_fuŒ_size
 = (pMI->
txt_size
 + (
pgsz
 - 1)) & ~(pgsz - 1);

190 i‡(
pMI
->
txt_size
 !pMI->
txt_fuŒ_size
)

191  
pMI
->
txt_d©a
;

197 
pMI
->
txt_fuŒ_size
 +
pgsz
;

198 #i‡
	`deföed
(
MAP_ANONYMOUS
)

199 
pNuls
 = 
	`mm≠
(

200 (*)(((*)
pMI
->
txt_d©a
Ë+ÖMI->
txt_size
),

201 
pgsz
, 
PROT_READ
|
PROT_WRITE
,

202 
MAP_ANONYMOUS
|
MAP_FIXED
|
MAP_PRIVATE
, 
AO_INVALID_FD
, (
size_t
)0);

204 i‡(
pNuls
 !
MAP_FAILED_PTR
)

205  
pMI
->
txt_d©a
;

207 
pMI
->
txt_î∫o
 = 
î∫o
;

209 #ñi‡
	`deföed
(
HAVE_DEV_ZERO
)

210 
pMI
->
txt_zîo_fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
);

212 i‡(
pMI
->
txt_zîo_fd
 =
AO_INVALID_FD
) {

213 
pMI
->
txt_î∫o
 = 
î∫o
;

216 
pNuls
 = 
	`mm≠
(

217 (*)(((*)
pMI
->
txt_d©a
Ë+ÖMI->
txt_size
), 
pgsz
,

218 
PROT_READ
|
PROT_WRITE
, 
MAP_PRIVATE
|
MAP_FIXED
,

219 
pMI
->
txt_zîo_fd
, 0 );

221 i‡(
pNuls
 !
MAP_FAILED_PTR
)

222  
pMI
->
txt_d©a
;

224 
pMI
->
txt_î∫o
 = 
î∫o
;

225 
	`˛o£
(
pMI
->
txt_zîo_fd
);

226 
pMI
->
txt_zîo_fd
 = -1;

230 
pMI
->
txt_fuŒ_size
 =ÖMI->
txt_size
;

234 * 
p
 = 
	`AGALOC
(
pMI
->
txt_size
+1, "fileÅext");

235 
	`mem˝y
(
p
, 
pMI
->
txt_d©a
,ÖMI->
txt_size
);

236 ((*)
p
)[
pMI
->
txt_size
] = 
NUL
;

237 
	`munm≠
(
pMI
->
txt_d©a
,ÖMI->
txt_size
 );

238 
pMI
->
txt_d©a
 = 
p
;

240 
pMI
->
txt_Æloc
 = 1;

241  
pMI
->
txt_d©a
;

245 
pMI
->
txt_d©a
 = 
	`AGALOC
’MI->
txt_size
+1, "fileÅext");

246 i‡(
pMI
->
txt_d©a
 =
NULL
) {

247 
pMI
->
txt_î∫o
 = 
ENOMEM
;

248 
Áû_ªtu∫
;

252 
size_t
 
sz
 = 
pMI
->
txt_size
;

253 * 
pz
 = 
pMI
->
txt_d©a
;

255 
sz
 > 0) {

256 
ssize_t
 
rd˘
 = 
	`ªad
(
pMI
->
txt_fd
, 
pz
, 
sz
);

257 i‡(
rd˘
 <= 0) {

258 
pMI
->
txt_î∫o
 = 
î∫o
;

259 
	`Ârötf
(
°dîr
, 
zFSEºRódFûe
,

260 
î∫o
, 
	`°ªº‹
”ºno), 
pzFûe
);

261 
	`‰ì
(
pMI
->
txt_d©a
);

262 
Áû_ªtu∫
;

265 
pz
 +
rd˘
;

266 
sz
 -
rd˘
;

269 *
pz
 = 
NUL
;

275 
pMI
->
txt_zîo_fd
 = -1;

276 
pMI
->
txt_î∫o
 = 0;

278  
pMI
->
txt_d©a
;

282 
Áû_ªtu∫
:

283 i‡(
pMI
->
txt_fd
 >= 0) {

284 
	`˛o£
(
pMI
->
txt_fd
);

285 
pMI
->
txt_fd
 = -1;

287 
î∫o
 = 
pMI
->
txt_î∫o
;

288 
pMI
->
txt_d©a
 = 
MAP_FAILED_PTR
;

289  
pMI
->
txt_d©a
;

290 
	}
}

313 
	$ãxt_munm≠
(
tm≠_öfo_t
* 
pMI
)

315 #ifde‡
HAVE_MMAP


316 
ªs
 = 0;

317 i‡(
pMI
->
txt_Æloc
) {

323 i‡–((
pMI
->
txt_¥Ÿ
 & 
PROT_WRITE
) != 0)

324 && ((
pMI
->
txt_Êags
 & 
MAP_PRIVATE
) == 0)) {

326 i‡(
	`l£ek
(
pMI
->
txt_fd
, (
size_t
)0, 
SEEK_SET
) != 0)

327 
îr‹_ªtu∫
;

329 
ªs
 = (
	`wrôe
(
pMI
->
txt_fd
,ÖMI->
txt_d©a
,ÖMI->
txt_size
) < 0)

330 ? 
î∫o
 : 0;

333 
	`AGFREE
(
pMI
->
txt_d©a
);

334 
î∫o
 = 
ªs
;

336 
ªs
 = 
	`munm≠
(
pMI
->
txt_d©a
,ÖMI->
txt_fuŒ_size
);

338 i‡(
ªs
 != 0)

339 
îr‹_ªtu∫
;

341 
ªs
 = 
	`˛o£
(
pMI
->
txt_fd
);

342 i‡(
ªs
 != 0)

343 
îr‹_ªtu∫
;

345 
pMI
->
txt_fd
 = -1;

346 
î∫o
 = 0;

347 i‡(
pMI
->
txt_zîo_fd
 != -1) {

348 
ªs
 = 
	`˛o£
(
pMI
->
txt_zîo_fd
);

349 
pMI
->
txt_zîo_fd
 = -1;

352 
îr‹_ªtu∫
:

353 
pMI
->
txt_î∫o
 = 
î∫o
;

354  
ªs
;

357 
î∫o
 = 0;

363 i‡–
	`FILE_WRITABLE
(
pMI
->
txt_¥Ÿ
,ÖMI->
txt_Êags
)

364 && (
	`l£ek
(
pMI
->
txt_fd
, 0, 
SEEK_SET
) >= 0) ) {

365 
	`wrôe
(
pMI
->
txt_fd
,ÖMI->
txt_d©a
,ÖMI->
txt_size
);

368 
	`˛o£
(
pMI
->
txt_fd
);

369 
pMI
->
txt_fd
 = -1;

370 
pMI
->
txt_î∫o
 = 
î∫o
;

371 
	`‰ì
(
pMI
->
txt_d©a
);

373  
pMI
->
txt_î∫o
;

375 
	}
}

	@libopts/time.c

28 #i‚de‡
HAVE_PARSE_DURATION


29 
	~<time.h
>

31 
ölöe
 *

32 
	$ao_x°rdup
(c⁄° * 
pz
)

34 * 
°r
;

35 
	`AGDUPSTR
(
°r
, 
pz
, "time val str");

36  
°r
;

37 
	}
}

39 
	#x°rdup
(
_s
Ë
	`ao_x°rdup
(_s)

	)

41 
	~"∑r£-duøti⁄.c
"

43 #unde‡
x°rdup


57 
	$›ti⁄TimeVÆ
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
 )

59 
vÆ
;

61 i‡((
pOD
->
fO±Sèã
 & 
OPTST_RESET
) != 0)

64 
vÆ
 = 
	`∑r£_duøti⁄
(
pOD
->
›tArg
.
¨gSåög
);

65 i‡(
î∫o
 != 0)

66 
bad_time
;

68 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) {

69 
	`AGFREE
(
pOD
->
›tArg
.
¨gSåög
);

70 
pOD
->
fO±Sèã
 &~
OPTST_ALLOC_ARG
;

73 
pOD
->
›tArg
.
¨gI¡
 = 
vÆ
;

76 
bad_time
:

77 
	`Ârötf
(
°dîr
, 
zNŸNumbî
, 
pO±s
->
pzProgName
, 
pOD
->
›tArg
.
¨gSåög
);

78 i‡((
pO±s
->
fO±Së
 & 
OPTPROC_ERRSTOP
) != 0)

79 (*(
pO±s
->
pUßgeProc
))’O±s, 
EXIT_FAILURE
);

81 
pOD
->
›tArg
.
¨gI¡
 = ~0;

82 
	}
}

	@libopts/tokenize.c

26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

29 
	#cc_t
 c⁄° 

	)

30 
	#ch_t
 

	)

34 
c›y_cooked
(
ch_t
** 
µDe°
, c⁄° ** 
µSrc
);

37 
c›y_øw
(
ch_t
** 
µDe°
, c⁄° ** 
µSrc
);

39 
tokí_li°_t
 *

40 
Æloc_tokí_li°
(c⁄° * 
°r
);

44 
	$c›y_cooked
(
ch_t
** 
µDe°
, c⁄° ** 
µSrc
)

46 
ch_t
* 
pDe°
 = (ch_t*)*
µDe°
;

47 c⁄° 
ch_t
* 
pSrc
 = (c⁄° ch_t*)(*
µSrc
 + 1);

50 
ch_t
 
ch
 = *(
pSrc
++);

51 
ch
) {

52 
NUL
: *
µSrc
 = 
NULL
; ;

53 '"': 
d⁄e
;

55 
pSrc
 +
	`ao_°rög_cook_esˇ≥_ch¨
((*ÌSrc, (*)&
ch
, 0x7F);

56 i‡(
ch
 == 0x7F)

61 *(
pDe°
++Ë
ch
;

65 
d⁄e
:

66 *
µDe°
 = (
ch_t
*)
pDe°
;

67 *
µSrc
 = (c⁄° *)
pSrc
;

68 
	}
}

72 
	$c›y_øw
(
ch_t
** 
µDe°
, c⁄° ** 
µSrc
)

74 
ch_t
* 
pDe°
 = *
µDe°
;

75 
cc_t
* 
pSrc
 = (cc_t*Ë(*
µSrc
 + 1);

78 
ch_t
 
ch
 = *(
pSrc
++);

79 
ch
) {

80 
NUL
: *
µSrc
 = 
NULL
; ;

81 '\'': 
d⁄e
;

87 *
pSrc
) {

88 
NUL
: *
µSrc
 = 
NULL
; ;

90 i‡(*(++
pSrc
) == '\n')

91 ++
pSrc
;

95 ++
pSrc
;

99 
ch
 = '\'';

103 ++
pSrc
;

109 *(
pDe°
++Ë
ch
;

113 
d⁄e
:

114 *
µDe°
 = 
pDe°
;

115 *
µSrc
 = (c⁄° *Ë
pSrc
;

116 
	}
}

118 
tokí_li°_t
 *

119 
	$Æloc_tokí_li°
(c⁄° * 
°r
)

121 
tokí_li°_t
 * 
ªs
;

123 
max_tokí_˘
 = 2;

125 i‡(
°r
 =
NULL
Ë
í€¡_ªs
;

131 
	`IS_WHITESPACE_CHAR
(*
°r
)) str++;

132 i‡(*
°r
 =
NUL
Ë
í€¡_ªs
;

140 
cc_t
* 
pz
 = (cc_t*)
°r
;

143 
max_tokí_˘
++;

144 ! 
	`IS_WHITESPACE_CHAR
(*++
pz
))

145 i‡(*
pz
 =
NUL
Ë
found_nul
;

146 
	`IS_WHITESPACE_CHAR
(*
pz
))Öz++;

147 } *
pz
 !
NUL
);

149 
found_nul
:

150 
ªs
 = 
	`mÆloc
((*ªsË+ (
pz
 - (
cc_t
*)
°r
)

151 + (
max_tokí_˘
 * (
ch_t
*)));

154 i‡(
ªs
 =
NULL
)

155 
î∫o
 = 
ENOMEM
;

156 
ªs
->
tkn_li°
[0] = (
ch_t
*)‘es->tkn_li° + (
max_tokí_˘
 - 1));

158  
ªs
;

160 
í€¡_ªs
:

162 
î∫o
 = 
ENOENT
;

163  
NULL
;

164 
	}
}

231 
tokí_li°_t
*

232 
	$ao_°rög_tokíize
(c⁄°* 
°r
)

234 
tokí_li°_t
* 
ªs
 = 
	`Æloc_tokí_li°
(
°r
);

235 
ch_t
* 
pzDe°
;

240 i‡(
ªs
 =
NULL
)

241  
ªs
;

243 
pzDe°
 = (
ch_t
*)(
ªs
->
tkn_li°
[0]);

244 
ªs
->
tkn_˘
 = 0;

247 
ªs
->
tkn_li°
[Ñes->
tkn_˘
++ ] = 
pzDe°
;

249 
ch
 = (
ch_t
)*
°r
;

250 i‡(
	`IS_WHITESPACE_CHAR
(
ch
)) {

251 
found_whôe_•a˚
:

252 
	`IS_WHITESPACE_CHAR
(*++
°r
)) ;

256 
ch
) {

258 
	`c›y_cooked
(&
pzDe°
, &
°r
);

259 i‡(
°r
 =
NULL
) {

260 
	`‰ì
(
ªs
);

261 
î∫o
 = 
EINVAL
;

262  
NULL
;

264 i‡(
	`IS_WHITESPACE_CHAR
(*
°r
))

265 
found_whôe_•a˚
;

269 
	`c›y_øw
(&
pzDe°
, &
°r
);

270 i‡(
°r
 =
NULL
) {

271 
	`‰ì
(
ªs
);

272 
î∫o
 = 
EINVAL
;

273  
NULL
;

275 i‡(
	`IS_WHITESPACE_CHAR
(*
°r
))

276 
found_whôe_•a˚
;

279 
NUL
:

280 
c›y_d⁄e
;

283 
°r
++;

284 *(
pzDe°
++Ë
ch
;

286 } 
c›y_d⁄e
:;

291 *(
pzDe°
++Ë
NUL
;

292 } *
°r
 !
NUL
);

294 
ªs
->
tkn_li°
[Ñes->
tkn_˘
 ] = 
NULL
;

296  
ªs
;

297 
	}
}

299 #ifde‡
TEST


300 
	~<°dio.h
>

301 
	~<°rög.h
>

304 
	$maö
(
¨gc
, ** 
¨gv
)

306 i‡(
¨gc
 == 1) {

307 
	`¥ötf
("USAGE: %†¨g [ ... ]\n", *
¨gv
);

310 --
¨gc
 > 0) {

311 * 
¨g
 = *(++
¨gv
);

312 
tokí_li°_t
* 
p
 = 
	`ao_°rög_tokíize
(
¨g
);

313 i‡(
p
 =
NULL
) {

314 
	`¥ötf
("Parsing string ``%s'' failed:\n\terrno %d (%s)\n",

315 
¨g
, 
î∫o
, 
	`°ªº‹
(errno));

317 
ix
 = 0;

318 
	`¥ötf
("P¨£d såög ``%s''\nötÿ%dÅokís:\n", 
¨g
, 
p
->
tkn_˘
);

320 
	`¥ötf
(" %3d: ``%s''\n", 
ix
+1, 
p
->
tkn_li°
[ix]);

321 } ++
ix
 < 
p
->
tkn_˘
);

322 
	`‰ì
(
p
);

326 
	}
}

	@libopts/usage.c

39 
	#OPTPROC_L_N_S
 (
OPTPROC_LONGOPT
 | 
OPTPROC_SHORTOPT
)

	)

41 
¨g_ty≥s_t
 
	g¨gTy≥s
;

43 
FILE
* 
	g›ti⁄_ußge_Â
 = 
NULL
;

45 
	gzO±FmtLöe
[ 16 ];

46 
ag_boﬁ
 
	gdi•œyEnum
;

49 
ag_boﬁ


50 
checkGNUUßge
(
tO±i⁄s
* 
pO±s
);

53 
¥ötExãndedUßge
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
);

56 
¥ötInôLi°
(

57 
tCC
* c⁄°* 
∑pz
,

58 
ag_boﬁ
* 
pInôI¡ro
,

59 
tCC
* 
pzRc
,

60 
tCC
* 
pzPN
 );

63 
¥ötO±PªambÀ
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
);

66 
¥ötO√Ußge
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
);

69 
¥ötO±i⁄Ußge
(

70 
tO±i⁄s
 * 
pO±s
,

71 
ex_code
,

72 
tCC
 * 
pO±TôÀ
 );

75 
¥ötProgømDëaûs
(
tO±i⁄s
* 
pO±i⁄s
);

78 
£tGnuO±Fmts
(
tO±i⁄s
* 
pO±s
, 
tCC
** 
µT
);

81 
£tStdO±Fmts
(
tO±i⁄s
* 
pO±s
, 
tCC
** 
µT
);

89 
ag_boﬁ


90 
	$checkGNUUßge
(
tO±i⁄s
* 
pO±s
)

92 * 
pz
 = 
	`gëív
("AUTOOPTS_USAGE");

93 i‡(
pz
 =
NULL
)

96 i‡(
	`°ªqvcmp
(
pz
, "gnu") == 0)

97 
pO±s
->
fO±Së
 |
OPTPROC_GNUUSAGE
;

99 i‡(
	`°ªqvcmp
(
pz
, "autoopts") == 0)

100 
pO±s
->
fO±Së
 &~
OPTPROC_GNUUSAGE
;

102  (
pO±s
->
fO±Së
 & 
OPTPROC_GNUUSAGE
Ë? 
AG_TRUE
 : 
AG_FALSE
;

103 
	}
}

118 
	$›ti⁄O∆yUßge
(
tO±i⁄s
 * 
pO±s
, 
ex_code
)

120 
tCC
* 
pO±TôÀ
 = 
NULL
;

125 i‡(
	`checkGNUUßge
(
pO±s
)) {

126 ()
	`£tGnuO±Fmts
(
pO±s
, &
pO±TôÀ
);

129 ()
	`£tStdO±Fmts
(
pO±s
, &
pO±TôÀ
);

132 
	`¥ötO±i⁄Ußge
(
pO±s
, 
ex_code
, 
pO±TôÀ
);

134 
	`fÊush
(
›ti⁄_ußge_Â
);

135 i‡(
	`„º‹
(
›ti⁄_ußge_Â
) != 0) {

136 
	`Âuts
(
zOuçutFaû
, 
°dîr
);

137 
	`exô
(
EXIT_FAILURE
);

139 
	}
}

159 
	$›ti⁄Ußge
(
tO±i⁄s
 * 
pO±i⁄s
, 
ußge_exô_code
)

161 
a˘uÆ_exô_code
 =

162 (
ußge_exô_code
 =
EX_USAGE
Ë? 
EXIT_SUCCESS
 : usage_exit_code;

164 
di•œyEnum
 = 
AG_FALSE
;

175 c⁄° * 
pz
;

177 i‡(
a˘uÆ_exô_code
 =
EXIT_SUCCESS
) {

178 
pz
 = (
pO±i⁄s
->
°ru˘Vîsi⁄
 >= 30 * 4096)

179 ? 
pO±i⁄s
->
pzFuŒUßge
 : 
NULL
;

181 i‡(
›ti⁄_ußge_Â
 =
NULL
)

182 
›ti⁄_ußge_Â
 = 
°dout
;

184 
pz
 = (
pO±i⁄s
->
°ru˘Vîsi⁄
 >= 30 * 4096)

185 ? 
pO±i⁄s
->
pzSh‹tUßge
 : 
NULL
;

187 i‡(
›ti⁄_ußge_Â
 =
NULL
)

188 
›ti⁄_ußge_Â
 = 
°dîr
;

191 i‡(
pz
 !
NULL
) {

192 
	`Âuts
(
pz
, 
›ti⁄_ußge_Â
);

193 
	`exô
(
a˘uÆ_exô_code
);

197 
	`Ârötf
(
›ti⁄_ußge_Â
, 
pO±i⁄s
->
pzUßgeTôÀ
,ÖO±i⁄s->
pzProgName
);

200 
tCC
* 
pO±TôÀ
 = 
NULL
;

205 i‡(
	`checkGNUUßge
(
pO±i⁄s
)) {

206 
Êí
 = 
	`£tGnuO±Fmts
(
pO±i⁄s
, &
pO±TôÀ
);

207 
	`•rötf
(
zO±FmtLöe
, 
zFmtFmt
, 
Êí
);

208 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

211 
Êí
 = 
	`£tStdO±Fmts
(
pO±i⁄s
, &
pO±TôÀ
);

212 
	`•rötf
(
zO±FmtLöe
, 
zFmtFmt
, 
Êí
);

219 i‡–(
ußge_exô_code
 !
EXIT_SUCCESS
)

220 || ((
pO±i⁄s
->
pO±Desc
->
fO±Sèã
 & 
OPTST_DOCUMENT
) == 0) )

222 
	`Âuts
(
pO±TôÀ
, 
›ti⁄_ußge_Â
);

225 
	`¥ötO±i⁄Ußge
(
pO±i⁄s
, 
ußge_exô_code
, 
pO±TôÀ
);

231 
pO±i⁄s
->
fO±Së
 & 
OPTPROC_L_N_S
) {

232 
OPTPROC_L_N_S
: 
	`Âuts
(
zFœgOkay
, 
›ti⁄_ußge_Â
); ;

233 
OPTPROC_SHORTOPT
: ;

234 
OPTPROC_LONGOPT
: 
	`Âuts
(
zNoFœgs
, 
›ti⁄_ußge_Â
); ;

235 0: 
	`Âuts
(
zO±sO∆y
, 
›ti⁄_ußge_Â
); ;

238 i‡((
pO±i⁄s
->
fO±Së
 & 
OPTPROC_NUM_OPT
) != 0) {

239 
	`Âuts
(
zNumbîO±
, 
›ti⁄_ußge_Â
);

242 i‡((
pO±i⁄s
->
fO±Së
 & 
OPTPROC_REORDER
) != 0) {

243 
	`Âuts
(
zRe‹dî
, 
›ti⁄_ußge_Â
);

246 i‡(
pO±i⁄s
->
pzEx∂aö
 !
NULL
)

247 
	`Âuts
(
pO±i⁄s
->
pzEx∂aö
, 
›ti⁄_ußge_Â
);

253 i‡(
ußge_exô_code
 =
EXIT_SUCCESS
)

254 
	`¥ötProgømDëaûs
(
pO±i⁄s
);

256 i‡(
pO±i⁄s
->
pzBugAddr
 !
NULL
)

257 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zPlsSídBugs
, 
pO±i⁄s
->
pzBugAddr
);

259 
	`fÊush
(
›ti⁄_ußge_Â
);

261 i‡(
	`„º‹
(
›ti⁄_ußge_Â
) != 0) {

262 
a˘uÆ_exô_code
 = 
EXIT_FAILURE
;

263 
	`Âuts
(
zOuçutFaû
, 
°dîr
);

266 
	`exô
(
a˘uÆ_exô_code
);

267 
	}
}

275 
	$¥ötExãndedUßge
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
)

281 i‡–(
pOD
->
pO±Mu°
 !
NULL
)

282 || (
pOD
->
pO±C™t
 !
NULL
) ) {

284 
	`Âuts
(
zTabHyp
, 
›ti⁄_ußge_Â
);

289 i‡(
pOD
->
pO±Mu°
 !
NULL
) {

290 c⁄° * 
pO±No
 = 
pOD
->
pO±Mu°
;

292 
	`Âuts
(
zReqThe£
, 
›ti⁄_ußge_Â
);

294 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zTabout
,

295 
pO±i⁄s
->
pO±Desc
[*
pO±No
].
pz_Name
);

296 i‡(*++
pO±No
 =
NO_EQUIVALENT
)

300 i‡(
pOD
->
pO±C™t
 !
NULL
)

301 
	`Âuts
(
zTabHypAnd
, 
›ti⁄_ußge_Â
);

307 i‡(
pOD
->
pO±C™t
 !
NULL
) {

308 c⁄° * 
pO±No
 = 
pOD
->
pO±C™t
;

310 
	`Âuts
(
zProhib
, 
›ti⁄_ußge_Â
);

312 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zTabout
,

313 
pO±i⁄s
->
pO±Desc
[*
pO±No
].
pz_Name
);

314 i‡(*++
pO±No
 =
NO_EQUIVALENT
)

324 i‡(
pOD
->
pz_DißbÀName
 !
NULL
 )

325 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zDis
, 
pOD
->
pz_DißbÀName
);

330 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

331 
OPARG_TYPE_NUMERIC
:

336 i‡–(
pOD
->
pO±Proc
 !
NULL
)

337 && (
pOD
->
pO±Proc
 !
›ti⁄NumîicVÆ
) ) {

338 (*(
pOD
->
pO±Proc
))(
OPTPROC_EMIT_USAGE
,ÖOD);

342 
OPARG_TYPE_FILE
:

343 (*(
pOD
->
pO±Proc
))(
OPTPROC_EMIT_USAGE
,ÖOD);

351 i‡(
pOD
->
fO±Sèã
 & 
OPTST_INITENABLED
)

352 
	`Âuts
(
zE«b
, 
›ti⁄_ußge_Â
);

359 i‡–(
pOD
->
›tEquivIndex
 !
NO_EQUIVALENT
)

360 && (
pOD
->
›tEquivIndex
 !pOD->
›tA˘uÆIndex
 ) ) {

361 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zA…
,

362 
pO±i⁄s
->
pO±Desc
[ 
pOD
->
›tEquivIndex
 ].
pz_Name
);

372 i‡–((
pOD
->
fO±Sèã
 & 
OPTST_NO_INIT
) != 0)

373 && ( (
pO±i⁄s
->
∑pzHomeLi°
 !
NULL
)

374 || (
pO±i⁄s
->
pzPROGNAME
 !
NULL
)

376 && (
pOD
->
›tIndex
 < 
pO±i⁄s
->
¥e£tO±Ct
)

379 
	`Âuts
(
zNoPª£t
, 
›ti⁄_ußge_Â
);

384 i‡(
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
Ë=
OPARG_TYPE_MEMBERSHIP
)

385 
	`Âuts
(
zMembîs
, 
›ti⁄_ußge_Â
);

387 
pOD
->
›tMöCt
) {

390 
pOD
->
›tMaxCt
) {

391 0: 
	`Âuts
(
zPª£t
, 
›ti⁄_ußge_Â
); ;

392 
NOLIMIT
: 
	`Âuts
(
zNoLim
, 
›ti⁄_ußge_Â
); ;

397 : 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zUpTo
, 
pOD
->
›tMaxCt
); ;

405 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zMu°
, 
pOD
->
›tMöCt
,ÖOD->
›tMaxCt
);

408 i‡–
	`NAMED_OPTS
(
pO±i⁄s
)

409 && (
pO±i⁄s
->
•ecO±Idx
.
deÁu…_›t
 =
pOD
->
›tIndex
))

410 
	`Âuts
(
zDeÁu…O±
, 
›ti⁄_ußge_Â
);

411 
	}
}

422 
	$¥ötInôLi°
(

423 
tCC
* c⁄°* 
∑pz
,

424 
ag_boﬁ
* 
pInôI¡ro
,

425 
tCC
* 
pzRc
,

426 
tCC
* 
pzPN
 )

428 
zP©h
[ 
AG_PATH_MAX
+1 ];

430 i‡(
∑pz
 =
NULL
)

433 
	`Âuts
(
zPª£tI¡ro
, 
›ti⁄_ußge_Â
);

434 *
pInôI¡ro
 = 
AG_FALSE
;

437 c⁄°* 
pzP©h
 = *(
∑pz
++);

439 i‡(
pzP©h
 =
NULL
)

442 i‡(
	`›ti⁄MakeP©h
(
zP©h
, ()(zP©h), 
pzP©h
, 
pzPN
))

443 
pzP©h
 = 
zP©h
;

449 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zP©hFmt
, 
pzP©h
);

450 i‡(*
pzRc
 !
NUL
) {

451 
°©
 
sb
;

457 i‡–(
	`°©
(
pzP©h
, &
sb
) == 0)

458 && 
	`S_ISDIR
(
sb
.
°_mode
)) {

459 
	`Âutc
(
DIRCH
, 
›ti⁄_ußge_Â
);

460 
	`Âuts
(
pzRc
, 
›ti⁄_ußge_Â
);

464 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

466 
	}
}

470 
	$¥ötO±PªambÀ
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
)

478 i‡((
pO±i⁄s
->
fO±Së
 & 
OPTPROC_SHORTOPT
) == 0)

479 
	`Âuts
(
pAT
->
pzSpc
, 
›ti⁄_ußge_Â
);

481 i‡(! 
	`IS_GRAPHIC_CHAR
(
pOD
->
›tVÆue
)) {

482 i‡–(
pO±i⁄s
->
fO±Së
 & (
OPTPROC_GNUUSAGE
|
OPTPROC_LONGOPT
))

483 =(
OPTPROC_GNUUSAGE
|
OPTPROC_LONGOPT
))

484 
	`Âutc
(' ', 
›ti⁄_ußge_Â
);

485 
	`Âuts
(
pAT
->
pzNoF
, 
›ti⁄_ußge_Â
);

488 
	`Ârötf
(
›ti⁄_ußge_Â
, " -%c", 
pOD
->
›tVÆue
);

489 i‡–(
pO±i⁄s
->
fO±Së
 & (
OPTPROC_GNUUSAGE
|
OPTPROC_LONGOPT
))

490 =(
OPTPROC_GNUUSAGE
|
OPTPROC_LONGOPT
))

491 
	`Âuts
(", ", 
›ti⁄_ußge_Â
);

493 
	}
}

499 
	$¥ötO√Ußge
(
tO±i⁄s
 * 
pO±i⁄s
, 
tO±Desc
 * 
pOD
, 
¨g_ty≥s_t
 * 
pAT
)

501 
	`¥ötO±PªambÀ
(
pO±i⁄s
, 
pOD
, 
pAT
);

504 
z
[ 80 ];

505 
tCC
* 
pzArgTy≥
;

511 i‡(
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) {

512 
pzArgTy≥
 = 
pAT
->
pzO±
;

514 } 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

515 
OPARG_TYPE_NONE
: 
pzArgTy≥
 = 
pAT
->
pzNo
; ;

516 
OPARG_TYPE_ENUMERATION
: 
pzArgTy≥
 = 
pAT
->
pzKey
; ;

517 
OPARG_TYPE_FILE
 : 
pzArgTy≥
 = 
pAT
->
pzFûe
; ;

518 
OPARG_TYPE_MEMBERSHIP
: 
pzArgTy≥
 = 
pAT
->
pzKeyL
; ;

519 
OPARG_TYPE_BOOLEAN
: 
pzArgTy≥
 = 
pAT
->
pzBoﬁ
; ;

520 
OPARG_TYPE_NUMERIC
: 
pzArgTy≥
 = 
pAT
->
pzNum
; ;

521 
OPARG_TYPE_HIERARCHY
: 
pzArgTy≥
 = 
pAT
->
pzNe°
; ;

522 
OPARG_TYPE_STRING
: 
pzArgTy≥
 = 
pAT
->
pzSå
; ;

523 
OPARG_TYPE_TIME
: 
pzArgTy≥
 = 
pAT
->
pzTime
; ;

524 : 
bogus_desc
;

527 
	`¢¥ötf
(
z
, (z), 
pAT
->
pzO±Fmt
, 
pzArgTy≥
, 
pOD
->
pz_Name
,

528 (
pOD
->
›tMöCt
 !0Ë? 
pAT
->
pzReq
 :ÖAT->
pzO±
);

530 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zO±FmtLöe
, 
z
, 
pOD
->
pzText
);

532 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

533 
OPARG_TYPE_ENUMERATION
:

534 
OPARG_TYPE_MEMBERSHIP
:

535 
di•œyEnum
 = (
pOD
->
pO±Proc
 !
NULL
Ë? 
AG_TRUE
 : displayEnum;

540 
bogus_desc
:

541 
	`Ârötf
(
°dîr
, 
zInvÆO±Desc
, 
pOD
->
pz_Name
);

542 
	`exô
(
EX_SOFTWARE
);

543 
	}
}

550 
	$¥ötO±i⁄Ußge
(

551 
tO±i⁄s
 * 
pO±s
,

552 
ex_code
,

553 
tCC
 * 
pO±TôÀ
 )

555 
˘
 = 
pO±s
->
›tCt
;

556 
›tNo
 = 0;

557 
tO±Desc
 * 
pOD
 = 
pO±s
->
pO±Desc
;

558 
docCt
 = 0;

561 i‡((
pOD
->
fO±Sèã
 & 
OPTST_NO_USAGE_MASK
) != 0) {

569 i‡–(
pOD
->
fO±Sèã
 =(
OPTST_OMITTED
 | 
OPTST_NO_INIT
))

570 && (
pOD
->
pz_Name
 !
NULL
)

571 && (
ex_code
 =
EXIT_SUCCESS
)) {

573 c⁄° * 
why_pz
 =

574 (
pOD
->
pzText
 =
NULL
Ë? 
zDißbÀdWhy
 :ÖOD->pzText;

575 
	`¥ötO±PªambÀ
(
pO±s
, 
pOD
, &
¨gTy≥s
);

576 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zDißbÀdO±
, 
pOD
->
pz_Name
, 
why_pz
);

582 i‡((
pOD
->
fO±Sèã
 & 
OPTST_DOCUMENT
) != 0) {

583 i‡(
ex_code
 =
EXIT_SUCCESS
) {

584 
	`Ârötf
(
›ti⁄_ußge_Â
, 
¨gTy≥s
.
pzBrk
, 
pOD
->
pzText
,

585 
pO±TôÀ
);

586 
docCt
++;

599 i‡–(
pO±s
->
¥e£tO±Ct
 =
›tNo
)

600 && (
ex_code
 =
EXIT_SUCCESS
)

601 && (
docCt
 > 0)

602 && ((
pOD
[-1].
fO±Sèã
 & 
OPTST_DOCUMENT
) == 0) )

603 
	`Ârötf
(
›ti⁄_ußge_Â
, 
¨gTy≥s
.
pzBrk
, 
zAuto
, 
pO±TôÀ
);

605 
	`¥ötO√Ußge
(
pO±s
, 
pOD
, &
¨gTy≥s
);

611 i‡(
ex_code
 =
EXIT_SUCCESS
)

612 
	`¥ötExãndedUßge
(
pO±s
, 
pOD
, &
¨gTy≥s
);

614 } 
pOD
++, 
›tNo
++, (--
˘
 > 0));

616 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

617 
	}
}

625 
	$¥ötProgømDëaûs
(
tO±i⁄s
* 
pO±i⁄s
)

627 
ag_boﬁ
 
öôI¡ro
 = 
AG_TRUE
;

632 
	`¥ötInôLi°
(
pO±i⁄s
->
∑pzHomeLi°
, &
öôI¡ro
,

633 
pO±i⁄s
->
pzRcName
,ÖO±i⁄s->
pzProgP©h
);

638 i‡((
pO±i⁄s
->
fO±Së
 & 
OPTPROC_ENVIRON
) != 0) {

639 i‡(
öôI¡ro
)

640 
	`Âuts
(
zPª£tI¡ro
, 
›ti⁄_ußge_Â
);

642 
	`Ârötf
(
›ti⁄_ußge_Â
, 
zExamöeFmt
, 
pO±i⁄s
->
pzPROGNAME
);

650 i‡(
di•œyEnum
) {

651 
˘
 = 
pO±i⁄s
->
›tCt
;

652 
›tNo
 = 0;

653 
tO±Desc
* 
pOD
 = 
pO±i⁄s
->
pO±Desc
;

655 
	`Âutc
('\n', 
›ti⁄_ußge_Â
);

656 
	`fÊush
(
›ti⁄_ußge_Â
);

658 
	`OPTST_GET_ARGTYPE
(
pOD
->
fO±Sèã
)) {

659 
OPARG_TYPE_ENUMERATION
:

660 
OPARG_TYPE_MEMBERSHIP
:

661 (*(
pOD
->
pO±Proc
))(
OPTPROC_EMIT_USAGE
,ÖOD);

663 } 
pOD
++, 
›tNo
++, (--
˘
 > 0));

669 i‡(
pO±i⁄s
->
pzDëaû
 !
NULL
)

670 
	`Âuts
(
pO±i⁄s
->
pzDëaû
, 
›ti⁄_ußge_Â
);

671 
	}
}

689 
	$£tGnuO±Fmts
(
tO±i⁄s
* 
pO±s
, 
tCC
** 
µT
)

691 
Êí
 = 22;

692 *
µT
 = 
zNoRq_ShπTé
;

694 
¨gTy≥s
.
pzSå
 = 
zGnuSåArg
;

695 
¨gTy≥s
.
pzReq
 = 
zO√S∑˚
;

696 
¨gTy≥s
.
pzNum
 = 
zGnuNumArg
;

697 
¨gTy≥s
.
pzKey
 = 
zGnuKeyArg
;

698 
¨gTy≥s
.
pzKeyL
 = 
zGnuKeyLArg
;

699 
¨gTy≥s
.
pzTime
 = 
zGnuTimeArg
;

700 
¨gTy≥s
.
pzFûe
 = 
zGnuFûeArg
;

701 
¨gTy≥s
.
pzBoﬁ
 = 
zGnuBoﬁArg
;

702 
¨gTy≥s
.
pzNe°
 = 
zGnuNe°Arg
;

703 
¨gTy≥s
.
pzO±
 = 
zGnuO±Arg
;

704 
¨gTy≥s
.
pzNo
 = 
zO√S∑˚
;

705 
¨gTy≥s
.
pzBrk
 = 
zGnuBªak
;

706 
¨gTy≥s
.
pzNoF
 = 
zSixS∑˚s
;

707 
¨gTy≥s
.
pzSpc
 = 
zThªeS∑˚s
;

709 
pO±s
->
fO±Së
 & 
OPTPROC_L_N_S
) {

710 
OPTPROC_L_N_S
: 
¨gTy≥s
.
pzO±Fmt
 = 
zGnuO±Fmt
; ;

711 
OPTPROC_LONGOPT
: 
¨gTy≥s
.
pzO±Fmt
 = 
zGnuO±Fmt
; ;

712 0: 
¨gTy≥s
.
pzO±Fmt
 = 
zGnuO±Fmt
 + 2; ;

713 
OPTPROC_SHORTOPT
:

714 
¨gTy≥s
.
pzO±Fmt
 = 
zShπGnuO±Fmt
;

715 
zGnuSåArg
[0] = 
zGnuNumArg
[0] = 
zGnuKeyArg
[0] = 
zGnuBoﬁArg
[0] = ' ';

716 
¨gTy≥s
.
pzO±
 = " [arg]";

717 
Êí
 = 8;

721  
Êí
;

722 
	}
}

729 
	$£tStdO±Fmts
(
tO±i⁄s
* 
pO±s
, 
tCC
** 
µT
)

731 
Êí
 = 0;

733 
¨gTy≥s
.
pzSå
 = 
zStdSåArg
;

734 
¨gTy≥s
.
pzReq
 = 
zStdReqArg
;

735 
¨gTy≥s
.
pzNum
 = 
zStdNumArg
;

736 
¨gTy≥s
.
pzKey
 = 
zStdKeyArg
;

737 
¨gTy≥s
.
pzKeyL
 = 
zStdKeyLArg
;

738 
¨gTy≥s
.
pzTime
 = 
zStdTimeArg
;

739 
¨gTy≥s
.
pzFûe
 = 
zStdFûeArg
;

740 
¨gTy≥s
.
pzBoﬁ
 = 
zStdBoﬁArg
;

741 
¨gTy≥s
.
pzNe°
 = 
zStdNe°Arg
;

742 
¨gTy≥s
.
pzO±
 = 
zStdO±Arg
;

743 
¨gTy≥s
.
pzNo
 = 
zStdNoArg
;

744 
¨gTy≥s
.
pzBrk
 = 
zStdBªak
;

745 
¨gTy≥s
.
pzNoF
 = 
zFiveS∑˚s
;

746 
¨gTy≥s
.
pzSpc
 = 
zTwoS∑˚s
;

748 
pO±s
->
fO±Së
 & (
OPTPROC_NO_REQ_OPT
 | 
OPTPROC_SHORTOPT
)) {

749 (
OPTPROC_NO_REQ_OPT
 | 
OPTPROC_SHORTOPT
):

750 *
µT
 = 
zNoRq_ShπTé
;

751 
¨gTy≥s
.
pzO±Fmt
 = 
zNrmO±Fmt
;

752 
Êí
 = 19;

755 
OPTPROC_NO_REQ_OPT
:

756 *
µT
 = 
zNoRq_NoShπTé
;

757 
¨gTy≥s
.
pzO±Fmt
 = 
zNrmO±Fmt
;

758 
Êí
 = 19;

761 
OPTPROC_SHORTOPT
:

762 *
µT
 = 
zReq_ShπTé
;

763 
¨gTy≥s
.
pzO±Fmt
 = 
zReqO±Fmt
;

764 
Êí
 = 24;

768 *
µT
 = 
zReq_NoShπTé
;

769 
¨gTy≥s
.
pzO±Fmt
 = 
zReqO±Fmt
;

770 
Êí
 = 24;

773  
Êí
;

774 
	}
}

	@libopts/value-type.c

20 
	~"vÆue-ty≥.h
"

23 c⁄° * 
	mvç_«me
;

24 
vÆue_ty≥_íum_t
 
	mvç_id
;

25 } 
	tvÆue_ty≥_m≠_t
;

26 
	~<°rög.h
>

30 #ifde‡
__GNUC__


32 #ifde‡
__˝lu•lus


35 
ölöe
 

36 
	$vÆue_ty≥_hash
 (c⁄° *
°r
, 
Àn
)

38 c⁄° 
asso_vÆues
[] =

67  
Àn
 + 
asso_vÆues
[()
°r
[2]];

68 
	}
}

70 c⁄° 
vÆue_ty≥_m≠_t
 
	gvÆue_ty≥_èbÀ
[] =

72 {"",
VTP_COUNT_KWD
}, {"",VTP_COUNT_KWD},

73 {"",
VTP_COUNT_KWD
},

74 {"£t", 
VTP_KWD_SET
},

75 {"",
VTP_COUNT_KWD
}, {"",VTP_COUNT_KWD},

76 {"√°ed", 
VTP_KWD_NESTED
},

77 {"öãgî", 
VTP_KWD_INTEGER
},

78 {"",
VTP_COUNT_KWD
},

79 {"boﬁ", 
VTP_KWD_BOOL
},

80 {"",
VTP_COUNT_KWD
},

81 {"°rög", 
VTP_KWD_STRING
},

82 {"boﬁón", 
VTP_KWD_BOOLEAN
},

83 {"",
VTP_COUNT_KWD
},

84 {"£t-membîshù", 
VTP_KWD_SET_MEMBERSHIP
},

85 {"",
VTP_COUNT_KWD
}, {"",VTP_COUNT_KWD},

86 {"keyw‹d", 
VTP_KWD_KEYWORD
},

87 {"",
VTP_COUNT_KWD
},

88 {"hõørchy", 
VTP_KWD_HIERARCHY
},

89 {"",
VTP_COUNT_KWD
}, {"",VTP_COUNT_KWD},

90 {"övÆid", 
VTP_KWD_INVALID
}

93 #ifde‡
__GNUC__


94 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


95 
__©åibuã__
 ((
__gnu_ölöe__
))

98 
ölöe
 c⁄° 
vÆue_ty≥_m≠_t
 *

99 
	$föd_vÆue_ty≥_«me
 (c⁄° *
°r
, 
Àn
)

101 i‡(
Àn
 <= 14 &&Üen >= 3)

103 
key
 = 
	`vÆue_ty≥_hash
 (
°r
, 
Àn
);

105 i‡(
key
 <= 22 && key >= 0)

107 c⁄° *
s
 = 
vÆue_ty≥_èbÀ
[
key
].
vç_«me
;

109 i‡(*
°r
 =*
s
 && !
	`°∫cmp
 (°∏+ 1, s + 1, 
Àn
 - 1) && s[len] == '\0')

110  &
vÆue_ty≥_èbÀ
[
key
];

114 
	}
}

117 
vÆue_ty≥_íum_t


118 
	$föd_vÆue_ty≥_id
(c⁄° * 
°r
, 
Àn
)

120 c⁄° 
vÆue_ty≥_m≠_t
 * 
p
 =

121 
	`föd_vÆue_ty≥_«me
(
°r
, 
Àn
);

122  (
p
 =0Ë? 
VTP_KWD_INVALID
 :Ö->
vç_id
;

123 
	}
}

	@libopts/value-type.h

6 #i‚de‡
AUTOOPTS_VALUE_TYPE_H_GUARD


7 
	#AUTOOPTS_VALUE_TYPE_H_GUARD
 1

	)

10 
	mVTP_KWD_INVALID
,

11 
	mVTP_KWD_STRING
,

12 
	mVTP_KWD_INTEGER
,

13 
	mVTP_KWD_BOOLEAN
,

14 
	mVTP_KWD_BOOL
,

15 
	mVTP_KWD_KEYWORD
,

16 
	mVTP_KWD_SET
,

17 
	mVTP_KWD_SET_MEMBERSHIP
,

18 
	mVTP_KWD_NESTED
,

19 
	mVTP_KWD_HIERARCHY
,

20 
	mVTP_COUNT_KWD


21 } 
	tvÆue_ty≥_íum_t
;

23 
vÆue_ty≥_íum_t


24 
föd_vÆue_ty≥_id
(c⁄° * 
°r
, 
Àn
);

	@libopts/version.c

33 
¥ötVîsi⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
, 
FILE
* 
Â
);

46 
	$›ti⁄Vîsi⁄
()

48 c⁄° 
zVîsi⁄
[] =

49 
	`STR
(
AO_CURRENT
.
AO_REVISION
);

51  
zVîsi⁄
;

52 
	}
}

56 
	$¥ötVîsi⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
, 
FILE
* 
Â
)

58 
swCh
;

64 i‡–((
pOD
->
fO±Sèã
 & 
OPTST_ARG_OPTIONAL
) == 0)

65 || (
pOD
->
›tArg
.
¨gSåög
 =
NULL
))

66 
swCh
 = 'v';

67 
swCh
 = 
	`tﬁowî
(
pOD
->
›tArg
.
¨gSåög
[0]);

69 i‡(
pO±s
->
pzFuŒVîsi⁄
 !
NULL
) {

70 
	`Âuts
(
pO±s
->
pzFuŒVîsi⁄
, 
Â
);

71 
	`Âutc
('\n', 
Â
);

74 c⁄° *
pz
 = 
pO±s
->
pzUßgeTôÀ
;

75 dÿ{ 
	`Âutc
(*
pz
, 
Â
); } *(pz++) != '\n');

78 
swCh
) {

79 
NUL
:

84 i‡(
pO±s
->
pzC›yright
 !
NULL
) {

85 
	`Âuts
(
pO±s
->
pzC›yright
, 
Â
);

86 
	`Âutc
('\n', 
Â
);

88 
	`Ârötf
(
Â
, 
zAO_Vî
, 
	`›ti⁄Vîsi⁄
());

89 i‡(
pO±s
->
pzBugAddr
 !
NULL
)

90 
	`Ârötf
(
Â
, 
zPlsSídBugs
, 
pO±s
->
pzBugAddr
);

94 i‡(
pO±s
->
pzC›yright
 !
NULL
) {

95 
	`Âuts
(
pO±s
->
pzC›yright
, 
Â
);

96 
	`Âutc
('\n', 
Â
);

97 
	`Âutc
('\n', 
Â
);

100 i‡(
pO±s
->
pzC›yNŸi˚
 !
NULL
) {

101 
	`Âuts
(
pO±s
->
pzC›yNŸi˚
, 
Â
);

102 
	`Âutc
('\n', 
Â
);

105 
	`Ârötf
(
Â
, 
zAO_Vî
, 
	`›ti⁄Vîsi⁄
());

106 i‡(
pO±s
->
pzBugAddr
 !
NULL
)

107 
	`Ârötf
(
Â
, 
zPlsSídBugs
, 
pO±s
->
pzBugAddr
);

111 
	`Ârötf
(
°dîr
, 
zBadVîArg
, 
swCh
);

112 
	`exô
(
EXIT_FAILURE
);

115 
	`fÊush
(
Â
);

116 i‡(
	`„º‹
(
Â
) != 0) {

117 
	`Âuts
(
zOuçutFaû
, 
°dîr
);

118 
	`exô
(
EXIT_FAILURE
);

120 
	`exô
(
EXIT_SUCCESS
);

121 
	}
}

139 
	$›ti⁄PrötVîsi⁄
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
)

141 
	`¥ötVîsi⁄
(
pO±s
, 
pOD
, 
°dout
);

142 
	}
}

155 
	$›ti⁄Vîsi⁄Stdîr
(
tO±i⁄s
* 
pO±s
, 
tO±Desc
* 
pOD
)

157 
	`¥ötVîsi⁄
(
pO±s
, 
pOD
, 
°dîr
);

158 
	}
}

	@libopts/xat-attribute.c

20 
	~"x©-©åibuã.h
"

23 c⁄° * 
	mx©_«me
;

24 
x©_©åibuã_íum_t
 
	mx©_id
;

25 } 
	tx©_©åibuã_m≠_t
;

26 
	~<°rög.h
>

30 #ifde‡
__GNUC__


32 #ifde‡
__˝lu•lus


35 
ölöe
 

36 
	$x©_©åibuã_hash
 (c⁄° *
°r
, 
Àn
)

38 c⁄° 
asso_vÆues
[] =

67  
Àn
 + 
asso_vÆues
[()
°r
[0]];

68 
	}
}

70 c⁄° 
x©_©åibuã_m≠_t
 
	gx©_©åibuã_èbÀ
[] =

72 {"",
XAT_COUNT_KWD
}, {"",XAT_COUNT_KWD},

73 {"",
XAT_COUNT_KWD
}, {"",XAT_COUNT_KWD},

74 {"ty≥", 
XAT_KWD_TYPE
},

75 {"w‹ds", 
XAT_KWD_WORDS
},

76 {"cooked", 
XAT_KWD_COOKED
},

77 {"membîs", 
XAT_KWD_MEMBERS
},

78 {"uncooked", 
XAT_KWD_UNCOOKED
},

79 {"kìp", 
XAT_KWD_KEEP
},

80 {"",
XAT_COUNT_KWD
}, {"",XAT_COUNT_KWD},

81 {"övÆid", 
XAT_KWD_INVALID
}

84 #ifde‡
__GNUC__


85 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


86 
__©åibuã__
 ((
__gnu_ölöe__
))

89 
ölöe
 c⁄° 
x©_©åibuã_m≠_t
 *

90 
	$föd_x©_©åibuã_«me
 (c⁄° *
°r
, 
Àn
)

92 i‡(
Àn
 <= 8 &&Üen >= 4)

94 
key
 = 
	`x©_©åibuã_hash
 (
°r
, 
Àn
);

96 i‡(
key
 <= 12 && key >= 0)

98 c⁄° *
s
 = 
x©_©åibuã_èbÀ
[
key
].
x©_«me
;

100 i‡(*
°r
 =*
s
 && !
	`°∫cmp
 (°∏+ 1, s + 1, 
Àn
 - 1) && s[len] == '\0')

101  &
x©_©åibuã_èbÀ
[
key
];

105 
	}
}

108 
x©_©åibuã_íum_t


109 
	$föd_x©_©åibuã_id
(c⁄° * 
°r
, 
Àn
)

111 c⁄° 
x©_©åibuã_m≠_t
 * 
p
 =

112 
	`föd_x©_©åibuã_«me
(
°r
, 
Àn
);

113  (
p
 =0Ë? 
XAT_KWD_INVALID
 :Ö->
x©_id
;

114 
	}
}

	@libopts/xat-attribute.h

6 #i‚de‡
AUTOOPTS_XAT_ATTRIBUTE_H_GUARD


7 
	#AUTOOPTS_XAT_ATTRIBUTE_H_GUARD
 1

	)

10 
	mXAT_KWD_INVALID
,

11 
	mXAT_KWD_TYPE
,

12 
	mXAT_KWD_WORDS
,

13 
	mXAT_KWD_MEMBERS
,

14 
	mXAT_KWD_COOKED
,

15 
	mXAT_KWD_UNCOOKED
,

16 
	mXAT_KWD_KEEP
,

17 
	mXAT_COUNT_KWD


18 } 
	tx©_©åibuã_íum_t
;

20 
x©_©åibuã_íum_t


21 
föd_x©_©åibuã_id
(c⁄° * 
°r
, 
Àn
);

	@profiler/Client.c

21 
	~"Clõ¡.h
"

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

24 #i‚de‡
WIN32


25 
	~<uni°d.h
>

28 
	#BUFFER_SIZE
 256

	)

30 
SOCKET
 
	$O≥n
 (
unix_sockës
) {

32 i‡(
unix_sockës
) {

33  
	`sockë
 (
AF_UNIX
, 
SOCK_STREAM
, 0);

35  
	`sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

37 
	}
}

39 #ifde‡
__˝lu•lus


43 
Síd
 (
SOCKET
 
fd
, *
buf„r
, 
Àn
) {

45  
£nd
 (
fd
, 
buf„r
, 
Àn
, 0);

48 
Re˚ive
 (
SOCKET
 
fd
, *
buf„r
, 
Àn
) {

50  
ªcv
 (
fd
, 
buf„r
, 
Àn
, 0);

53 
SOCKET
 
C⁄√˘
 (
unix_sockës
, c⁄° *
ho°«me
, 
p‹t
, c⁄° *
sock_fûe
, 
id
) {

55 #i‚de‡
WIN32


56 
sockaddr_un
 
£rvî_addr_un
;

58 
sockaddr_ö
 
£rvî_addr_ö
;

59 
sockaddr
 *
£rvî_addr
 = 
NULL
;

60 
ho°ít
 *
£rvî
 = 
NULL
;

61 
SOCKET
 
fd
;

62 
Àngth
;

64 #ifde‡
WIN32


68 
WSADATA
 
wßD©a
;

69 i‡(
WSASèπup
(
MAKEWORD
(2,2), &
wßD©a
Ë!
NO_ERROR
) {

70 
¥ötf
 ("Error Starting Winsock\n");

71 
exô
 (1);

78 i‡((
fd
 = 
O≥n
 (
unix_sockës
)Ë=
INVALID_SOCKET
) {

79  
INVALID_SOCKET
;

82 #i‚de‡
WIN32


83 i‡(
unix_sockës
) {

84 
mem£t
 ((*)&
£rvî_addr_un
, '\0',  (server_addr_un));

85 
£rvî_addr_un
.
sun_Ámûy
 = 
AF_UNIX
;

86 
°r˝y
 (
£rvî_addr_un
.
sun_∑th
, 
sock_fûe
);

87 
£rvî_addr
 = (
sockaddr
 *)&
£rvî_addr_un
;

88 
Àngth
 = 
°æí
 (
£rvî_addr_un
.
sun_∑th
Ë+  (£rvî_addr_un.
sun_Ámûy
);

91 
mem£t
 ((*)&
£rvî_addr_ö
, '\0',  (server_addr_in));

92 
£rvî
 = 
gëho°by«me
 (
ho°«me
);

94 i‡((*Ë
£rvî
 =
NULL
) {

95 
¥ötf
 ("InvÆid SîvîÇamê%s\n", 
ho°«me
);

96  
INVALID_SOCKET
;

99 
£rvî_addr_ö
.
sö_Ámûy
 = 
AF_INET
;

100 
memmove
 ((*)&
£rvî_addr_ö
.
sö_addr
.
s_addr
, (*)
£rvî
->
h_addr
,

101 
£rvî
->
h_Àngth
);

102 
£rvî_addr_ö
.
sö_p‹t
 = 
ht⁄s
 (
p‹t
);

103 
£rvî_addr
 = (
sockaddr
 *)&
£rvî_addr_ö
;

104 
Àngth
 =  (
£rvî_addr_ö
);

105 #i‚de‡
WIN32


112 i‡(
c⁄√˘
 (
fd
, 
£rvî_addr
, 
Àngth
) < 0) {

113 
Ârötf
 (
°dîr
, "Clõ¡ %d u«bÀÅÿc⁄√˘Åÿ£rvî,Åhêîro†is: %s\n", 
id
, 
°ªº‹
(
î∫o
));

114  
INVALID_SOCKET
;

117  
fd
;

120 
Disc⁄√˘
 (
SOCKET
 
fd
) {

122 #i‚de‡
WIN32


123 
˛o£
 (
fd
);

125 
˛o£sockë
 (
fd
);

126 
WSACÀ™up
();

130 #ifde‡
__˝lu•lus


	@profiler/Client.h

21 #i‚de‡
_CLIENT_H


22 
	#_CLIENT_H


	)

24 
	~<sys/ty≥s.h
>

25 #i‚de‡
WIN32


26 
	~<uni°d.h
>

27 
	~<sys/un.h
>

28 
	~<sys/sockë.h
>

29 
	~<√tdb.h
>

30 
	~<√töë/ö.h
>

31 
	tSOCKET
;

32 
	#INVALID_SOCKET
 -1

	)

33 
	#SOCKET_ERROR
 -1

	)

35 
	~<wösock2.h
>

37 
	~<°dio.h
>

46 #ifde‡
__˝lu•lus


50 
SOCKET
 
C⁄√˘
 (
unix_sockës
, c⁄° *
£rvî
, 
p‹t
,

51 c⁄° *
sockfûe
, 
id
);

58 
Síd
 (
SOCKET
 
fd
, *
buf„r
, 
Àn
);

65 
Re˚ive
 (
SOCKET
 
fd
, *
buf„r
, 
Àn
);

71 
Disc⁄√˘
 (
SOCKET
 
fd
);

73 #ifde‡
__˝lu•lus


	@profiler/HashMap.c

21 
	~"HashM≠.h
"

22 
	~"mem.h
"

24 
	göô_d⁄e
 = 0;

27 
	$HashM≠_Inô
 (
HashM≠
 *
m≠
) {

28 
i
;

30 i‡(
m≠
 =
NULL
 || 
öô_d⁄e
) {

33 
i
 = 0; i < 
HASH_SIZE
; i++) {

34 (*
m≠
)[
i
] = 
NULL
;

36 
öô_d⁄e
 = 1;

37 
	}
}

40 
HashNode
 * 
	$HashNode_Cª©e
 (
key
, 
MPI_Reque°
 *
ªq
, *
ív
) {

42 
HashNode
 *
node
 = (HashNodê*)
	`mÆloc
((HashNode));

43 
node
->
key
 = key;

44 
node
->
ªq
 = (
MPI_Reque°
 *)
	`mÆloc
((MPI_Request));

45 
	`mem˝y
(
node
->
ªq
,Ñeq, (
MPI_Reque°
));

46 
node
->
ív
 = 
	`°rdup
(env);

47 
node
->
√xt
 = 
NULL
;

48  
node
;

49 
	}
}

52 
	$HashM≠_In£π
 (
HashM≠
 *
m≠
, 
key
, 
MPI_Reque°
 *
ªq
, *
ív
) {

53 
HashNode
 *
hód
 = 
NULL
;

54 
HashNode
 *
node
 = 
NULL
;

55 
HashNode
 *
p
 = 
NULL
;

56 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

57 
node
 = 
	`HashNode_Cª©e
 (
key
, 
ªq
, 
ív
);

58 i‡(! 
hód
) {

59 (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
] = 
node
;

62 
p
 = 
hód
; ;∞p->
√xt
) {

63 i‡(
p
->
key
 == key) {

64 
	`‰ì
 (
p
->
ív
);

65 
p
->
ív
 = 
node
->env;

66 
	`‰ì
 (
p
->
ªq
);

67 
p
->
ªq
 = 
node
->req;

68 
	`‰ì
 (
node
);

71 i‡(
p
->
√xt
 =
NULL
) {

75 
p
->
√xt
 = 
node
;

77 
	}
}

80 
MPI_Reque°
 *
	$HashM≠_GëReque°
 (
HashM≠
 *
m≠
, 
key
) {

81 
HashNode
 *
hód
 = 
NULL
;

82 
HashNode
 *
p
 = 
NULL
;

83 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

84 i‡(! 
hód
) {

85  
NULL
;

87 
p
 = 
hód
;Ö !
NULL
;Ö =Ö->
√xt
) {

88 i‡(
p
->
key
 == key) {

89  
p
->
ªq
;

92  
NULL
;

93 
	}
}

96 *
	$HashM≠_GëEnv
 (
HashM≠
 *
m≠
, 
key
) {

97 
HashNode
 *
hód
 = 
NULL
;

98 
HashNode
 *
p
 = 
NULL
;

99 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

100 i‡(! 
hód
) {

101  
NULL
;

103 
p
 = 
hód
;Ö !
NULL
;Ö =Ö->
√xt
) {

104 i‡(
p
->
key
 == key) {

105  
p
->
ív
;

108  
NULL
;

109 
	}
}

112 
	$HashM≠_Dñëe
 (
HashM≠
 *
m≠
, 
key
) {

113 
HashNode
 *
p
, *
¥ev
;

114 
¥ev
 = (
HashNode
*Ë&(*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

115 
p
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

116 
p
 &&Ö->
key
 != key) {

117 
¥ev
 = 
p
;

118 
p
 =Ö->
√xt
;

120 i‡(
p
) {

121 
¥ev
->
√xt
 = 
p
->next;

122 
	`‰ì
(
p
->
ív
);

123 
	`‰ì
(
p
->
ªq
);

124 
	`‰ì
(
p
);

126 
	}
}

129 
	$HashM≠_Upd©eEnv
 (
HashM≠
 *
m≠
, 
key
, *
ív
) {

130 
HashNode
 *
hód
 = 
NULL
;

131 
HashNode
 *
p
 = 
NULL
;

132 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

133 i‡(! 
hód
) {

136 
p
 = 
hód
;Ö !
NULL
;Ö =Ö->
√xt
) {

137 i‡(
p
->
key
 == key) {

139 
p
->
ív
 =Énv;

143 
	}
}

145 
	$HashM≠_De°roy
(
HashM≠
 *
m≠
) {

146 
ønk
;

147 
HashNode
 *
n
, *
p
;

148 
i
=0;

152 
i
=0; i<
HASH_SIZE
; i++) {

154 
p
 = (*
m≠
)[
i
];Ö !=
NULL
;Ö = 
n
) {

157 
	`‰ì
 (
p
->
ív
);

161 
	`‰ì
 (
p
->
ªq
);

164 
n
 = 
p
->
√xt
;

166 
	`‰ì
(
p
);

172 
	}
}

	@profiler/HashMap.h

21 #i‚de‡
_HASHMAP_H


22 
	#_HASHMAP_H


	)

24 
	~<mpi.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

28 
	#HASH_SIZE
 10

	)

35 
	sHashNode_t
 {

36 
HashNode_t
 *
	m√xt
;

37 
	mkey
;

38 
MPI_Reque°
 *
	mªq
;

39 *
	mív
;

40 } 
	tHashNode
;

42 
HashNode
 * 
	tHashNodï
;

44 
HashNodï
 
	tHashM≠
[
HASH_SIZE
];

49 
HashM≠_Inô
 (
HashM≠
 *);

53 
HashM≠_In£π
 (
HashM≠
 *, , 
MPI_Reque°
 *, *);

57 
MPI_Reque°
 * 
HashM≠_GëReque°
 (
HashM≠
 *, );

61 * 
HashM≠_GëEnv
 (
HashM≠
 *, );

65 
HashM≠_Dñëe
 (
HashM≠
 *, );

67 
HashM≠_Upd©eEnv
(
HashM≠
*, , *);

69 
HashM≠_De°roy
(
HashM≠
*);

	@profiler/HashMap_comm.c

20 
	~"HashM≠_comm.h
"

21 
	~"°dio.h
"

22 
	~"mem.h
"

24 
	$HashM≠Comm_Inô
 (
HashM≠Comm
 *
m≠
) {

25 
i
;

26 
MPI_Comm
 
comm_w‹ld
 = 
MPI_COMM_WORLD
;

27 
MPI_Comm
 
comm_£lf
 = 
MPI_COMM_SELF
;

28 
MPI_Comm
 
comm_nuŒ
 = 
MPI_COMM_NULL
;

30 i‡(
m≠
 =
NULL
) {

33 
i
 = 0; i < 
HASH_SIZE
; i++) {

34 (*
m≠
)[
i
] = 
NULL
;

36 
	`HashM≠Comm_In£π
 (
m≠
, &
comm_w‹ld
, 0);

37 
	`HashM≠Comm_In£π
 (
m≠
, &
comm_£lf
, 1);

38 
	`HashM≠Comm_In£π
 (
m≠
, &
comm_nuŒ
, 2);

39 
	}
}

41 
HashNodeComm
 * 
	$HashNodeComm_Cª©e
 (
MPI_Comm
 *
comm
, 
id
) {

43 
HashNodeComm
 *
node
 = (HashNodeComm *)
	`mÆloc
((HashNodeComm));

44 
node
->
key
 = *((*)
comm
);

45 
node
->
comm
 = (
MPI_Comm
 *)
	`mÆloc
((MPI_Comm));

46 
	`mem˝y
(
node
->
comm
, comm, (
MPI_Comm
));

47 
node
->
id
 = id;

48 
node
->
√xt
 = 
NULL
;

49  
node
;

50 
	}
}

52 
	$HashM≠Comm_In£π
 (
HashM≠Comm
 *
m≠
, 
MPI_Comm
 *
comm
, 
id
) {

53 
HashNodeComm
 *
hód
 = 
NULL
;

54 
HashNodeComm
 *
node
 = 
NULL
;

55 
HashNodeComm
 *
p
 = 
NULL
;

56 
key
 = *((*)
comm
);

57 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

58 
node
 = 
	`HashNodeComm_Cª©e
 (
comm
, 
id
);

59 i‡(! 
hód
) {

60 (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
] = 
node
;

63 
p
 = 
hód
; ;∞p->
√xt
) {

64 i‡(
p
->
key
 =key && *p->
comm
 == *comm) {

65 
p
->
id
 = id;

66 
	`‰ì
 (
node
->
comm
);

67 
	`‰ì
 (
node
);

70 i‡(
p
->
√xt
 =
NULL
) {

74 
p
->
√xt
 = 
node
;

76 
	}
}

78 
	$HashM≠Comm_GëId
 (
HashM≠Comm
 *
m≠
, 
MPI_Comm
 *
comm
) {

79 
HashNodeComm
 *
hód
 = 
NULL
;

80 
HashNodeComm
 *
p
 = 
NULL
;

81 
key
 = *((*)
comm
);

82 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

83 i‡(! 
hód
) {

84  *((*)
comm
);

86 
p
 = 
hód
;Ö !
NULL
;Ö =Ö->
√xt
) {

87 i‡(
p
->
key
 =key && *p->
comm
 == *comm) {

88  
p
->
id
;

92 
	}
}

94 
	$HashM≠Comm_Dñëe
 (
HashM≠Comm
 *
m≠
, 
MPI_Comm
 *
comm
) {

95 
HashNodeComm
 *
p
, *
¥ev
;

96 
key
 = *((*)
comm
);

98 
¥ev
 = (
HashNodeComm
*Ë&(*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

99 
p
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

100 
p
 &&Ö->
key
 != key) {

101 
¥ev
 = 
p
;

102 
p
 =Ö->
√xt
;

104 i‡(
p
) {

105 
¥ev
->
√xt
 = 
p
->next;

106 
	`‰ì
 (
p
->
comm
);

107 
	`‰ì
 (
p
);

109 
	}
}

111 
	$HashM≠Comm_De°roy
(
HashM≠Comm
 *
m≠
) {

112 
HashNodeComm
 *
n
, *
p
;

113 
i
;

114 
i
=0; i<
HASH_SIZE
; i++) {

115 
p
 = (*
m≠
)[
i
];Ö !=
NULL
;Ö = 
n
) {

116 
	`‰ì
 (
p
->
comm
);

117 
n
 = 
p
->
√xt
;

119 
	`‰ì
(
p
);

123 
	}
}

	@profiler/HashMap_comm.h

21 #i‚de‡
_HASHMAP_COMM_H


22 
	#_HASHMAP_COMM_H


	)

24 
	~<mpi.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

28 
	#HASH_SIZE
 10

	)

35 
	sHashNodeComm_t
 {

36 
HashNodeComm_t
 *
	m√xt
;

37 
	mkey
;

38 
MPI_Comm
 *
	mcomm
;

39 
	mid
;

40 } 
	tHashNodeComm
;

42 
HashNodeComm
 * 
	tHashNodeCommp
;

44 
HashNodeCommp
 
	tHashM≠Comm
[
HASH_SIZE
];

49 
HashM≠Comm_Inô
 (
HashM≠Comm
 *);

53 
HashM≠Comm_In£π
 (
HashM≠Comm
 *, 
MPI_Comm
 *, );

57 
HashM≠Comm_GëId
 (
HashM≠Comm
 *, 
MPI_Comm
 *);

61 
HashM≠Comm_Dñëe
 (
HashM≠Comm
 *, 
MPI_Comm
 *);

63 
HashM≠Comm_De°roy
(
HashM≠Comm
 *);

	@profiler/HashMap_match.c

21 
	~"HashM≠_m©ch.h
"

22 
	~<°dio.h
>

23 
	~"mem.h
"

26 
	$HashM≠M©ch_Inô
 (
HashM≠M©ch
 *
m≠
) {

27 
i
;

29 i‡(
m≠
 =
NULL
) {

32 
i
 = 0; i < 
HASH_SIZE
; i++) {

33 (*
m≠
)[
i
] = 
NULL
;

35 
	}
}

38 
size_t
 
	$GëTy≥Size
 (
ty≥
) {

40 
ty≥
) {

41 
TYPE_REQUEST
:

42 
TYPE_PERSIST_REQUEST
:

43  (
MPI_Reque°
);

44 
TYPE_COMM
:

45  (
MPI_Comm
);

46 
TYPE_TYPE
:

47  (
MPI_D©©y≥
);

51 
	}
}

54 
HashNodeM©ch
 * 
	$HashNodeM©ch_Cª©e
 (*
d©a
, 
ty≥
, c⁄° *
fûe
, 
löe
) {

56 
HashNodeM©ch
 *
node
 = (HashNodeM©ch *)
	`mÆloc
((HashNodeMatch));

57 
node
->
key
 = *((*)
d©a
);

58 
node
->
d©a
 = 
	`mÆloc
(
	`GëTy≥Size
(
ty≥
));

59 
node
->
ty≥
 =Åype;

60 
node
->
fûe
 = 
	`°rdup
(file);

61 
node
->
löe
 =Üine;

62 
	`mem˝y
(
node
->
d©a
, d©a, 
	`GëTy≥Size
(
ty≥
));

63 
node
->
√xt
 = 
NULL
;

64  
node
;

65 
	}
}

68 
	$HashM≠M©ch_In£π
 (
HashM≠M©ch
 *
m≠
, *
d©a
, 
ty≥
, c⁄° *
fûe
, 
löe
) {

69 
HashNodeM©ch
 *
hód
 = 
NULL
;

70 
HashNodeM©ch
 *
node
 = 
NULL
;

71 
HashNodeM©ch
 *
p
 = 
NULL
;

72 
key
 = *((*)
d©a
);

73 
hód
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

74 
node
 = 
	`HashNodeM©ch_Cª©e
 (
d©a
, 
ty≥
, 
fûe
, 
löe
);

75 i‡(! 
hód
) {

76 (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
] = 
node
;

79 
p
 = 
hód
; ;∞p->
√xt
) {

80 i‡(
p
->
ty≥
 =ty≥ &&Ö->
key
 =key && !
	`memcmp
’->
d©a
, d©a, 
	`GëTy≥Size
(type))) {

81 
	`‰ì
(
node
->
d©a
);

82 
	`‰ì
(
node
->
fûe
);

83 
	`‰ì
(
node
);

86 i‡(
p
->
√xt
 =
NULL
) {

90 
p
->
√xt
 = 
node
;

92 
	}
}

95 
	$HashM≠M©ch_Dñëe
 (
HashM≠M©ch
 *
m≠
, *
d©a
, 
ty≥
) {

96 
HashNodeM©ch
 *
p
, *
¥ev
;

97 
key
 = *((*)
d©a
);

98 
¥ev
 = (
HashNodeM©ch
*Ë&(*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

99 
p
 = (*
m≠
)[(
key
 < 0 ? -key : key)%
HASH_SIZE
];

100 
p
 && (p->
ty≥
 !ty≥ ||Ö->
key
 !key || 
	`memcmp
’->
d©a
, d©a, 
	`GëTy≥Size
(type)))) {

101 
¥ev
 = 
p
;

102 
p
 =Ö->
√xt
;

104 i‡(
p
) {

105 
¥ev
->
√xt
 = 
p
->next;

106 
	`‰ì
(
p
->
d©a
);

107 
	`‰ì
(
p
->
fûe
);

108 
	`‰ì
(
p
);

112 
	}
}

115 
	$HashM≠M©ch_GëCou¡
 (
HashM≠M©ch
 *
m≠
) {

116 
i
;

117 
cou¡
 = 0;

118 
HashNodeM©ch
 *
p
;

120 
i
 = 0; i < 
HASH_SIZE
; i++) {

121 
p
 = (*
m≠
)[
i
];Ö;Ö =Ö->
√xt
) {

122 
cou¡
++;

126  
cou¡
;

127 
	}
}

130 
HashM≠M©ch_SídLóks
 (
HashM≠M©ch
 *
m≠
, (*
¢r
)(*, 
size_t
)) {

131 
cou¡
 = 0;

132 
i
;

133 
buf
[1024];

134 
HashNodeM©ch
 *
p
;

136 *
idToSåög
[] = {

143 
i
 = 0; i < 
HASH_SIZE
; i++) {

144 
p
 = (*
m≠
)[
i
];Ö;Ö =Ö->
√xt
) {

145 
	`•rötf
(
buf
, "%d %†%†%u %†%d", 
cou¡
, "Lók", 
idToSåög
[
p
->
ty≥
],

146 (Ë
	`°æí
(
p
->
fûe
),Ö->fûe,Ö->
löe
);

147 i‡(
	`¢r
 (
buf
, 
	`°æí
 (buf)) < 0) {

148 
	`¥ötf
 ("Client unableÅo SendnRecvÑesourceÜeaks\n");

151 
cou¡
++;

154  
cou¡
;

155 
	}
}

	@profiler/HashMap_match.h

21 #i‚de‡
_HASHMAP_MATCH_H


22 
	#_HASHMAP_MATCH_H


	)

24 
	~<mpi.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

28 
	#HASH_SIZE
 10

	)

31 
	#TYPE_REQUEST
 0

	)

32 
	#TYPE_PERSIST_REQUEST
 1

	)

33 
	#TYPE_COMM
 2

	)

34 
	#TYPE_TYPE
 3

	)

41 
	sHashNodeM©ch_t
 {

42 
HashNodeM©ch_t
 *
	m√xt
;

43 
	mty≥
;

44 
	mkey
;

45 *
	md©a
;

46 *
	mfûe
;

47 
	mlöe
;

48 } 
	tHashNodeM©ch
;

50 
HashNodeM©ch
 * 
	tHashNodeM©chp
;

52 
HashNodeM©chp
 
	tHashM≠M©ch
[
HASH_SIZE
];

57 
HashM≠M©ch_Inô
 (
HashM≠M©ch
 *);

62 
HashM≠M©ch_In£π
 (
HashM≠M©ch
 *, *, , const *, );

66 
HashM≠M©ch_Dñëe
 (
HashM≠M©ch
 *, *, );

70 
HashM≠M©ch_GëCou¡
 (
HashM≠M©ch
 *);

74 
HashM≠M©ch_SídLóks
 (
HashM≠M©ch
 *
m≠
, (*
¢r
)(*, 
size_t
));

	@profiler/Profiler.c

21 
	~"i•.h
"

22 
	~<°rög.h
>

23 
	~<as£π.h
>

24 
	~<°d¨g.h
>

25 
	~<î∫o.h
>

26 
	~"Clõ¡.h
"

27 
	~"HashM≠.h
"

28 
	~"HashM≠_comm.h
"

29 
	~"HashM≠_m©ch.h
"

30 
	~"mpi_func_°ru˘s.h
"

31 
	~"Profûî.h
"

32 
	~"mem.h
"

33 
	~<°dlib.h
>

34 
	#BUFFER_SIZE
 1024

	)

35 
	#REQUEST_CONST
 100000

	)

36 
	#MAX_MPI_CALLS
 150000

	)

38 c⁄° *
	ggﬂhód
 = "1";

39 c⁄° *
	ggoback
 = "2";

40 c⁄° *
	g°›
 = "4";

41 
SOCKET
 
	gfd
 = 
INVALID_SOCKET
;

42 
¨g_t
* 
	g¨g¨øy
;

43 
¨g_t
* 
	g≥rsi°ít_¨g¨øy
;

44 
HashM≠
 
	grm≠
;

45 
HashM≠Comm
 
	gcm≠
;

46 
HashM≠M©ch
 
	gmm≠
;

49 
	gªque°_cou¡
 = 0;

50 
	g≥rsi°ít_ªque°_cou¡
 = 0;

51 
	gcomm_cou¡
 = 0;

52 
	gty≥_cou¡
 = 0;

54 
	gfunc_cou¡
 = -1;

55 
	gcuº_func_cou¡
 = 0;

56 
	g£nd_block
 = 0;

57 
	gªque°No
 = 0;

58 
	gmy_ønk
 = -1;

59 
	gis_öôülized
 = 0;

60 
MPI_Group
 
	gMPI_GROUP_WORLD
;

62 
	göãæóvög
;

64 #ifde‡
DEBUG


65 
	$DebugPröt
(c⁄° *
msg
) {

66 i‡(
is_öôülized
) {

67 
	`¥ötf
("R™k %d: %s", 
my_ønk
, 
msg
);

69 
	`¥ötf
("R™k ?: %s", 
msg
);

71 
	`fÊush
(
°dout
);

72 
	}
}

74 
	#DebugPröt
(
msg
)

	)

77 
	$ISP_¥ötf
(
ønk
, c⁄° *
my¨gs
, ...) {

78 
size
, 
mpi_ønk
;

79 
va_li°
 
¨g
;

81 
	`MPI_Comm_size
(
MPI_COMM_WORLD
, &
size
);

82 
	`MPI_Comm_ønk
(
MPI_COMM_WORLD
, &
mpi_ønk
);

83 
	`va_°¨t
(
¨g
, 
my¨gs
);

84 i‡(
ønk
 < 0 ||Ñ™k =
mpi_ønk
) {

85 
	`¥ötf
("ønk %d: ", 
mpi_ønk
);

86 
	`v¥ötf
(
my¨gs
, 
¨g
);

87 
	`¥ötf
("\n");

89 
	`fÊush
(
°dout
);

90 
	`va_íd
(
¨g
);

91 
	}
}

93 #i‡
deföed
 (
_USRDLL
Ë&& deföed (
WIN32
)

94 
	~<wödows.h
>

96 
BOOL
 
APIENTRY
 
	$DŒMaö
–
HMODULE
 
hModuÀ
,

97 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
,

98 
LPVOID
 
ÕRe£rved


101 
ul_ªas⁄_f‹_ˇŒ
)

103 
DLL_PROCESS_ATTACH
:

104 
DLL_THREAD_ATTACH
:

105 
DLL_THREAD_DETACH
:

106 
DLL_PROCESS_DETACH
:

109  
TRUE
;

110 
	}
}

113 
	$öôülizeReque°No
(
id
) {

114 i‡(
ªque°No
 == 0) {

115 
ªque°No
 = (
id
 + 1Ë* 
REQUEST_CONST
;

117 
	}
}

119 
	$gë_≥rsi°ít_ªque°_ödex
 (
ªque°
) {

120 i‡(
ªque°
 < 0) {

121 
	`¥ötf
("In get_persistent_request_index,Ñequest cannot beÜessÅhan 0\n");

122 
	`as£π
(0);

124  
ªque°
 % 
REQUEST_CONST
;

126 
	}
}

128 *
	$Tøn¶©eR™ks
(
ønk
, 
MPI_Comm
 
‰om_comm
, MPI_Comm 
to_comm
) {

129 
buff
[20];

130 
√w_ønk
 = 0;

131 
MPI_Group
 
‰om_group
;

132 
MPI_Group
 
to_group
;

133 
‰om_comm_size
;

135 i‡(
ønk
 =
MPI_ANY_SOURCE
) {

136 
	`°r˝y
(
buff
, "MPI_ANY_SOURCE");

137 
	`•rötf
 (
buff
, "MPI_ANY_SOURCE");

139 
	`MPI_Comm_group
(
‰om_comm
, &
‰om_group
);

140 
	`MPI_Comm_group
(
to_comm
, &
to_group
);

141 
	`MPI_Comm_size
(
‰om_comm
, &
‰om_comm_size
);

142 i‡(
ønk
 < 0 ||Ñ™k >
‰om_comm_size
) {

143 
	`•rötf
 (
buff
, "%d", 
ønk
);

145 
	`MPI_Group_å™¶©e_ønks
(
‰om_group
, 1, &
ønk
, 
to_group
, &
√w_ønk
);

146 
	`•rötf
 (
buff
, "%d", 
√w_ønk
);

150  
buff
;

151 
	}
}

153 
	$RemoveFromM©chHashM≠
 (*
d©a
, 
ty≥
, c⁄° *
fûe
, 
löe
) {

156 i‡((
ty≥
 =
TYPE_REQUEST
 ||Åy≥ =
TYPE_PERSIST_REQUEST
) &&

157 *((
MPI_Reque°
 *)
d©a
Ë=
MPI_REQUEST_NULL
) {

159 } i‡(
ty≥
 =
TYPE_COMM
 && *((
MPI_Comm
 *)
d©a
Ë=
MPI_COMM_NULL
) {

164 i‡(
	`HashM≠M©ch_Dñëe
 (&
mm≠
, 
d©a
, 
ty≥
) == 0) {

165 
ty≥
) {

166 
TYPE_REQUEST
:

167 
TYPE_PERSIST_REQUEST
:

168 
	`¥ötf
("R™k %d: WARNING: Waôed o¿n⁄-exi°™àªque° i¿%s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

171 
TYPE_COMM
:

172 
	`¥ötf
("R™k %d: WARNING: TrõdÅÿ‰ìáÇ⁄-exi°™àcommuniˇt‹ i¿%s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

175 
TYPE_TYPE
:

176 
	`¥ötf
("R™k %d: WARNING: TrõdÅÿ‰ìáÇ⁄-exi°™àd©©y≥ i¿%s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

180 
	`as£π
(0);

184 
	}
}

186 
	$In£πI¡oM©chHashM≠
 (*
d©a
, 
ty≥
, c⁄° *
fûe
, 
löe
) {

188 i‡((
ty≥
 =
TYPE_REQUEST
 ||Åy≥ =
TYPE_PERSIST_REQUEST
) &&

189 *((
MPI_Reque°
 *)
d©a
Ë=
MPI_REQUEST_NULL
) {

191 } i‡(
ty≥
 =
TYPE_COMM
 && *((
MPI_Comm
 *)
d©a
Ë=
MPI_COMM_NULL
) {

196 i‡(
	`HashM≠M©ch_In£π
 (&
mm≠
, 
d©a
, 
ty≥
, 
fûe
, 
löe
) == 0) {

197 
ty≥
) {

198 
TYPE_REQUEST
:

199 
TYPE_PERSIST_REQUEST
:

200 
	`¥ötf
("R™k %d: WARNING: ReusögÑeque° bef‹êô ha†bì¿waôed o¿ö %s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

203 
TYPE_COMM
:

204 
	`¥ötf
("R™k %d: WARNING: Reusög communiˇt‹ bef‹êô ha†bì¿‰ìd %s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

207 
TYPE_TYPE
:

208 
	`¥ötf
("R™k %d: WARNING: Reusög d©©y≥ bef‹êô ha†bì¿‰ìd %s:%d\n", 
my_ønk
, 
fûe
, 
löe
);

212 
	`as£π
(0);

216 
	}
}

218 
	$£tIªcvReq
 (
i
, 
MPI_Sètus
 *
°©us
, 
°©us_ödex
) {

219 i‡(*(
¨g¨øy
[
i
].
ªque°
Ë!
MPI_REQUEST_NULL
) {

220 
	`PMPI_Waô
(
¨g¨øy
[
i
].
ªque°
,árg¨øy[i].
°©us
);

222 i‡(
°©us
 !
MPI_STATUSES_IGNORE
 && &°©us[
°©us_ödex
] !
MPI_STATUS_IGNORE
) {

223 
°©us
[
°©us_ödex
] = *(
¨g¨øy
[
i
].status);

224 i‡(
¨g¨øy
[
i
].
°©us
 !(&°©us[
°©us_ödex
]))

225 
	`‰ì
 (
¨g¨øy
[
i
].
°©us
);

227 
	}
}

229 
	$£tI£ndReq
 (
i
, 
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
, 
°©us_ödex
) {

233 i‡(!
£nd_block
 && !
¨g¨øy
[
i
].
is_com∂ëe
 &&

234 
¨g¨øy
[
i
].
func
 !
START
) {

235 *
ªque°
 = 
MPI_REQUEST_NULL
;

240 i‡(*(
¨g¨øy
[
i
].
ªque°
Ë!
MPI_REQUEST_NULL
) {

241 
	`PMPI_Waô
(
¨g¨øy
[
i
].
ªque°
,árg¨øy[i].
°©us
);

245 i‡(
¨g¨øy
[
i
].
func
 !
START
) {

246 *
ªque°
 = *
¨g¨øy
[
i
].request;

248 i‡(
¨g¨øy
[
i
].
buf„r_c›õd
) {

249 
	`‰ì
(
¨g¨øy
[
i
].
buf„r
);

250 
¨g¨øy
[
i
].
buf„r
 = 0;

251 
¨g¨øy
[
i
].
buf„r_c›õd
 = 0;

253 i‡(
¨g¨øy
[
i
].
d©©y≥_c›õd
) {

254 
	`PMPI_Ty≥_‰ì
(&
¨g¨øy
[
i
].
d©©y≥
);

255 
¨g¨øy
[
i
].
d©©y≥_c›õd
 = 0;

258 i‡(
°©us
 !
MPI_STATUSES_IGNORE
 && &°©us[
°©us_ödex
] !
MPI_STATUS_IGNORE
) {

259 
°©us
[
°©us_ödex
] = *(
¨g¨øy
[
i
].status);

260 i‡(
¨g¨øy
[
i
].
°©us
 !(&°©us[
°©us_ödex
]))

261 
	`‰ì
 (
¨g¨øy
[
i
].
°©us
);

263 
	}
}

265 
	$PMPI_Execuã
 (
i
, 
§c
, 
comm_id
) {

266 
c‹ª˘_comm_§c
;

267 
sour˚
 = 
§c
;

268 
MPI_Group
 
group
;

269 i‡(
¨g¨øy
[
i
].
is_com∂ëe
) {

273 
¨g¨øy
[
i
].
func
) {

275 
SEND
: {

276 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

278 
	`PMPI_Waô
(
_¨g
.
ªque°
, 
MPI_STATUS_IGNORE
);

280 i‡(
_¨g
.
buf„r_c›õd
) {

281 
	`‰ì
 (
_¨g
.
buf„r
);

282 
¨g¨øy
[
i
].
buf„r
 = 0;

283 
_¨g
.
buf„r_c›õd
 = 0;

286 
	`‰ì
(
_¨g
.
ªque°
);

287 i‡(
_¨g
.
d©©y≥_c›õd
) {

288 
	`PMPI_Ty≥_‰ì
(&
_¨g
.
d©©y≥
);

289 
_¨g
.
d©©y≥_c›õd
 = 0;

293 
RSEND
: {

294 
¨g_t
 
_¨g
 = (
¨g¨øy
[
i
]);

295 
	`PMPI_Waô
(
_¨g
.
ªque°
, 
MPI_STATUS_IGNORE
);

296 i‡(
_¨g
.
buf„r_c›õd
) {

297 
	`‰ì
 (
_¨g
.
buf„r
);

298 
¨g¨øy
[
i
].
buf„r
 = 0;

299 
_¨g
.
buf„r_c›õd
 = 0;

302 
	`‰ì
(
_¨g
.
ªque°
);

303 i‡(
_¨g
.
d©©y≥_c›õd
) {

304 
	`PMPI_Ty≥_‰ì
(&
_¨g
.
d©©y≥
);

305 
_¨g
.
d©©y≥_c›õd
 = 0;

309 
SSEND
: {

317 
ISEND
: {

318 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

320 
key
 = *((*)
_¨g
.
ªque°
);

328 i‡(
my_ønk
 !
_¨g
.
de°
) {

329 
	`PMPI_Waô
 (
_¨g
.
ªque°
, 
¨g¨øy
[
i
].
°©us
);

331 i‡(!
£nd_block
 && (
	`HashM≠_GëReque°
 (&
rm≠
, 
key
Ë=
NULL
)) {

334 i‡(
_¨g
.
buf„r_c›õd
) {

335 
	`‰ì
 (
_¨g
.
buf„r
);

336 
¨g¨øy
[
i
].
buf„r
 = 0;

337 
¨g¨øy
[
i
].
buf„r_c›õd
 = 0;

339 i‡(
_¨g
.
d©©y≥_c›õd
) {

340 
	`PMPI_Ty≥_‰ì
(&
_¨g
.
d©©y≥
);

341 
¨g¨øy
[
i
].
d©©y≥_c›õd
 = 0;

346 
IRECV
: {

347 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

350 
	`MPI_Comm_group
(
_¨g
.
comm
, &
group
);

351 
	`MPI_Group_å™¶©e_ønks
(
MPI_GROUP_WORLD
, 1, &
sour˚
, 
group
, &
c‹ª˘_comm_§c
);

352 
	`PMPI_Iªcv
 (
_¨g
.
buf„r
, _¨g.
cou¡
, _¨g.
d©©y≥
,

353 
c‹ª˘_comm_§c
, 
_¨g
.
èg
, _¨g.
comm
, _¨g.
ªque°
);

355 i‡(
my_ønk
 !
§c
) {

356 
	`PMPI_Waô
 (
_¨g
.
ªque°
, 
¨g¨øy
[
i
].
°©us
);

365 
START
: {

367 
°‹age_ödex
 = 
¨g¨øy
[
i
].
≥rsi°ít_ödex
;

368 
ªque°_ty≥
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
func
;

370 
	`as£π
 (
ªque°_ty≥
 =
SEND_INIT
 ||

371 
ªque°_ty≥
 =
RECV_INIT
);

372 i‡(
ªque°_ty≥
 =
SEND_INIT
) {

373 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

375 i‡(
my_ønk
 !
_¨g
.
de°
) {

376 
	`PMPI_Waô
(
_¨g
.
ªque°
, 
¨g¨øy
[
i
].
°©us
);

378 i‡(
_¨g
.
buf„r_c›õd
) {

379 
	`‰ì
 (
_¨g
.
buf„r
);

380 
¨g¨øy
[
i
].
buf„r
 = 0;

381 
¨g¨øy
[
i
].
buf„r_c›õd
 = 0;

383 i‡(
_¨g
.
d©©y≥_c›õd
) {

384 
	`PMPI_Ty≥_‰ì
(&
_¨g
.
d©©y≥
);

385 
¨g¨øy
[
i
].
d©©y≥_c›õd
 = 0;

389 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

390 
	`PMPI_Sèπ
(
_¨g
.
ªque°
);

391 i‡(
my_ønk
 !
_¨g
.
sour˚
) {

392 
	`PMPI_Waô
(
_¨g
.
ªque°
, 
¨g¨øy
[
i
].
°©us
);

397 
STARTALL
: {

400 
IPROBE
: {

401 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

404 
	`MPI_Comm_group
(
_¨g
.
comm
, &
group
);

405 
	`MPI_Group_å™¶©e_ønks
(
MPI_GROUP_WORLD
, 1, &
sour˚
, 
group
, &
c‹ª˘_comm_§c
);

408 i‡(
sour˚
 == -1) {

409 *(
_¨g
.
Êag
) = 0;

412 i‡(
_¨g
.
sour˚
 =
MPI_ANY_SOURCE
 && 
c‹ª˘_comm_§c
 != _arg.source) {

413 *
_¨g
.
Êag
 == 0) {

414 
	`PMPI_I¥obe
(
c‹ª˘_comm_§c
, 
_¨g
.
èg
, _¨g.
comm
, _¨g.
Êag
, _¨g.
°©us
);

417 
	`PMPI_I¥obe
(
c‹ª˘_comm_§c
, 
_¨g
.
èg
, _¨g.
comm
, _¨g.
Êag
, _¨g.
°©us
);

421 
PROBE
: {

422 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

425 
	`MPI_Comm_group
(
_¨g
.
comm
, &
group
);

426 
	`MPI_Group_å™¶©e_ønks
(
MPI_GROUP_WORLD
, 1, &
sour˚
, 
group
, &
c‹ª˘_comm_§c
);

427 
	`PMPI_Probe
(
c‹ª˘_comm_§c
, 
_¨g
.
èg
, _¨g.
comm
, _¨g.
°©us
);

430 
RECV
: {

431 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

434 
	`MPI_Comm_group
(
_¨g
.
comm
, &
group
);

435 
	`MPI_Group_å™¶©e_ønks
(
MPI_GROUP_WORLD
, 1, &
sour˚
, 
group
, &
c‹ª˘_comm_§c
);

436 
	`PMPI_Recv
 (
_¨g
.
buf„r
, _¨g.
cou¡
, _¨g.
d©©y≥
,

437 
c‹ª˘_comm_§c
, 
_¨g
.
èg
, _¨g.
comm
, _¨g.
°©us
);

440 
BARRIER
: {

441 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

442 
	`PMPI_B¨rõr
 (
_¨g
.
comm
);

445 
COMM_CREATE
: {

446 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

447 
	`PMPI_Comm_¸óã
 (
_¨g
.
comm
, _¨g.
group
, _¨g.
comm_out
);

448 i‡(*
_¨g
.
comm_out
 !
MPI_COMM_NULL
) {

449 
	`HashM≠Comm_In£π
 (&
cm≠
, 
_¨g
.
comm_out
, 
comm_id
);

453 
CART_CREATE
: {

454 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

455 
	`PMPI_C¨t_¸óã
 (
_¨g
.
comm
, _¨g.
ndims
, _¨g.
dims
, _¨g.
≥riods
, _¨g.
ª‹dî
, _¨g.
comm_out
);

456 i‡(*
_¨g
.
comm_out
 !
MPI_COMM_NULL
) {

457 
	`HashM≠Comm_In£π
 (&
cm≠
, 
_¨g
.
comm_out
, 
comm_id
);

459 
	`Ârötf
(
°dîr
, "i have some comm_null\n");

461 
	`‰ì
 (
_¨g
.
dims
);

462 
	`‰ì
(
_¨g
.
≥riods
);

465 
COMM_DUP
: {

466 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

467 
	`PMPI_Comm_dup
 (
_¨g
.
comm
, _¨g.
comm_out
);

468 
	`HashM≠Comm_In£π
 (&
cm≠
, 
_¨g
.
comm_out
, 
comm_id
);

471 
COMM_SPLIT
: {

472 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

473 
	`PMPI_Comm_•lô
 (
_¨g
.
comm
, _¨g.
cﬁ‹
, _¨g.
key
, _¨g.
comm_out
);

474 
	`HashM≠Comm_In£π
 (&
cm≠
, 
_¨g
.
comm_out
, 
comm_id
);

477 
COMM_FREE
: {

478 
¨g_t
 
_¨g
 = 
¨g¨øy
[
i
];

479 
	`HashM≠Comm_Dñëe
 (&
cm≠
, 
_¨g
.
comm_out
);

480 
	`PMPI_Comm_‰ì
 (
_¨g
.
comm_out
);

484 
ABORT
:

485 
ALLREDUCE
:

486 
BCAST
:

487 
REDUCE
:

488 
REDUCE_SCATTER
:

489 
TEST
:

490 
WAIT
:

491 
WAITALL
:

492 
TESTALL
:

493 
WAITANY
:

494 
TESTANY
:

495 
GATHER
:

496 
SCATTER
:

497 
SCATTERV
:

498 
GATHERV
:

499 
ALLGATHER
:

500 
ALLGATHERV
:

501 
ALLTOALL
:

502 
ALLTOALLV
:

503 
SCAN
:

504 
SENDRECV
:

505 
SEND_INIT
:

506 
RECV_INIT
:

507 
REQUEST_FREE
:

508 
FINALIZE
:

510 
PCONTROL
:

514 
¨g¨øy
[
i
].
is_com∂ëe
 = 1;

515 
	}
}

517 
	$SídnRecv
 (*
sbuff
, 
size_t
 
Àn
) {

519 
rbuff
[
BUFFER_SIZE
];

520 
comm_id
;

522 
	`öôülizeReque°No
(
my_ønk
);

523 i‡(
sbuff
 =
NULL
) {

526 i‡(
	`Síd
 (
fd
, 
sbuff
, (Ë
Àn
) <= 0) {

527 
	`¥ötf
 ("Client unableÅo send in SendRecv\n");

531 
ªt
;

532 
num
;

533 *
ªsu…
 = 
NULL
;

534 
	`mem£t
 (
rbuff
, '\0', 
BUFFER_SIZE
);

535 
	`Re˚ive
 (
fd
, 
rbuff
, 
BUFFER_SIZE
);

536 
ªsu…
 = 
	`°πok
 (
rbuff
, ":");

537 
ªsu…
 !
NULL
) {

538 i‡(
	`°∫cmp
 (
ªsu…
, 
gﬂhód
, 
	`°æí
 (goahead)) == 0) {

539 
ö°r_to_execuã
;

540 
°r
[20];

541 
§c
;

542 
num
 = 
	`ssˇnf
 (
ªsu…
, "%†%d %d %d %d", 
°r
,

543 &
ö°r_to_execuã
, &
§c
, &
comm_id
, &
ªt
);

544 
	`PMPI_Execuã
 (
ö°r_to_execuã
, 
§c
, 
comm_id
);

545 i‡(
ªt
 == 2) {

546 
íd
;

548 } if(
	`°∫cmp
 (
ªsu…
, 
goback
, 
	`°æí
 (goback)) == 0) {

549 
íd
;

550 } if(
	`°∫cmp
 (
ªsu…
, 
°›
, 
	`°æí
 (stop)) == 0) {

551 
	`PMPI_Ab‹t
 (
MPI_COMM_WORLD
, 1);

553 
ªsu…
 = 
	`°πok
(
NULL
, ":");

556 
íd
:

557 
func_cou¡
++;

559 
	}
}

562 
	$£t_comm⁄_¨gs
 (
mpi_i•_func_t
 
func
) {

563 
¨g¨øy
[
func_cou¡
].func_count = func_count;

564 
¨g¨øy
[
func_cou¡
].
is_com∂ëe
 = 0;

565 
¨g¨øy
[
func_cou¡
].
≥rsi°ít_ödex
 = -1;

566 
¨g¨øy
[
func_cou¡
].
func
 = func;

567 
¨g¨øy
[
func_cou¡
].
buf„r_c›õd
 = 0;

568 
¨g¨øy
[
func_cou¡
].
d©©y≥_c›õd
 = 0;

569 
	}
}

571 *
	$Profûî_¸óã_group_ønks
 (
MPI_Comm
 
comm
, *
≈rocs
) {

573 
i
;

574 
MPI_Group
 
group_w‹ld
;

575 
MPI_Group
 
this_group
;

576 *
ønks1
;

577 *
ønks2
;

578 *
sbuff
 = 
NULL
;

579 
off£t
 = 0;

581 
	`MPI_Comm_group
 (
MPI_COMM_WORLD
, &
group_w‹ld
);

582 
	`MPI_Comm_group
 (
comm
, &
this_group
);

583 
	`MPI_Comm_size
 (
comm
, 
≈rocs
);

585 
ønks1
 = (*Ë
	`mÆloc
 ((*
≈rocs
) *  ());

586 
ønks2
 = (*Ë
	`mÆloc
 ((*
≈rocs
) *  ());

587 
sbuff
 = (*Ë
	`mÆloc
 (
BUFFER_SIZE
 *  ());

589 
i
 = 0 ; i < (*
≈rocs
) ; i++) {

590 
ønks1
[
i
] = i;

592 
	`MPI_Group_å™¶©e_ønks
 (
this_group
, (*
≈rocs
), 
ønks1
, 
group_w‹ld
,

593 
ønks2
);

595 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

596 
	`•rötf
 (
sbuff
, "%d_", 
	`HashM≠Comm_GëId
 (&
cm≠
, &
comm
));

597 
off£t
 = (Ë
	`°æí
 (
sbuff
);

599 
i
 = 0 ; i < (*
≈rocs
); i++) {

600 i‡(
ønks2
[
i
] !
MPI_UNDEFINED
) {

601 
	`•rötf
 (
sbuff
 + 
off£t
, "%d:", 
ønks2
[
i
]);

602 
off£t
 = (Ë
	`°æí
 (
sbuff
);

605 
	`‰ì
 (
ønks1
);

606 
	`‰ì
 (
ønks2
);

607  
sbuff
;

608 
	}
}

625 
	$ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
,

626 c⁄° *
fûe
, 
löe
) {

627 
sbuff
[
BUFFER_SIZE
];

628 
îr°r
[
BUFFER_SIZE
];

630 
	`DebugPröt
("Entering ISP_Assert_fail...\n");

633 
	`mem£t
 (
îr°r
, '\0', 
BUFFER_SIZE
);

634 
	`•rötf
 (
îr°r
, "As£πi⁄ `%s' faûed.", 
as£πi⁄
);

637 i‡(
fd
 =
INVALID_SOCKET
) {

638 
	`¥ötf
 ("%s:%d: %s: %s\n", 
fûe
, 
löe
, 
fun˘i⁄
, 
îr°r
);

639 
	`ab‹t
 ();

641 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

643 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %u %†%s", 
func_cou¡
,

645 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

646 (Ë
	`°æí
(
îr°r
),Éº°r, 
fun˘i⁄
);

648 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

649 
	`¥ötf
 ("Client unableÅo SendnRecv in ISP_Assert_fail\n");

653 
	}
}

655 
	$ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
,

656 c⁄° *
fûe
, 
löe
) {

657 
sbuff
[
BUFFER_SIZE
];

658 
îrbuff
[
BUFFER_SIZE
];

660 
	`DebugPröt
("Entering ISP_Assert_perror_fail...\n");

663 i‡(
î∫um
 == 0) {

668 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

669 #i‚de‡
WIN32


670 
	`°ªº‹_r
 (
î∫um
, 
sbuff
, 
BUFFER_SIZE
);

672 
	`°ªº‹_s
 (
sbuff
, 
BUFFER_SIZE
, 
î∫um
);

674 
	`•rötf
 (
îrbuff
, "U√x≥˘edÉº‹: %s.", 
sbuff
);

677 i‡(
fd
 =
INVALID_SOCKET
) {

678 
	`¥ötf
 ("%s:%d: %s: %s\n", 
fûe
, 
löe
, 
fun˘i⁄
, 
îrbuff
);

679 
	`ab‹t
 ();

681 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

683 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %u %†%s", 
func_cou¡
,

685 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

686 (Ë
	`°æí
(
îrbuff
),Éºbuff, 
fun˘i⁄
);

688 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

689 
	`¥ötf
 ("Client unableÅo SendnRecv in ISP_Assert_perror_fail\n");

693 
	}
}

695 
DLLAPI
 
MPIAPI
 
	$ISP_Inô
 (*
¨gc
, ***
¨gv
, c⁄° *
fûe
, 
löe
) {

697 
num¨gs
 = 6;

698 
i
;

699 *
ãmp
 = 
NULL
;

700 *
u£_ív
 = 
NULL
;

702 
unix_sockës
;

703 
p‹t
;

704 
num¥ocs
;

705 
ªsu…1
;

706 
ªsu…2
;

707 *
ho°
 = 
NULL
;

708 *
sockfûe
 = 
NULL
;

709 
buf„r
[
BUFFER_SIZE
];

710 
¥ovided
;

711 
ªsu…1
 = 
	`PMPI_Inô_thªad
 (
¨gc
, 
¨gv
, 
MPI_THREAD_MULTIPLE
, &
¥ovided
);

712 
ªsu…2
 = 
	`MPI_Comm_ønk
 (
MPI_COMM_WORLD
, &
my_ønk
);

713 
	`MPI_Comm_group
(
MPI_COMM_WORLD
, &
MPI_GROUP_WORLD
);

715 
	`DebugPröt
("Entering MPI_Init...\n");

718 
u£_ív
 = 
	`gëív
("ISP_USE_ENV");

719 i‡(!
u£_ív
 || 
	`°rcmp
(use_env, "1")) {

720 i‡(*
¨gc
 <
num¨gs
) {

721 
	`¥ötf
 ("ERROR:Örofiler hasÅoo fewárguments\n");

724 
unix_sockës
 = !
	`°rcmp
((*
¨gv
)[1], "1") ? 1 : 0;

725 i‡(
unix_sockës
) {

726 
p‹t
 = 0;

727 
ho°
 = 
NULL
;

728 
sockfûe
 = (*Ë
	`mÆloc
 ((
	`°æí
((*
¨gv
)[2]) + 1) * ());

729 
	`°r˝y
 (
sockfûe
, (*
¨gv
)[2]);

730 
öãæóvög
 = 
	`©oi
((*
¨gv
)[6]);

732 
p‹t
 = 
	`©oi
 ((*
¨gv
)[2]);

733 
ho°
 = (*Ë
	`mÆloc
 ((
	`°æí
((*
¨gv
)[4]) + 1) * ());

734 
	`°r˝y
 (
ho°
, (*
¨gv
)[4]);

735 
sockfûe
 = 
NULL
;

736 
öãæóvög
 = 
	`©oi
((*
¨gv
)[6]);

738 
num¥ocs
 = 
	`©oi
 ((*
¨gv
)[3]);

739 
£nd_block
 = !
	`°rcmp
((*
¨gv
)[5], "1") ? 1 : 0;

740 
i
 = 
num¨gs
 + 1; i < *
¨gc
; i++)

742 
ãmp
 = (*
¨gv
)[
i
-
num¨gs
];

743 (*
¨gv
)[
i
-
num¨gs
] = (*argv)[i];

744 (*
¨gv
)[
i
] = 
ãmp
;

746 *
¨gc
 = *¨g¯- 
num¨gs
;

751 
ãmp
 = 
	`gëív
("ISP_UNIX_SOCKETS");

752 i‡(
ãmp
 =
NULL
) {

753 
	`¥ötf
 ("Error: ISP_UNIX_SOCKETSÉnvironmentárgumentÇot found\n");

756 
unix_sockës
 = !
	`°rcmp
(
ãmp
, "1") ? 1 : 0;

758 
ãmp
 = 
	`gëív
("ISP_HOSTNAME");

759 i‡(
ãmp
 =
NULL
) {

760 
	`¥ötf
 ("Error: ISP_HOSTNAMEÉnvironmentárgumentÇot found\n");

763 i‡(
unix_sockës
) {

764 
p‹t
 = 0;

765 
ho°
 = 
NULL
;

766 
sockfûe
 = (*Ë
	`mÆloc
 ((
	`°æí
(
ãmp
) + 1) * ());

767 
	`°r˝y
 (
sockfûe
, 
ãmp
);

769 
ho°
 = (*Ë
	`mÆloc
 ((
	`°æí
(
ãmp
) + 1) * ());

770 
	`°r˝y
 (
ho°
, 
ãmp
);

771 
sockfûe
 = 
NULL
;

772 
ãmp
 = 
	`gëív
("ISP_PORT");

773 i‡(
ãmp
 =
NULL
) {

774 
	`¥ötf
 ("Error: ISP_PORTÉnvironmentárgumentÇot found\n");

777 
p‹t
 = 
	`©oi
 (
ãmp
);

780 
ãmp
 = 
	`gëív
("ISP_NUMPROCS");

781 i‡(
ãmp
 =
NULL
) {

782 
	`¥ötf
("Error: ISP_NUMPROCSÉnvironmentárgumentÇot found\n");

785 
num¥ocs
 = 
	`©oi
 (
ãmp
);

787 
ãmp
 = 
	`gëív
("ISP_SENDBLOCK");

788 i‡(
ãmp
 =
NULL
) {

789 
	`¥ötf
("Error: ISP_SENDBLOCKÉnvironmentárgumentÇot found\n");

792 
£nd_block
 = !
	`°rcmp
(
ãmp
, "1") ? 1 : 0;

796 i‡((
fd
 = 
	`C⁄√˘
 (
unix_sockës
, 
ho°
, 
p‹t
, 
sockfûe
, 
my_ønk
)Ë=
INVALID_SOCKET
) {

797 
	`¥ötf
 ("Clõ¡ %d U«bÀÅÿc⁄√˘\n", 
my_ønk
);

801 
¨g¨øy
 = (
¨g_t
*Ë
	`ˇŒoc
 (
MAX_MPI_CALLS
,  (arg_t));

802 
≥rsi°ít_¨g¨øy
 = (
¨g_t
*Ë
	`mÆloc
 (
MAX_MPI_CALLS
 *  (arg_t));

803 
is_öôülized
 = 1;

804 i‡(
ho°
 !
NULL
) {

805 
	`‰ì
(
ho°
);

807 i‡(
sockfûe
 !
NULL
) {

808 
	`‰ì
(
sockfûe
);

810 
	`mem£t
 (
buf„r
, '\0', 
BUFFER_SIZE
);

811 
	`•rötf
 (
buf„r
, "%d\n", 
my_ønk
);

812 i‡(
	`SídnRecv
 (
buf„r
, 
	`°æí
 (buffer)) < 0) {

813 
	`¥ötf
 ("Clõ¡ %d u«bÀÅÿ£nd idÅÿ£rvî\n", 
my_ønk
);

816 
	`HashM≠_Inô
 (&
rm≠
);

817 
	`HashM≠Comm_Inô
 (&
cm≠
);

818 
	`HashM≠M©ch_Inô
 (&
mm≠
);

820  
ªsu…1
;

821 
	}
}

823 
DLLAPI
 
MPIAPI
 
	$mpi_öô
 (* 
õº
) {

824  
	`ISP_Inô
(
NULL
, NULL, "Unknown", -1);

825 
	}
}

827 
	$c›yBuf„rN⁄BlockögSíd
 (*
öbuf„r
, **
outbuf„r
, 
cou¡
,

828 
MPI_D©©y≥
 
d©©y≥
,

829 *
buf„r_c›õd
) {

830 
MPI_Aöt
 
exã¡
, 
lowîbound
;

832 
	`MPI_Ty≥_lb
(
d©©y≥
, (
MPI_Aöt
*)&
lowîbound
);

833 i‡(
lowîbound
 != 0) {

835 *
buf„r_c›õd
 = 0;

838 
	`MPI_Ty≥_exã¡
(
d©©y≥
, (
MPI_Aöt
*)&
exã¡
);

839 if(*
outbuf„r
) {

840 
	`¥ötf
("[copyBufferNonBlockingSend]\n");

843 *
outbuf„r
 = 
	`mÆloc
(
exã¡
 * 
cou¡
);

844 i‡(!
outbuf„r
) {

845 *
buf„r_c›õd
 = 0;

848 
	`mem˝y
(*
outbuf„r
, 
öbuf„r
, 
exã¡
 * 
cou¡
);

849 *
buf„r_c›õd
 = 1;

850 
	}
}

853 
	$c›yD©©y≥N⁄BlockögSíd
 (
MPI_D©©y≥
 
öd©©y≥
, MPI_D©©y≥* 
outd©©y≥
,

854 *
d©©y≥_c›õd
) {

856 
	`MPI_Ty≥_c⁄tiguous
(1, 
öd©©y≥
, 
outd©©y≥
);

857 
	`PMPI_Ty≥_commô
(
outd©©y≥
);

858 *
d©©y≥_c›õd
 = 1;

859 
	}
}

861 
DLLAPI
 
MPIAPI
 
	$ISP_Síd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

862 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

864 
sbuff
[
BUFFER_SIZE
];

865 *
buff
 = 
NULL
;

866 
≈rocs
;

867 
ªtVÆ
;

869 
	`DebugPröt
("Entering MPI_Send...\n");

872 i‡(! 
is_öôülized
) {

873  
	`PMPI_Síd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

880 i‡(
de°
 =
MPI_PROC_NULL
)

882  
	`PMPI_Síd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

885 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

894 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

895 i‡(
£nd_block
) {

897 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Ssend",

898 "Síd", 
d©©y≥
,

899 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

900 
	`Tøn¶©eR™ks
(
de°
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

901 
	`£t_comm⁄_¨gs
 (
SSEND
);

905 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Send",

906 "Síd", 
d©©y≥
,

907 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

908 
	`Tøn¶©eR™ks
(
de°
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

909 
	`£t_comm⁄_¨gs
 (
SEND
);

911 
	`‰ì
 (
buff
);

912 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

913 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

914 
¨g¨øy
[
func_cou¡
].
de°
 = dest;

915 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

916 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

918 
cuº_func_cou¡
 = 
func_cou¡
;

920 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

921 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Send\n");

925 i‡(!
£nd_block
) {

926 
	`c›yBuf„rN⁄BlockögSíd
 (
buf„r
, &(
¨g¨øy
[
cuº_func_cou¡
].buf„r), 
cou¡
, 
d©©y≥
,

927 &(
¨g¨øy
[
cuº_func_cou¡
].
buf„r_c›õd
));

929 
	`c›yD©©y≥N⁄BlockögSíd
 (
d©©y≥
, &(
¨g¨øy
[
cuº_func_cou¡
].datatype),

930 &(
¨g¨øy
[
cuº_func_cou¡
].
d©©y≥_c›õd
));

933 
¨g¨øy
[
cuº_func_cou¡
].
ªque°
 = 
	`ˇŒoc
 ((
MPI_Reque°
), 1);

935 
ªtVÆ
 = 
	`PMPI_I£nd
(
¨g¨øy
[
cuº_func_cou¡
].
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
,

936 (
¨g¨øy
[
cuº_func_cou¡
].
ªque°
));

939 
ªtVÆ
 = 
	`PMPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

941  
ªtVÆ
;

942 
	}
}

944 
DLLAPI
 
MPIAPI
 
	$ISP_R£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

945 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

947 
sbuff
[
BUFFER_SIZE
];

948 *
buff
 = 
NULL
;

949 
≈rocs
;

950 
ªtVÆ
;

952 
	`DebugPröt
("Entering MPI_Rsend...\n");

955 i‡(! 
is_öôülized
) {

956  
	`PMPI_R£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

963 i‡(
de°
 =
MPI_PROC_NULL
)

965  
	`PMPI_R£nd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

968 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

977 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

979 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Rsend",

980 "R£nd", 
d©©y≥
,

981 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

982 
	`Tøn¶©eR™ks
(
de°
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

983 
	`£t_comm⁄_¨gs
 (
RSEND
);

985 
	`‰ì
 (
buff
);

987 #ifde‡
DEBUG_PROF_MEM


988 if(
mem
.
	`föd
(
¨g¨øy
[
func_cou¡
].
buf„r
Ë!mem.
	`íd
()) {

989 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

993 
¨g¨øy
[
func_cou¡
].
buf„r
 = buffer;

994 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

995 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

996 
¨g¨øy
[
func_cou¡
].
de°
 = dest;

997 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

998 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1000 
cuº_func_cou¡
 = 
func_cou¡
;

1002 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1003 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Send\n");

1007 i‡(!
£nd_block
) {

1008 
	`c›yBuf„rN⁄BlockögSíd
 (
buf„r
, &
¨g¨øy
[
cuº_func_cou¡
].buf„r, 
cou¡
, 
d©©y≥
,

1009 &
¨g¨øy
[
cuº_func_cou¡
].
buf„r_c›õd
);

1011 
	`c›yD©©y≥N⁄BlockögSíd
 (
d©©y≥
,&
¨g¨øy
[
cuº_func_cou¡
].datatype,

1012 &
¨g¨øy
[
cuº_func_cou¡
].
d©©y≥_c›õd
);

1014 
¨g¨øy
[
cuº_func_cou¡
].
ªque°
 = (
MPI_Reque°
*Ë
	`mÆloc
 ((MPI_Request));

1015 
ªtVÆ
 = 
	`PMPI_I£nd
(
¨g¨øy
[
cuº_func_cou¡
].
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
,

1016 (
¨g¨øy
[
cuº_func_cou¡
].
ªque°
));

1019 
ªtVÆ
 = 
	`PMPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

1022 i‡(
¨g¨øy
[
func_cou¡
].
buf„r_c›õd
) {

1023 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

1024 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1025 
¨g¨øy
[
func_cou¡
].
buf„r_c›õd
 = 0;

1027 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1028 i‡(
¨g¨øy
[
func_cou¡
].
d©©y≥_c›õd
) {

1029 
	`PMPI_Ty≥_‰ì
(&(
¨g¨øy
[
func_cou¡
].
d©©y≥
));

1030 
¨g¨øy
[
func_cou¡
].
d©©y≥_c›õd
 = 0;

1032  
ªtVÆ
;

1033 
	}
}

1035 
DLLAPI
 
MPIAPI
 
	$ISP_I£nd
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

1036 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
) {

1038 
sbuff
[
BUFFER_SIZE
];

1039 
pbuff
[
BUFFER_SIZE
];

1040 *
buff
 = 
NULL
;

1041 
≈rocs
;

1042 
i•ªque°
 = 
ªque°No
++;

1043 
i
;

1044 
ªtvÆ
;

1046 
	`DebugPröt
("Entering MPI_Isend...\n");

1049 i‡(! 
is_öôülized
) {

1050  
	`PMPI_I£nd
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
);

1054 *((*)
ªque°
Ë
i•ªque°
;

1055 
	`In£πI¡oM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1061 i‡(
de°
 =
MPI_PROC_NULL
) {

1062 
ªtvÆ
 = 
	`PMPI_I£nd
 (
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
);

1063 
	`HashM≠_In£π
 (&
rm≠
, 
i•ªque°
, 
ªque°
, "MPI_PROC_NULL");

1064 *((*)
ªque°
Ë
i•ªque°
;

1065 
ªque°_cou¡
++;

1066  
ªtvÆ
;

1069 i‡(!
£nd_block
) {

1070 
	`c›yBuf„rN⁄BlockögSíd
 (
buf
, &
¨g¨øy
[
func_cou¡
].
buf„r
, 
cou¡
, 
d©©y≥
,

1071 &
¨g¨øy
[
func_cou¡
].
buf„r_c›õd
);

1072 
	`c›yD©©y≥N⁄BlockögSíd
 (
d©©y≥
, &
¨g¨øy
[
func_cou¡
].datatype,

1073 &
¨g¨øy
[
func_cou¡
].
d©©y≥_c›õd
);

1076 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1077 
	`mem£t
 (
pbuff
, '\0', 
BUFFER_SIZE
);

1086 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1087 
i
 = 
func_cou¡
;

1089 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %d %s", 
func_cou¡
, "Isend", "Isend",

1090 
d©©y≥
,

1091 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1092 
	`Tøn¶©eR™ks
(
de°
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
i
, 
buff
);

1093 
	`‰ì
 (
buff
);

1095 
	`£t_comm⁄_¨gs
 (
ISEND
);

1097 #ifde‡
DEBUG_PROF_MEM


1098 if(
mem
.
	`föd
(
¨g¨øy
[
func_cou¡
].
buf„r
Ë!mem.
	`íd
()) {

1099 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

1103 
¨g¨øy
[
func_cou¡
].
buf„r
 = 
buf
;

1104 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

1105 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

1106 
¨g¨øy
[
func_cou¡
].
de°
 = dest;

1107 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1108 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1109 
¨g¨øy
[
func_cou¡
].
°©us
 = (
MPI_Sètus
*)
	`mÆloc
 ((MPI_Status));

1111 
	`•rötf
 (
pbuff
, "%d", 
func_cou¡
);

1112 
	`HashM≠_In£π
(&
rm≠
, 
i•ªque°
, 
ªque°
, 
pbuff
);

1114 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

1116 
cuº_func_cou¡
 = 
func_cou¡
;

1117 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1118 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Isend\n");

1123 
ªque°_cou¡
++;

1124 
ªtvÆ
 = 
	`PMPI_I£nd
(
¨g¨øy
[
cuº_func_cou¡
].
buf„r
, 
cou¡
,árg¨øy[cuº_func_cou¡].
d©©y≥
, 
de°
, 
èg
, 
comm
,

1125 
¨g¨øy
[
cuº_func_cou¡
].
ªque°
);

1126 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1127  
ªtvÆ
;

1128 
	}
}

1135 
DLLAPI
 
MPIAPI
 
	$ISP_Síd_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

1136 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
) {

1138 
i•ªque°
;

1139 
pbuff
[
BUFFER_SIZE
];

1140 
ªtvÆ
;

1141 
°‹age_ödex
;

1144 
¨g_t
 
i•_°ru˘
;

1147 
	`DebugPröt
("Entering MPI_Send_init...\n");

1150 i‡(! 
is_öôülized
) {

1151  
	`PMPI_Síd_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
);

1154 
	`mem£t
(
pbuff
, '\0', 
BUFFER_SIZE
);

1156 i‡(
de°
 !
MPI_PROC_NULL
) {

1157 
	`•rötf
(
pbuff
, "%d", 
func_cou¡
);

1159 
	`•rötf
(
pbuff
, "MPI_PROC_NULL_PERSIST");

1163 
ªtvÆ
 = 
	`PMPI_Síd_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
);

1164 if(
ªtvÆ
 !
MPI_SUCCESS
) {

1165  
ªtvÆ
;

1169 
i•ªque°
 = 
ªque°No
++;

1170 
≥rsi°ít_ªque°_cou¡
++;

1172 
i•_°ru˘
.
buf„r
 = 
buf
;

1173 
i•_°ru˘
.
cou¡
 = count;

1174 
i•_°ru˘
.
d©©y≥
 =datatype;

1175 
i•_°ru˘
.
de°
 = dest;

1176 
i•_°ru˘
.
comm
 = comm;

1177 
i•_°ru˘
.
èg
 =Åag;

1180 
	`HashM≠_In£π
(&
rm≠
, 
i•ªque°
, 
ªque°
, 
pbuff
);

1183 i‡(
de°
 !
MPI_PROC_NULL
) {

1186 
°‹age_ödex
 = 
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
);

1188 
i•_°ru˘
.
ªque°
 = 
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

1191 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
func
 = 
SEND_INIT
;

1192 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
] = 
i•_°ru˘
;

1196 *((*Ë
ªque°
Ë
i•ªque°
;

1197 
	`In£πI¡oM©chHashM≠
 (
ªque°
, 
TYPE_PERSIST_REQUEST
, 
fûe
, 
löe
);

1199  
MPI_SUCCESS
;

1200 
	}
}

1202 
DLLAPI
 
MPIAPI
 
	$ISP_Recv
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

1203 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
) {

1205 
sbuff
[
BUFFER_SIZE
];

1206 *
buff
 = 
NULL
;

1207 
≈rocs
;

1209 
	`DebugPröt
("Entering MPI_Recv...\n");

1212 i‡(! 
is_öôülized
) {

1213  
	`PMPI_Recv
(
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
);

1219 i‡(
sour˚
 =
MPI_PROC_NULL
)

1221  
	`PMPI_Recv
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
);

1224 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1230 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1232 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Recv", "Recv",

1233 
d©©y≥
,

1234 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1235 
	`Tøn¶©eR™ks
(
sour˚
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

1236 
	`‰ì
 (
buff
);

1237 
	`£t_comm⁄_¨gs
 (
RECV
);

1239 #ifde‡
DEBUG_PROF_MEM


1240 if(
mem
.
	`föd
(
¨g¨øy
[
func_cou¡
].
buf„r
Ë!mem.
	`íd
()) {

1241 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

1245 
¨g¨øy
[
func_cou¡
].
buf„r
 = buffer;

1246 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

1247 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

1248 
¨g¨øy
[
func_cou¡
].
sour˚
 = source;

1249 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1250 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1251 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

1253 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1254 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Recv\n");

1258 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1259  
MPI_SUCCESS
;

1260 
	}
}

1262 
DLLAPI
 
MPIAPI
 
	$ISP_Probe
 (
sour˚
, 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
,

1263 c⁄° *
fûe
, 
löe
) {

1265 
sbuff
[
BUFFER_SIZE
];

1266 *
buff
 = 
NULL
;

1267 
≈rocs
;

1269 
	`DebugPröt
("Entering MPI_Probe...\n");

1272 i‡(! 
is_öôülized
) {

1273  
	`PMPI_Probe
(
sour˚
, 
èg
, 
comm
, 
°©us
);

1276 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1281 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1283 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Probe", "Probe",

1285 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1286 
	`Tøn¶©eR™ks
(
sour˚
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

1287 
	`‰ì
 (
buff
);

1288 
	`£t_comm⁄_¨gs
(
PROBE
);

1289 
¨g¨øy
[
func_cou¡
].
sour˚
 = source;

1290 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1291 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1292 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

1294 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1295 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Probe\n");

1299  
MPI_SUCCESS
;

1300 
	}
}

1301 
DLLAPI
 
MPIAPI
 
	$ISP_I¥obe
 (
sour˚
, 
èg
, 
MPI_Comm
 
comm
, *
Êag
,

1302 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
) {

1304 
sbuff
[
BUFFER_SIZE
];

1305 *
buff
 = 
NULL
;

1306 
≈rocs
;

1307 
¨g_t
 
i•_°ru˘_ãmp
;

1308 *
Êag
 = 0;

1309 
	`DebugPröt
("Entering MPI_Iprobe...\n");

1312 i‡(! 
is_öôülized
) {

1313  
	`PMPI_I¥obe
(
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
);

1316 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1318 i‡(
¨g¨øy
[
func_cou¡
-1].
func
 =
IPROBE
) {

1319 
i•_°ru˘_ãmp
 = 
¨g¨øy
[
func_cou¡
-1];

1321 i‡(
i•_°ru˘_ãmp
.
sour˚
 =sour˚ && i•_°ru˘_ãmp.
èg
 ==Åag &&

1322 
i•_°ru˘_ãmp
.
comm
 =comm && i•_°ru˘_ãmp.
Êag
 == flag &&

1323 
i•_°ru˘_ãmp
.
°©us
 == status)

1324  
	`PMPI_I¥obe
(
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
);

1330 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1332 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s", 
func_cou¡
, "Iprobe", "Iprobe",

1334 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1335 
	`Tøn¶©eR™ks
(
sour˚
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

1336 
	`‰ì
 (
buff
);

1337 
	`£t_comm⁄_¨gs
(
IPROBE
);

1338 
¨g¨øy
[
func_cou¡
].
sour˚
 = source;

1339 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1340 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1341 
¨g¨øy
[
func_cou¡
].
Êag
 = flag;

1342 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

1344 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1345 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Iprobe\n");

1350  
MPI_SUCCESS
;

1351 
	}
}

1353 
DLLAPI
 
MPIAPI
 
	$ISP_Iªcv
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

1354 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
) {

1356 
sbuff
[
BUFFER_SIZE
];

1357 
pbuff
[
BUFFER_SIZE
];

1358 *
buff
 = 
NULL
;

1359 
≈rocs
;

1360 
i•ªque°
 = 
ªque°No
++;

1361 
i
;

1362 
ªtvÆ
;

1364 
	`DebugPröt
("Entering MPI_Irecv...\n");

1367 i‡(! 
is_öôülized
) {

1368  
	`PMPI_Iªcv
(
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
);

1372 *((*)
ªque°
Ë
i•ªque°
;

1373 
	`In£πI¡oM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1379 i‡(
sour˚
 =
MPI_PROC_NULL
) {

1380 
ªtvÆ
 = 
	`PMPI_Iªcv
 (
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
);

1381 
	`HashM≠_In£π
 (&
rm≠
, 
i•ªque°
, 
ªque°
, "MPI_PROC_NULL");

1382 *((*)
ªque°
Ë
i•ªque°
;

1383 
ªque°_cou¡
++;

1384  
ªtvÆ
;

1387 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1388 
	`mem£t
 (
pbuff
, '\0', 
BUFFER_SIZE
);

1389 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1397 
i
 = 
func_cou¡
;

1399 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %d %s", 
func_cou¡
, "Irecv","Irecv",

1400 
d©©y≥
,

1401 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1402 
	`Tøn¶©eR™ks
(
sour˚
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
i
, 
buff
);

1403 
	`‰ì
 (
buff
);

1404 
	`•rötf
 (
pbuff
, "%d", 
func_cou¡
);

1406 
	`£t_comm⁄_¨gs
 (
IRECV
);

1408 #ifde‡
DEBUG_PROF_MEM


1409 if(
mem
.
	`föd
(
¨g¨øy
[
func_cou¡
].
buf„r
Ë!mem.
	`íd
()) {

1410 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

1414 
¨g¨øy
[
func_cou¡
].
buf„r
 = 
buf
;

1415 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

1416 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

1417 
¨g¨øy
[
func_cou¡
].
sour˚
 = source;

1418 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1419 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1422 
¨g¨øy
[
func_cou¡
].
°©us
 = (
MPI_Sètus
*Ë
	`mÆloc
 ( (MPI_Status));

1424 
	`HashM≠_In£π
(&
rm≠
, 
i•ªque°
, 
ªque°
, 
pbuff
);

1425 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

1426 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1427 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Irecv\n");

1430 
ªque°_cou¡
++;

1432 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1433  
MPI_SUCCESS
;

1434 
	}
}

1436 
DLLAPI
 
MPIAPI
 
	$ISP_Recv_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
§c
,

1437 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
) {

1439 
i•ªque°
;

1440 
pbuff
[
BUFFER_SIZE
];

1441 
ªtvÆ
;

1442 
°‹age_ödex
;

1445 
¨g_t
 
i•_°ru˘
;

1446 
	`DebugPröt
("Entering MPI_Recv_init...\n");

1449 i‡(! 
is_öôülized
) {

1450  
	`PMPI_Recv_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
);

1453 
	`mem£t
(
pbuff
, '\0', 
BUFFER_SIZE
);

1455 i‡(
§c
 !
MPI_PROC_NULL
) {

1456 
	`•rötf
(
pbuff
, "%d", 
func_cou¡
);

1458 
	`•rötf
(
pbuff
, "MPI_PROC_NULL_PERSIST");

1462 
ªtvÆ
 = 
	`PMPI_Recv_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
);

1463 if(
ªtvÆ
 !
MPI_SUCCESS
) {

1464  
ªtvÆ
;

1468 
i•ªque°
 = 
ªque°No
++;

1469 
≥rsi°ít_ªque°_cou¡
++;

1471 
i•_°ru˘
.
buf„r
 = 
buf
;

1472 
i•_°ru˘
.
cou¡
 = count;

1473 
i•_°ru˘
.
d©©y≥
 =datatype;

1474 
i•_°ru˘
.
sour˚
 = 
§c
;

1475 
i•_°ru˘
.
comm
 = comm;

1476 
i•_°ru˘
.
èg
 =Åag;

1479 
	`HashM≠_In£π
(&
rm≠
, 
i•ªque°
, 
ªque°
, 
pbuff
);

1482 i‡(
§c
 !
MPI_PROC_NULL
) {

1485 
°‹age_ödex
 = 
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
);

1487 
i•_°ru˘
.
ªque°
 = 
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

1490 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
func
 = 
RECV_INIT
;

1491 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
] = 
i•_°ru˘
;

1495 *((*Ë
ªque°
Ë
i•ªque°
;

1496 
	`In£πI¡oM©chHashM≠
 (
ªque°
, 
TYPE_PERSIST_REQUEST
, 
fûe
, 
löe
);

1498  
MPI_SUCCESS
;

1499 
	}
}

1501 
DLLAPI
 
MPIAPI
 
	$ISP_Waô
 (
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
,

1502 
löe
) {

1503 
sbuff
[
BUFFER_SIZE
];

1504 *
ív
 = 
NULL
;

1505 
i•ªque°
;

1506 
ªque°_ty≥
 = -1;

1508 
	`DebugPröt
("Entering MPI_Wait...\n");

1511 i‡(! 
is_öôülized
) {

1512  
	`PMPI_Waô
(
ªque°
, 
°©us
);

1515 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1517 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1525 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)
ªque°
));

1526 i‡(!
ív
) {

1534 
i•ªque°
 = *((*)
ªque°
);

1535 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL"))

1537 
ªque°_cou¡
--;

1538 *
ªque°
 = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

1539 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1540  
	`PMPI_Waô
 (
ªque°
, 
°©us
);

1542 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

1543 
ªque°_cou¡
--;

1544  
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
°©us
);

1548 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %s", 
func_cou¡
, "Wait",

1550 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
ív
);

1551 
	`£t_comm⁄_¨gs
 (
WAIT
);

1552 
ªque°_cou¡
--;

1554 
¨g¨øy
[
func_cou¡
].
ªque°
 =Ñequest;

1555 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

1556 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1557 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Wait\n");

1561 
ªque°_ty≥
 =

1562 
≥rsi°ít_¨g¨øy
[
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
)].
func
;

1564 i‡(
ªque°_ty≥
 !
IRECV
 &&Ñeque°_ty≥ !
ISEND
) {

1565 *
ªque°
 = *
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

1568 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 || 
ªque°_ty≥
 =
RECV_INIT
) {

1569 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
°©us
, 0);

1570 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

1571 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1573  
MPI_SUCCESS
;

1575 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
 || 
ªque°_ty≥
 =
SEND_INIT
) {

1576 
	`£tI£ndReq
 (
	`©oi
(
ív
), 
ªque°
, 
°©us
, 0);

1577 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

1580  
MPI_SUCCESS
;

1584 
	`as£π
(0);

1585 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1587  
	`PMPI_Waô
 (
ªque°
, 
°©us
);

1588 
	}
}

1590 
DLLAPI
 
MPIAPI
 
	$ISP_Te°
 (
MPI_Reque°
 *
ªque°
, *
Êag
, 
MPI_Sètus
 *
°©us
,

1591 c⁄° *
fûe
, 
löe
) {

1592 
sbuff
[
BUFFER_SIZE
];

1593 *
ív
 = 
NULL
;

1594 
i•ªque°
;

1595 
ªque°_ty≥
;

1596 
MPI_Reque°
 
ªque°_c›y
;

1598 
	`DebugPröt
("Entering MPI_Test...\n");

1601 i‡(! 
is_öôülized
) {

1602  
	`PMPI_Te°
(
ªque°
, 
Êag
, 
°©us
);

1605 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1614 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)
ªque°
));

1615 i‡(!
ív
) {

1616 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1617 *
Êag
 = 1;

1626 
i•ªque°
 = *((*)
ªque°
);

1627 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

1628 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1629 *
Êag
 = 1;

1630 
ªque°_cou¡
--;

1631 *
ªque°
 = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

1632 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1633  
	`PMPI_Waô
 (
ªque°
, 
°©us
);

1635 } i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

1636 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1637 *
Êag
 = 1;

1638 
ªque°_cou¡
--;

1639  
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
°©us
);

1643 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %s", 
func_cou¡
, "Test", "Test",

1645 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
ív
);

1647 
	`£t_comm⁄_¨gs
 (
TEST
);

1648 
¨g¨øy
[
func_cou¡
].
ªque°
 =Ñequest;

1649 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

1650 
¨g¨øy
[
func_cou¡
].
Êag
 = flag;

1652 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1653 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Test\n");

1656 
i•ªque°
 = *((*)
ªque°
);

1657 
ªque°_ty≥
 =

1658 
≥rsi°ít_¨g¨øy
[
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
)].
func
;

1660 
ªque°_c›y
 = *
ªque°
;

1661 i‡(
ªque°_ty≥
 !
SEND_INIT
 &&Ñeque°_ty≥ !
RECV_INIT
) {

1662 *
ªque°
 = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

1671 i‡(
i•ªque°
 =* ((*Ë
	`HashM≠_GëReque°
(&
rm≠
, isprequest))) {

1672 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

1673 
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
RECV_INIT
 || 
£nd_block
) {

1674 *
Êag
 = 0;

1675  
MPI_SUCCESS
;

1679 
ªque°_cou¡
--;

1680 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||
ªque°_ty≥
 =
RECV_INIT
) {

1681 
	`RemoveFromM©chHashM≠
 (&
ªque°_c›y
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1682 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
°©us
, 0);

1683 *
Êag
 = 1;

1684 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

1685 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1689 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
 || 
ªque°_ty≥
 =
SEND_INIT
) {

1690 
	`RemoveFromM©chHashM≠
 (&
ªque°_c›y
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1691 
	`£tI£ndReq
 (
	`©oi
(
ív
), 
ªque°
, 
°©us
, 0);

1692 *
Êag
 = 1;

1693 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

1701 
	`PMPI_Te°
 (
ªque°
, 
Êag
, 
°©us
);

1702 i‡(*
Êag
) {

1706 
	`RemoveFromM©chHashM≠
 (&
ªque°_c›y
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1707 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1708  
MPI_SUCCESS
;

1709 
	}
}

1711 
DLLAPI
 
MPIAPI
 
	$ISP_Sèπ
 (
MPI_Reque°
* 
ªque°
, c⁄° *
fûe
, 
löe
) {

1713 
sbuff
[
BUFFER_SIZE
];

1714 *
pbuff
 = 
NULL
;

1715 *
ív
 = 
NULL
;

1716 *
buff
 = 
NULL
;

1717 
≈rocs
;

1718 
ªque°_ty≥
;

1719 
°‹age_ödex
;

1720 
i•ªque°
;

1722 
	`DebugPröt
 ("Entering MPI_Start...\n");

1725 i‡(! 
is_öôülized
) {

1726  
	`PMPI_Sèπ
(
ªque°
);

1730 
i•ªque°
 = *((*)
ªque°
);

1731 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, 
i•ªque°
);

1732 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL") || !strcmp(env, "MPI_PROC_NULL_PERSIST")) {

1733 
ªque°_cou¡
++;

1734 
	`In£πI¡oM©chHashM≠
(
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1735  
	`PMPI_Sèπ
(
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
));

1738 
°‹age_ödex
 = 
	`gë_≥rsi°ít_ªque°_ödex
((*(*)
ªque°
));

1740 
ªque°_ty≥
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
func
;

1742 
	`as£π
 (
ªque°_ty≥
 =
SEND_INIT
 ||

1743 
ªque°_ty≥
 =
RECV_INIT
);

1746 
	`mem£t
(
sbuff
, '\0', 
BUFFER_SIZE
);

1747 
pbuff
 = (*Ë
	`mÆloc
(
BUFFER_SIZE
);

1748 
	`•rötf
(
pbuff
, "%d", 
func_cou¡
);

1750 
	`HashM≠_Upd©eEnv
(&
rm≠
, *((*Ë
ªque°
), 
pbuff
);

1752 i‡(!
ív
) {

1754 
	`as£π
 (0);

1758 
	`£t_comm⁄_¨gs
(
START
);

1761 
¨g¨øy
[
func_cou¡
].
≥rsi°ít_ödex
 = 
°‹age_ödex
;

1765 i‡(
ªque°_ty≥
 =
SEND_INIT
) {

1768 i‡(!
£nd_block
) {

1769 
c›yBuf„rN⁄BlockögSíd


1770 (
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
buf„r
, &
¨g¨øy
[
func_cou¡
].buffer,

1771 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
cou¡
,

1772 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
d©©y≥
,

1773 &
¨g¨øy
[
func_cou¡
].
buf„r_c›õd
);

1774 
	`c›yD©©y≥N⁄BlockögSíd
 (
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
d©©y≥
,

1775 &
¨g¨øy
[
func_cou¡
].
d©©y≥
,

1776 &
¨g¨øy
[
func_cou¡
].
d©©y≥_c›õd
);

1778 
¨g¨øy
[
func_cou¡
].
comm
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].comm;

1779 
¨g¨øy
[
func_cou¡
].
de°
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].dest;

1780 
¨g¨øy
[
func_cou¡
].
èg
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].tag;

1781 
¨g¨øy
[
func_cou¡
].
cou¡
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].count;

1784 
buff
 = 
	`Profûî_¸óã_group_ønks
(
¨g¨øy
[
func_cou¡
].
comm
, &
≈rocs
);

1788 
	`•rötf
(
sbuff
, "%d %†%†%d %u %†%d %d %d %d %s", 
func_cou¡
, "Isend",

1790 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
¨g¨øy
[
func_cou¡
].
de°
,

1791 
¨g¨øy
[
func_cou¡
].
èg
, func_cou¡, 
buff
);

1793 i‡(
	`SídnRecv
(
sbuff
, 
	`°æí
(sbuff)) < 0) {

1794 
	`¥ötf
("Client unableÅo SendnRecv in MPI_Start\n");

1799 
	`In£πI¡oM©chHashM≠
(
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1801 
ªque°_cou¡
++;

1802 
	`‰ì
(
buff
);

1803  
	`PMPI_Sèπ
(
¨g¨øy
[
func_cou¡
-1].
ªque°
);

1808 
¨g¨øy
[
func_cou¡
] = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
];

1810 
¨g¨øy
[
func_cou¡
].
°©us
 = (
MPI_Sètus
*Ë
	`mÆloc
 ((MPI_Status));

1812 
buff
 = 
	`Profûî_¸óã_group_ønks
(
¨g¨øy
[
func_cou¡
].
comm
, &
≈rocs
);

1816 
	`•rötf
(
sbuff
, "%d %†%†%d %u %†%d %d %d %d %s", 
func_cou¡
, "Irecv",

1818 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
¨g¨øy
[
func_cou¡
].
sour˚
,

1819 
¨g¨øy
[
func_cou¡
].
èg
, func_cou¡, 
buff
);

1821 i‡(
	`SídnRecv
(
sbuff
, 
	`°æí
(sbuff)) < 0) {

1822 
	`¥ötf
("Client unableÅo SendnRecv in MPI_Start\n");

1827 
	`In£πI¡oM©chHashM≠
(
ªque°
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

1829 
ªque°_cou¡
++;

1830 
	`‰ì
(
buff
);

1831  
MPI_SUCCESS
;

1833 
	}
}

1834 
DLLAPI
 
MPIAPI
 
	$ISP_SèπÆl
(
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, c⁄° *
fûe
, 
löe
) {

1837 i‡(! 
is_öôülized
) {

1838  
	`PMPI_SèπÆl
(
cou¡
, 
¨øy_of_ªque°s
);

1841  
MPI_SUCCESS
;

1842 
	}
}

1843 
DLLAPI
 
MPIAPI
 
	$ISP_Reque°_‰ì
(
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
) {

1844 *
ív
 = 
NULL
;

1845 
i•ªque°
;

1846 
°‹age_ödex
;

1847 
ªque°_ty≥
;

1849 
	`DebugPröt
 ("Entering MPI_Request_free...\n");

1852 i‡(! 
is_öôülized
) {

1853  
	`PMPI_Reque°_‰ì
(
ªque°
);

1857 
i•ªque°
 = *((*)
ªque°
);

1858 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, 
i•ªque°
);

1859 i‡(!
ív
) {

1860  
MPI_ERR_REQUEST
;

1861 } i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

1862 
≥rsi°ít_ªque°_cou¡
--;

1863 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_PERSIST_REQUEST
, 
fûe
, 
löe
);

1864 *
ªque°
 = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

1865 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

1866  
	`PMPI_Reque°_‰ì
(
ªque°
);

1871 
°‹age_ödex
 = 
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
);

1872 
ªque°_ty≥
 = 
≥rsi°ít_¨g¨øy
[
°‹age_ödex
].
func
;

1873 i‡(
ªque°_ty≥
 =
SEND_INIT
 ||Ñeque°_ty≥ =
RECV_INIT
) {

1874 
≥rsi°ít_ªque°_cou¡
--;

1875 
	`RemoveFromM©chHashM≠
 (
ªque°
, 
TYPE_PERSIST_REQUEST
, 
fûe
, 
löe
);

1879  
MPI_SUCCESS
;

1880 
	}
}

1882 
DLLAPI
 
MPIAPI
 
	$ISP_S£nd
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

1883 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

1885 
sbuff
[
BUFFER_SIZE
];

1886 *
buff
 = 
NULL
;

1887 
≈rocs
;

1888 
ªtVÆ
;

1890 
	`DebugPröt
("Entering MPI_Ssend...\n");

1893 i‡(! 
is_öôülized
) {

1894  
	`PMPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

1897 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1904 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1906 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %†%d %s",
func_cou¡
, "Ssend",

1907 "S£nd", 
d©©y≥
,

1908 (Ë
	`°æí
(
fûe
), fûe, 
löe
,

1909 
	`Tøn¶©eR™ks
(
de°
, 
comm
, 
MPI_COMM_WORLD
), 
èg
, 
buff
);

1910 
	`‰ì
 (
buff
);

1911 
	`£t_comm⁄_¨gs
 (
SSEND
);

1913 #ifde‡
DEBUG_PROF_MEM


1914 if(
mem
.
	`föd
(
¨g¨øy
[
func_cou¡
].
buf„r
Ë!mem.
	`íd
()) {

1915 
	`‰ì
(
¨g¨øy
[
func_cou¡
].
buf„r
);

1919 
¨g¨øy
[
func_cou¡
].
buf„r
 = buffer;

1920 
¨g¨øy
[
func_cou¡
].
cou¡
 = count;

1921 
¨g¨øy
[
func_cou¡
].
d©©y≥
 =datatype;

1922 
¨g¨øy
[
func_cou¡
].
de°
 = dest;

1923 
¨g¨øy
[
func_cou¡
].
èg
 =Åag;

1924 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1926 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1927 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Ssend\n");

1931 
ªtVÆ
 = 
	`PMPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
);

1932 
¨g¨øy
[
func_cou¡
].
buf„r
 = 0;

1933  
ªtVÆ
;

1935 
	}
}

1937 
DLLAPI
 
MPIAPI
 
	$ISP_Sídªcv
 (* 
£ndbuf
, 
£ndcou¡
, 
MPI_D©©y≥
 
£ndty≥
,

1938 
de°
, 
£ndèg
, * 
ªcvbuf
, 
ªcvcou¡
,

1939 
MPI_D©©y≥
 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
MPI_Comm
 
comm
,

1940 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
) {

1942 
	`DebugPröt
("Entering MPI_Sendrecv...\n");

1945 i‡(! 
is_öôülized
) {

1946  
	`PMPI_Sídªcv
(
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
ªcvbuf
,

1947 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
);

1950 
	`ISP_Síd
 (
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
comm
, 
fûe
, 
löe
);

1951 
	`ISP_Recv
 (
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
, 
fûe
, 
löe
);

1952  
MPI_SUCCESS
;

1953 
	}
}

1955 
DLLAPI
 
MPIAPI
 
	$ISP_B¨rõr
 (
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

1957 
sbuff
[
BUFFER_SIZE
];

1958 *
buff
 = 
NULL
;

1959 
≈rocs
;

1960 
cou¡
 = 1;

1962 
	`DebugPröt
("Entering MPI_Barrier...\n");

1965 i‡(! 
is_öôülized
) {

1966  
	`PMPI_B¨rõr
(
comm
);

1974 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

1975 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

1977 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Barrier",

1979 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
buff
);

1980 
	`‰ì
 (
buff
);

1981 
	`£t_comm⁄_¨gs
 (
BARRIER
);

1982 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

1983 
cou¡
++;

1985 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

1986 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Barrier\n");

1990  
MPI_SUCCESS
;

1991 
	}
}

1992 
DLLAPI
 
MPIAPI
 
	$ISP_C¨t_¸óã
 ( 
MPI_Comm
 
comm_ﬁd
, 
ndims
, *
dims
, *
≥riods
,

1993 
ª‹dî
, 
MPI_Comm
 *
comm_ˇπ
, c⁄° * 
fûe
, 
löe
){

1994 
sbuff
[
BUFFER_SIZE
];

1995 *
buff
 = 
NULL
;

1996 
≈rocs
;

1997 
cou¡
 = 1;

1999 
	`DebugPröt
("Entering MPI_Cart_create...\n");

2002 i‡(! 
is_öôülized
) {

2003  
	`PMPI_C¨t_¸óã
(
comm_ﬁd
, 
ndims
, 
dims
, 
≥riods
, 
ª‹dî
, 
comm_ˇπ
);

2006 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2007 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm_ﬁd
, &
≈rocs
);

2012 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Cart_create",

2014 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
buff
);

2015 
	`‰ì
 (
buff
);

2016 
	`£t_comm⁄_¨gs
 (
CART_CREATE
);

2018 
¨g¨øy
[
func_cou¡
].
comm
 = 
comm_ﬁd
;

2019 
¨g¨øy
[
func_cou¡
].
group
 = 
MPI_GROUP_NULL
;

2020 
¨g¨øy
[
func_cou¡
].
cﬁ‹
 = 0;

2021 
¨g¨øy
[
func_cou¡
].
key
 = 0;

2022 
¨g¨øy
[
func_cou¡
].
ndims
 =Çdims;

2023 
¨g¨øy
[
func_cou¡
].
dims
 = (*Ë
	`mÆloc
 (
ndims
 * ());

2024 
¨g¨øy
[
func_cou¡
].
≥riods
 = (*Ë
	`mÆloc
 (
ndims
 * ());

2025 
	`bc›y
(
dims
, 
¨g¨øy
[
func_cou¡
].dims, 
ndims
*());

2026 
	`bc›y
(
≥riods
, 
¨g¨øy
[
func_cou¡
].≥riods, 
ndims
*());

2027 
¨g¨øy
[
func_cou¡
].
ª‹dî
 =Ñeorder;

2028 
¨g¨øy
[
func_cou¡
].
comm_out
 = 
comm_ˇπ
;

2029 
cou¡
++;

2031 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2032 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Cart_create\n");

2036 
comm_cou¡
++;

2037 
	`In£πI¡oM©chHashM≠
 (
comm_ˇπ
, 
TYPE_COMM
, 
fûe
, 
löe
);

2041  
MPI_SUCCESS
;

2043 
	}
}

2045 
DLLAPI
 
MPIAPI
 
	$ISP_Comm_¸óã
 (
MPI_Comm
 
comm
, 
MPI_Group
 
group
, MPI_Comm *
comm_out
,

2046 c⁄° *
fûe
, 
löe
) {

2048 
sbuff
[
BUFFER_SIZE
];

2049 *
buff
 = 
NULL
;

2050 
≈rocs
;

2051 
cou¡
 = 1;

2053 
	`DebugPröt
("Entering MPI_Comm_create...\n");

2056 i‡(! 
is_öôülized
) {

2057  
	`PMPI_Comm_¸óã
(
comm
, 
group
, 
comm_out
);

2060 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2061 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2066 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Comm_create",

2068 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
buff
);

2069 
	`‰ì
 (
buff
);

2070 
	`£t_comm⁄_¨gs
 (
COMM_CREATE
);

2071 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

2072 
¨g¨øy
[
func_cou¡
].
group
 = group;

2073 
¨g¨øy
[
func_cou¡
].
cﬁ‹
 = 0;

2074 
¨g¨øy
[
func_cou¡
].
key
 = 0;

2075 
¨g¨øy
[
func_cou¡
].
comm_out
 = comm_out;

2076 
cou¡
++;

2078 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2079 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Comm_create\n");

2083 
comm_cou¡
++;

2084 
	`In£πI¡oM©chHashM≠
 (
comm_out
, 
TYPE_COMM
, 
fûe
, 
löe
);

2088  
MPI_SUCCESS
;

2089 
	}
}

2091 
DLLAPI
 
MPIAPI
 
	$ISP_Comm_dup
 (
MPI_Comm
 
comm
, MPI_Comm *
comm_out
, c⁄° *
fûe
,

2092 
löe
) {

2094 
sbuff
[
BUFFER_SIZE
];

2095 *
buff
 = 
NULL
;

2096 
≈rocs
;

2097 
cou¡
 = 1;

2099 
	`DebugPröt
("Entering MPI_Comm_dup...\n");

2102 i‡(! 
is_öôülized
) {

2103  
	`PMPI_Comm_dup
(
comm
, 
comm_out
);

2106 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2107 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2112 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Comm_dup",

2114 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
buff
);

2115 
	`‰ì
 (
buff
);

2116 
	`£t_comm⁄_¨gs
 (
COMM_DUP
);

2117 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

2118 
¨g¨øy
[
func_cou¡
].
group
 = 
MPI_GROUP_NULL
;

2119 
¨g¨øy
[
func_cou¡
].
cﬁ‹
 = 0;

2120 
¨g¨øy
[
func_cou¡
].
key
 = 0;

2121 
¨g¨øy
[
func_cou¡
].
comm_out
 = comm_out;

2122 
cou¡
++;

2124 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2125 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Comm_dup\n");

2128 
comm_cou¡
++;

2129 
	`In£πI¡oM©chHashM≠
 (
comm_out
, 
TYPE_COMM
, 
fûe
, 
löe
);

2132  
MPI_SUCCESS
;

2133 
	}
}

2135 
DLLAPI
 
MPIAPI
 
	$ISP_Comm_•lô
 (
MPI_Comm
 
comm
, 
cﬁ‹
, 
key
, MPI_Comm *
comm_out
,

2136 c⁄° *
fûe
, 
löe
) {

2138 
sbuff
[
BUFFER_SIZE
];

2139 *
buff
 = 
NULL
;

2140 
≈rocs
;

2141 
cou¡
 = 1;

2143 
	`DebugPröt
("Entering MPI_Comm_split...\n");

2146 i‡(! 
is_öôülized
) {

2147  
	`PMPI_Comm_•lô
(
comm
, 
cﬁ‹
, 
key
, 
comm_out
);

2150 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2151 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2156 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %d %s", 
func_cou¡
, "Comm_split",

2158 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
cﬁ‹
, 
buff
);

2159 
	`‰ì
 (
buff
);

2160 
	`£t_comm⁄_¨gs
 (
COMM_SPLIT
);

2161 
¨g¨øy
[
func_cou¡
].
comm
 = comm;

2162 
¨g¨øy
[
func_cou¡
].
group
 = 
MPI_GROUP_NULL
;

2163 
¨g¨øy
[
func_cou¡
].
cﬁ‹
 = color;

2164 
¨g¨øy
[
func_cou¡
].
key
 = key;

2165 
¨g¨øy
[
func_cou¡
].
comm_out
 = comm_out;

2166 
cou¡
++;

2168 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2169 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Comm_split\n");

2172 
comm_cou¡
++;

2173 
	`In£πI¡oM©chHashM≠
 (
comm_out
, 
TYPE_COMM
, 
fûe
, 
löe
);

2176  
MPI_SUCCESS
;

2177 
	}
}

2179 
DLLAPI
 
MPIAPI
 
	$ISP_Comm_‰ì
 (
MPI_Comm
 *
comm
, c⁄° *
fûe
, 
löe
) {

2181 
sbuff
[
BUFFER_SIZE
];

2182 *
buff
 = 
NULL
;

2183 
≈rocs
;

2184 
cou¡
 = 1;

2186 
	`DebugPröt
("Entering MPI_Comm_free...\n");

2189 i‡(! 
is_öôülized
) {

2190  
	`PMPI_Comm_‰ì
(
comm
);

2193 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2194 
buff
 = 
	`Profûî_¸óã_group_ønks
 (*
comm
, &
≈rocs
);

2199 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Comm_free",

2201 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
cou¡
, 
buff
);

2202 
	`‰ì
 (
buff
);

2203 
	`£t_comm⁄_¨gs
 (
COMM_FREE
);

2204 
¨g¨øy
[
func_cou¡
].
comm
 = 
MPI_COMM_NULL
;

2205 
¨g¨øy
[
func_cou¡
].
group
 = 
MPI_GROUP_NULL
;

2206 
¨g¨øy
[
func_cou¡
].
cﬁ‹
 = 0;

2207 
¨g¨øy
[
func_cou¡
].
key
 = 0;

2208 
¨g¨øy
[
func_cou¡
].
comm_out
 = 
comm
;

2209 
cou¡
++;

2211 
	`RemoveFromM©chHashM≠
 (
comm
, 
TYPE_COMM
, 
fûe
, 
löe
);

2213 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2214 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Comm_free\n");

2217 
comm_cou¡
--;

2219  
MPI_SUCCESS
;

2220 
	}
}

2222 
DLLAPI
 
MPIAPI
 
	$ISP_Ty≥_commô
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
) {

2224 
	`DebugPröt
("Entering MPI_Type_commit...\n");

2227 i‡(! 
is_öôülized
) {

2228  
	`PMPI_Ty≥_commô
(
d©©y≥
);

2231 
ty≥_cou¡
++;

2232 
	`In£πI¡oM©chHashM≠
 (
d©©y≥
, 
TYPE_TYPE
, 
fûe
, 
löe
);

2233  
	`PMPI_Ty≥_commô
(
d©©y≥
);

2234 
	}
}

2236 
DLLAPI
 
MPIAPI
 
	$ISP_Ty≥_‰ì
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
) {

2238 
	`DebugPröt
("Entering MPI_Type_free...\n");

2241 i‡(! 
is_öôülized
) {

2242  
	`PMPI_Ty≥_‰ì
(
d©©y≥
);

2245 
ty≥_cou¡
--;

2246 
	`RemoveFromM©chHashM≠
 (
d©©y≥
, 
TYPE_TYPE
, 
fûe
, 
löe
);

2247  
	`PMPI_Ty≥_‰ì
(
d©©y≥
);

2248 
	}
}

2250 
DLLAPI
 
MPIAPI
 
	$ISP_Bˇ°
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
roŸ
,

2251 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2253 
sbuff
[
BUFFER_SIZE
];

2254 *
buff
 = 
NULL
;

2255 
≈rocs
;

2257 
	`DebugPröt
("Entering MPI_Bcast...\n");

2260 i‡(! 
is_öôülized
) {

2261  
	`PMPI_Bˇ°
(
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
);

2264 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2265 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2270 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Bcast",

2271 "Bˇ°", 
d©©y≥
,

2272 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2273 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2274 
	`‰ì
 (
buff
);

2275 
	`£t_comm⁄_¨gs
 (
BCAST
);

2277 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2278 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Bcast\n");

2282  
	`PMPI_Bˇ°
(
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
);

2283 
	}
}

2285 
DLLAPI
 
MPIAPI
 
	$ISP_Sˇâî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2286 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

2287 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2289 
sbuff
[
BUFFER_SIZE
];

2290 *
buff
 = 
NULL
;

2291 
≈rocs
;

2292 
bcou¡
 = 1;

2293 
ty≥
 = 0;

2295 
	`DebugPröt
("Entering MPI_Scatter...\n");

2298 i‡(! 
is_öôülized
) {

2299  
	`PMPI_Sˇâî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
);

2302 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2303 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2308 if(
£ndty≥
 !
ªcvty≥
){

2309 
ty≥
 = -1;

2311 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Scatter",

2312 "Sˇâî", 
ty≥
,

2313 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2314 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2315 
	`‰ì
 (
buff
);

2316 
	`£t_comm⁄_¨gs
 (
SCATTER
);

2317 
bcou¡
++;

2319 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2320 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Scatter\n");

2323  
	`PMPI_Sˇâî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

2324 
ªcvty≥
, 
roŸ
, 
comm
);

2325 
	}
}

2327 
DLLAPI
 
MPIAPI
 
	$ISP_Sˇâîv
 (*
£ndbuf
, *
£nd˙t
, *
di•ls
, 
MPI_D©©y≥
 
£ndty≥
,

2328 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
, 
MPI_Comm
 
comm
,

2329 c⁄° *
fûe
, 
löe
) {

2331 
sbuff
[
BUFFER_SIZE
];

2332 *
buff
 = 
NULL
;

2333 
≈rocs
;

2334 
bcou¡
 = 1;

2335 
ty≥
 = 0;

2337 
	`DebugPröt
("Entering MPI_Scatterv...\n");

2340 i‡(! 
is_öôülized
) {

2341  
	`PMPI_Sˇâîv
(
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
);

2344 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2345 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2347 if(
£ndty≥
 !
ªcvty≥
){

2348 
ty≥
 = -1;

2350 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Scatterv",

2351 "Sˇâîv", 
ty≥
,

2352 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2353 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2354 
	`‰ì
 (
buff
);

2355 
	`£t_comm⁄_¨gs
 (
SCATTERV
);

2356 
bcou¡
++;

2358 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2359 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Scatterv\n");

2362  
	`PMPI_Sˇâîv
(
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
,

2363 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
);

2364 
	}
}

2366 
DLLAPI
 
MPIAPI
 
	$ISP_G©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2367 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

2368 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2370 
sbuff
[
BUFFER_SIZE
];

2371 *
buff
 = 
NULL
;

2372 
≈rocs
;

2373 
bcou¡
 = 1;

2374 
ty≥
 = 0;

2376 
	`DebugPröt
("Entering MPI_Gatherv...\n");

2379 i‡(! 
is_öôülized
) {

2380  
	`PMPI_G©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
roŸ
, 
comm
);

2383 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2384 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2389 if(
£ndty≥
 !
ªcvty≥
){

2390 
ty≥
 = -1;

2392 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Gatherv",

2393 "G©hîv", 
ty≥
,

2394 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2395 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2396 
	`‰ì
 (
buff
);

2397 
	`£t_comm⁄_¨gs
 (
GATHERV
);

2398 
bcou¡
++;

2400 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2401 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Gatherv\n");

2404  
	`PMPI_G©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

2405 
di•ls
, 
ªcvty≥
, 
roŸ
, 
comm
);

2406 
	}
}

2408 
DLLAPI
 
MPIAPI
 
	$ISP_G©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2409 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
,

2410 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2412 
sbuff
[
BUFFER_SIZE
];

2413 *
buff
 = 
NULL
;

2414 
≈rocs
;

2415 
bcou¡
 = 1;

2416 
ty≥
 = 0;

2418 
	`DebugPröt
("Entering MPI_Gather...\n");

2421 i‡(! 
is_öôülized
) {

2422  
	`PMPI_G©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
);

2425 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2426 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2431 if(
£ndty≥
 !
ªcvty≥
){

2432 
ty≥
 = -1;

2434 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Gather", "Gather",

2435 
ty≥
,

2436 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2437 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2438 
	`‰ì
 (
buff
);

2439 
	`£t_comm⁄_¨gs
 (
GATHER
);

2440 
bcou¡
++;

2442 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2443 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Gather\n");

2446  
	`PMPI_G©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
,

2447 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
);

2448 
	}
}

2450 
DLLAPI
 
MPIAPI
 
	$ISP_AŒg©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2451 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

2452 c⁄° *
fûe
, 
löe
) {

2454 
sbuff
[
BUFFER_SIZE
];

2455 *
buff
 = 
NULL
;

2456 
≈rocs
;

2457 
bcou¡
 = 1;

2458 
ty≥
 = 0;

2460 
	`DebugPröt
("Entering MPI_Allgather...\n");

2463 i‡(! 
is_öôülized
) {

2464  
	`PMPI_AŒg©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
);

2467 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2468 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2473 if(
£ndty≥
 !
ªcvty≥
){

2474 
ty≥
 = -1;

2476 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Allgather",

2477 "AŒg©hî", 
ty≥
,

2478 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2479 
	`‰ì
 (
buff
);

2480 
	`£t_comm⁄_¨gs
 (
ALLGATHER
);

2481 
bcou¡
++;

2483 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2484 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Allgather\n");

2487  
	`PMPI_AŒg©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
);

2488 
	}
}

2490 
DLLAPI
 
MPIAPI
 
	$ISP_AŒg©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2491 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

2492 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2494 
sbuff
[
BUFFER_SIZE
];

2495 *
buff
 = 
NULL
;

2496 
≈rocs
;

2497 
bcou¡
 = 1;

2498 
ty≥
 = 0;

2500 
	`DebugPröt
("Entering MPI_Allgatherv...\n");

2503 i‡(! 
is_öôülized
) {

2504  
	`PMPI_AŒg©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
comm
);

2507 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2508 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2513 if(
£ndty≥
 !
ªcvty≥
){

2514 
ty≥
 = -1;

2516 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Allgatherv",

2517 "AŒg©hîv", 
ty≥
,

2518 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2519 
	`‰ì
 (
buff
);

2520 
	`£t_comm⁄_¨gs
 (
ALLGATHERV
);

2521 
bcou¡
++;

2523 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2524 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Allgatherv\n");

2527  
	`PMPI_AŒg©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

2528 
di•ls
, 
ªcvty≥
, 
comm
);

2529 
	}
}

2531 
DLLAPI
 
MPIAPI
 
	$ISP_AŒtﬂŒ
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

2532 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

2533 c⁄° *
fûe
, 
löe
) {

2535 
sbuff
[
BUFFER_SIZE
];

2536 *
buff
 = 
NULL
;

2537 
≈rocs
;

2538 
bcou¡
 = 1;

2539 
ty≥
 = 0;

2541 
	`DebugPröt
("Entering MPI_Alltoall...\n");

2544 i‡(! 
is_öôülized
) {

2545  
	`PMPI_AŒtﬂŒ
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
);

2548 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2549 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2554 if(
£ndty≥
 !
ªcvty≥
){

2555 
ty≥
 = -1;

2557 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Alltoall",

2558 "AŒtﬂŒ", 
ty≥
,

2559 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2560 
	`‰ì
 (
buff
);

2561 
	`£t_comm⁄_¨gs
 (
ALLTOALL
);

2562 
bcou¡
++;

2564 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2565 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Alltoall\n");

2568  
	`PMPI_AŒtﬂŒ
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

2569 
ªcvty≥
, 
comm
);

2570 
	}
}

2572 
DLLAPI
 
MPIAPI
 
	$ISP_AŒtﬂŒv
 (*
£ndbuf
, *
£nd˙t
, *
sdi•ls
,

2573 
MPI_D©©y≥
 
£ndty≥
, *
ªcvbuf
, *
ªcvcou¡
, *
rdi•ls
,

2574 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2576 
sbuff
[
BUFFER_SIZE
];

2577 *
buff
 = 
NULL
;

2578 
≈rocs
;

2579 
bcou¡
 = 1;

2580 
ty≥
 = 0;

2582 
	`DebugPröt
("Entering MPI_Alltoallv...\n");

2585 i‡(! 
is_öôülized
) {

2586  
	`PMPI_AŒtﬂŒv
(
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
rdi•ls
,

2587 
ªcvty≥
, 
comm
);

2590 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2591 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2596 if(
£ndty≥
 !
ªcvty≥
){

2597 
ty≥
 = -1;

2599 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Alltoallv",

2600 "AŒtﬂŒv", 
ty≥
,

2601 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2602 
	`‰ì
 (
buff
);

2603 
	`£t_comm⁄_¨gs
 (
ALLTOALLV
);

2604 
bcou¡
++;

2606 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2607 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Alltoallv\n");

2610  
	`PMPI_AŒtﬂŒv
(
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
,

2611 
ªcvcou¡
, 
rdi•ls
, 
ªcvty≥
, 
comm
);

2612 
	}
}

2614 
DLLAPI
 
MPIAPI
 
	$ISP_Sˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

2615 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2617 
sbuff
[
BUFFER_SIZE
];

2618 *
buff
 = 
NULL
;

2619 
≈rocs
;

2620 
bcou¡
 = 1;

2622 
	`DebugPröt
("Entering MPI_Scan...\n");

2625 i‡(! 
is_öôülized
) {

2626  
	`PMPI_Sˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2629 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2630 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2635 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Scan",

2636 "Sˇn", 
d©©y≥
,

2637 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2638 
	`‰ì
 (
buff
);

2639 
	`£t_comm⁄_¨gs
 (
REDUCE
);

2640 
bcou¡
++;

2642 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2643 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Scan\n");

2646  
	`PMPI_Sˇn
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2647 
	}
}

2649 
DLLAPI
 
MPIAPI
 
	$ISP_Redu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

2650 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
roŸ
, 
MPI_Comm
 
comm
,

2651 c⁄° *
fûe
, 
löe
) {

2653 
sbuff
[
BUFFER_SIZE
];

2654 *
buff
 = 
NULL
;

2655 
≈rocs
;

2657 
	`DebugPröt
("Entering MPI_Reduce...\n");

2660 i‡(! 
is_öôülized
) {

2661  
	`PMPI_Redu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
);

2664 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2665 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2670 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %†%s", 
func_cou¡
, "Reduce",

2671 "Redu˚", 
d©©y≥
,

2672 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
,

2673 
	`Tøn¶©eR™ks
(
roŸ
, 
comm
, 
MPI_COMM_WORLD
), 
buff
);

2674 
	`‰ì
 (
buff
);

2675 
	`£t_comm⁄_¨gs
 (
REDUCE
);

2677 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2678 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Reduce\n");

2682  
	`PMPI_Redu˚
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
);

2683 
	}
}

2686 
DLLAPI
 
MPIAPI
 
	$ISP_Exsˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

2687 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2689 
sbuff
[
BUFFER_SIZE
];

2690 *
buff
 = 
NULL
;

2691 
≈rocs
;

2692 
bcou¡
 = 1;

2694 
	`DebugPröt
("Entering MPI_Exscan...\n");

2697 i‡(! 
is_öôülized
) {

2698  
	`PMPI_Exsˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2701 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2702 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2706 
	`•rötf
 (
sbuff
, "%d %†%†%u %†%d %d %d %s", 
func_cou¡
, "Exscan",

2707 "Exsˇn", (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2708 
	`‰ì
 (
buff
);

2709 
	`£t_comm⁄_¨gs
 (
REDUCE
);

2710 
bcou¡
++;

2712 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2713 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Exscan\n");

2716  
	`PMPI_Exsˇn
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2717 
	}
}

2720 
DLLAPI
 
MPIAPI
 
	$ISP_Redu˚_sˇâî
 (*
£ndbuff
, *
ªcvbuff
, *
ªcv˙t
,

2721 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2723 
sbuff
[
BUFFER_SIZE
];

2724 *
buff
 = 
NULL
;

2725 
≈rocs
;

2726 
bcou¡
 = 1;

2728 
	`DebugPröt
("Entering MPI_Reduce_scatter...\n");

2731 i‡(! 
is_öôülized
) {

2732  
	`PMPI_Redu˚_sˇâî
(
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
);

2735 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2736 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2741 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Reduce_scatter",

2742 "Redu˚_sˇâî", 
d©©y≥
,

2743 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2744 
	`‰ì
 (
buff
);

2745 
	`£t_comm⁄_¨gs
 (
REDUCE_SCATTER
);

2746 
bcou¡
++;

2748 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2749 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Reduce_scatter\n");

2752  
	`PMPI_Redu˚_sˇâî
 (
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
);

2753 
	}
}

2755 
DLLAPI
 
MPIAPI
 
	$ISP_AŒªdu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

2756 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
) {

2758 
sbuff
[
BUFFER_SIZE
];

2759 *
buff
 = 
NULL
;

2760 
≈rocs
;

2761 
bcou¡
 = 1;

2763 
	`DebugPröt
("Entering MPI_Allreduce...\n");

2766 i‡(! 
is_öôülized
) {

2767  
	`PMPI_AŒªdu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2770 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2771 
buff
 = 
	`Profûî_¸óã_group_ønks
 (
comm
, &
≈rocs
);

2776 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %d %s", 
func_cou¡
, "Allreduce",

2777 "AŒªdu˚", 
d©©y≥
,

2778 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
≈rocs
, 
bcou¡
, 
buff
);

2779 
	`‰ì
 (
buff
);

2780 
	`£t_comm⁄_¨gs
 (
ALLREDUCE
);

2781 
bcou¡
++;

2783 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2784 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Allreduce\n");

2787  
	`PMPI_AŒªdu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
);

2788 
	}
}

2790 
DLLAPI
 
MPIAPI
 
	$ISP_WaôÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

2791 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
) {

2793 
sbuff
[
BUFFER_SIZE
];

2794 
sbuff1
[
BUFFER_SIZE
];

2795 
i
;

2796 
off£t
 = 0;

2797 * 
ív
 = 
NULL
;

2798 
_cou¡
 = 0;

2799 
i•ªque°
;

2800 
ªque°_ty≥
;

2802 
	`DebugPröt
("Entering MPI_Waitall...\n");

2805 i‡(! 
is_öôülized
) {

2806  
	`PMPI_WaôÆl
(
cou¡
, 
¨øy_of_ªque°s
, 
¨øy_of_°©u£s
);

2809 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2810 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

2811 
	`£t_comm⁄_¨gs
 (
WAITALL
);

2812 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
¨øy_of_ªque°s
;

2813 
¨g¨øy
[
func_cou¡
].
°©us
 = 
¨øy_of_°©u£s
;

2815 
i
 = 0 ; i < 
cou¡
 ; i++) {

2816 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

2817 i‡(
ív
 && 
	`°rcmp
(env, "MPI_PROC_NULL") && strcmp(env, "MPI_PROC_NULL_PERSIST")) {

2818 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

2819 
off£t
 = (Ë
	`°æí
(
sbuff1
);

2820 
_cou¡
++;

2827 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Waitall",

2829 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

2830 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2831 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Waitall\n");

2835 
i
 = 0 ; i < 
cou¡
 ; i++) {

2836 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

2837 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

2838 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, 
i•ªque°
);

2841 i‡(
ív
 && !
	`°rcmp
(env, "MPI_PROC_NULL")) {

2842 
_cou¡
++;

2843 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

2844 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

2845 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

2846 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], 
MPI_STATUS_IGNORE
);

2848 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], &
¨øy_of_°©u£s
[i]);

2850 } i‡(
ív
 && !
	`°rcmp
(env, "MPI_PROC_NULL_PERSIST")) {

2851 
_cou¡
++;

2852 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

2853 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
MPI_STATUS_IGNORE
);

2855 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), &
¨øy_of_°©u£s
[
i
]);

2857 } i‡(
ív
) {

2858 
ªque°_ty≥
 =

2859 
≥rsi°ít_¨g¨øy
[
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
)].
func
;

2861 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

2862 
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

2863 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

2865 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

2866 
ªque°_ty≥
 =
RECV_INIT
) {

2867 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
¨øy_of_°©u£s
, 
i
);

2869 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
 ||

2870 
ªque°_ty≥
 =
SEND_INIT
) {

2871 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
],

2872 
¨øy_of_°©u£s
, 
i
);

2874 i‡(
ªque°_ty≥
 !
SEND_INIT
 &&Ñeque°_ty≥ !
RECV_INIT
){

2880 
¨øy_of_ªque°s
[
i
] = 
MPI_REQUEST_NULL
;

2884 
ªque°_cou¡
 -
_cou¡
;

2886  
MPI_SUCCESS
;

2887 
	}
}

2889 
DLLAPI
 
MPIAPI
 
	$ISP_Waô™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

2890 *
ödex
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
) {

2892 
sbuff
[
BUFFER_SIZE
];

2893 
sbuff1
[
BUFFER_SIZE
];

2894 
i
;

2895 
off£t
 = 0;

2896 *
ív
 = 
NULL
;

2897 *
ûi°
 = 
NULL
;

2898 
_cou¡
 = 0;

2899 
i•ªque°
;

2900 
ªque°_to_com∂ëe
;

2901 
óæõ°_£nd
;

2902 
MPI_Reque°
 
ªque°_to_com∂ëe_c›y
;

2905 
	`DebugPröt
("Entering MPI_Waitany...\n");

2908 i‡(! 
is_öôülized
) {

2909  
	`PMPI_Waô™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
°©us
);

2912 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

2913 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

2914 
ûi°
 = (*)
	`mÆloc
 ( ()*
cou¡
);

2915 
	`£t_comm⁄_¨gs
 (
WAITANY
);

2916 
¨g¨øy
[
func_cou¡
].
ªque°

¨øy_of_ªque°s
;

2917 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

2918 
i
 = 0 ; i < 
cou¡
 ; i++) {

2919 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

2920 i‡(
ív
 =
NULL
) {

2921 
ûi°
[
i
] = -1;

2923 } i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL") || !strcmp(env, "MPI_PROC_NULL_PERSIST")) {

2926 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

2927 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

2928 
ªque°_cou¡
--;

2929 *
ödex
 = 
i
;

2930 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

2931 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

2932  
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], 
°©us
);

2934  
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
°©us
);

2936 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
is_com∂ëe
) {

2937 
ªque°_cou¡
--;

2938 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

2939 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
°©us
, 0);

2940 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

2941 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
], 
°©us
, 0);

2944 
_cou¡
++;

2945 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

2946 
ûi°
[
i
] = 
	`©oi
(
ív
);

2947 
off£t
 = (Ë
	`°æí
(
sbuff1
);

2949 i‡(
_cou¡
 == 0) {

2950 
	`‰ì
(
ûi°
);

2951 *
ödex
 = 
MPI_UNDEFINED
;

2952  
MPI_SUCCESS
;

2958 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Waitany",

2960 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

2961 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

2962 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Waitany\n");

2966 
óæõ°_£nd
 = -1;

2967 
ªque°_to_com∂ëe
 = -1;

2970 
i
 = 0 ; i < 
cou¡
 ; i++) {

2971 i‡(
ûi°
[
i
] == -1) {

2974 i‡(
¨g¨øy
[
ûi°
[
i
]].
func
 =
ISEND
 &&

2975 (
óæõ°_£nd
 =-1 || 
ûi°
[
i
] <Éarliest_send)) {

2976 
óæõ°_£nd
 = 
ûi°
[
i
];

2977 
ªque°_to_com∂ëe
 = 
i
;

2979 i‡(
¨g¨øy
[
ûi°
[
i
]].
is_com∂ëe
) {

2980 
ªque°_to_com∂ëe
 = 
i
;

2986 i‡(
ªque°_to_com∂ëe
 == -1) {

2987 
	`‰ì
 (
ûi°
);

2988 *
ödex
 = 
MPI_UNDEFINED
;

2989  
MPI_SUCCESS
;

2992 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
ªque°_to_com∂ëe
]);

2993 
ªque°_to_com∂ëe_c›y
 = 
¨øy_of_ªque°s
[
ªque°_to_com∂ëe
];

2994 
ªque°_cou¡
--;

2995 i‡(
¨g¨øy
[
ûi°
[
ªque°_to_com∂ëe
]].
func
 =
IRECV
 ||

2996 
¨g¨øy
[
ûi°
[
ªque°_to_com∂ëe
]].
func
 =
ISEND
) {

2997 *
ödex
 = 
ªque°_to_com∂ëe
;

2998 
¨øy_of_ªque°s
[
ªque°_to_com∂ëe
] = 
MPI_REQUEST_NULL
;

2999 i‡(
¨g¨øy
[
ûi°
[
ªque°_to_com∂ëe
]].
func
 =
IRECV
) {

3000 
	`£tIªcvReq
 (
ûi°
[
ªque°_to_com∂ëe
], 
°©us
, 0);

3002 } i‡(
¨g¨øy
[
ûi°
[
ªque°_to_com∂ëe
]].
func
 =
ISEND
) {

3003 
	`£tI£ndReq
 (
ûi°
[
ªque°_to_com∂ëe
],

3004 &
¨øy_of_ªque°s
[
ªque°_to_com∂ëe
], 
°©us
, 0);

3007 
¨øy_of_ªque°s
[
ªque°_to_com∂ëe
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3009 
	`RemoveFromM©chHashM≠
 (&
ªque°_to_com∂ëe_c›y
, 
TYPE_REQUEST
, 
fûe
, 
löe
);

3011 
	`‰ì
 (
ûi°
);

3012  
MPI_SUCCESS
;

3013 
	}
}

3015 
DLLAPI
 
MPIAPI
 
	$ISP_Waôsome
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

3016 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
,

3017 c⁄° *
fûe
, 
löe
) {

3019 
ªsu…
;

3020 
sbuff
[
BUFFER_SIZE
];

3021 
sbuff1
[
BUFFER_SIZE
];

3022 
i
;

3023 
off£t
 = 0;

3024 *
ív
 = 
NULL
;

3025 *
ûi°
 = 
NULL
;

3026 
_cou¡
 = 0;

3027 
_¥o˙uŒ_cou¡
 = 0;

3028 
rcou¡
 = 0;

3029 
i•ªque°
;

3031 
	`DebugPröt
("Entering MPI_Waitsome...\n");

3034 i‡(! 
is_öôülized
) {

3035  
	`PMPI_Waôsome
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
);

3038 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3039 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

3040 
ûi°
 = (*)
	`mÆloc
 ( ()*
öcou¡
);

3041 
	`£t_comm⁄_¨gs
 (
WAITANY
);

3042 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
¨øy_of_ªque°s
;

3043 
¨g¨øy
[
func_cou¡
].
°©us
 = 
¨øy_of_°©u£s
;

3045 
i
 = 0 ; i < 
öcou¡
 ; i++) {

3046 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

3047 i‡(
ív
 =
NULL
) {

3048 
ûi°
[
i
] = -1;

3051 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

3052 
ûi°
[
i
] = -2;

3053 
_¥o˙uŒ_cou¡
++;

3056 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

3057 
ûi°
[
i
] = -3;

3058 
_¥o˙uŒ_cou¡
++;

3061 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
is_com∂ëe
) {

3062 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

3063 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
¨øy_of_°©u£s
, 
i
);

3064 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

3065 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
], 
¨øy_of_°©u£s
, i);

3068 
_cou¡
++;

3069 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

3070 
ûi°
[
i
] = 
	`©oi
(
ív
);

3071 
off£t
 = (Ë
	`°æí
(
sbuff1
);

3073 i‡(
_cou¡
 =0 && 
_¥o˙uŒ_cou¡
 == 0) {

3079 i‡(
_cou¡
 != 0) {

3081 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Waitany",

3083 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

3084 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3085 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Waitsome\n");

3089 
_cou¡
 +
_¥o˙uŒ_cou¡
;

3090 
i
 = 0 ; i < 
öcou¡
 ; i++) {

3091 
¨øy_of_ödi˚s
[
i
] = 0;

3092 i‡(
ûi°
[
i
] == -1) {

3095 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

3096 i‡(
ûi°
[
i
] == -2) {

3097 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3098 
ªque°_cou¡
--;

3099 
¨øy_of_ödi˚s
[
i
] = 1;

3100 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3101 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

3102 
rcou¡
++;

3103 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

3104 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], 
MPI_STATUS_IGNORE
);

3106 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], &
¨øy_of_°©u£s
[i]);

3108 } i‡(
ûi°
[
i
] == -3) {

3109 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3110 
ªque°_cou¡
--;

3111 
¨øy_of_ödi˚s
[
i
] = 1;

3112 
rcou¡
++;

3113 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

3114 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
MPI_STATUS_IGNORE
);

3116 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), &
¨øy_of_°©u£s
[
i
]);

3118 } i‡(!
¨g¨øy
[
ûi°
[
i
]].
is_com∂ëe
) {

3124 *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
Ë
MPI_REQUEST_NULL
;

3126 
ªque°_cou¡
--;

3127 i‡(
¨g¨øy
[
ûi°
[
i
]].
func
 =
IRECV
 ||árg¨øy[ûi°[i]].fun¯=
ISEND
) {

3128 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3129 
¨øy_of_ödi˚s
[
i
] = 1;

3130 
¨øy_of_ªque°s
[
i
] = 
MPI_REQUEST_NULL
;

3131 
rcou¡
++;

3133 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3140 i‡(
rcou¡
 =
_cou¡
) {

3141 *
outcou¡
 = 
_cou¡
;

3144 
ªsu…
 = 
	`PMPI_Waôsome
 (
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
);

3145 *
outcou¡
+
_cou¡
;

3147  
ªsu…
;

3148 
	}
}

3150 
DLLAPI
 
MPIAPI
 
	$ISP_Te°™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
ödex
,

3151 *
Êag
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
) {

3153 
ªsu…
;

3154 
sbuff
[
BUFFER_SIZE
];

3155 
sbuff1
[
BUFFER_SIZE
];

3156 
i
;

3157 
off£t
 = 0;

3158 *
ív
 = 
NULL
;

3159 *
ûi°
 = 
NULL
;

3160 
_cou¡
 = 0;

3161 
d⁄e
 = 0;

3162 
no_com∂ëi⁄
;

3163 
i•ªque°
;

3166 
	`DebugPröt
("Entering MPI_Testany...\n");

3169 i‡(! 
is_öôülized
) {

3170  
	`PMPI_Te°™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
, 
°©us
);

3173 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3174 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

3175 
ûi°
 = (*)
	`mÆloc
 ( ()*
cou¡
);

3177 
	`£t_comm⁄_¨gs
 (
TESTANY
);

3178 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
¨øy_of_ªque°s
;

3179 
¨g¨øy
[
func_cou¡
].
°©us
 = status;

3180 
¨g¨øy
[
func_cou¡
].
ödex
 = index;

3181 
¨g¨øy
[
func_cou¡
].
Êag
 = flag;

3183 
i
 = 0 ; i < 
cou¡
 ; i++) {

3184 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

3185 i‡(
ív
 =
NULL
) {

3186 
ûi°
[
i
] = -1;

3188 } i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL") || !strcmp(env, "MPI_PROC_NULL_PERSIST")) {

3191 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3192 
ªque°_cou¡
--;

3193 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

3194 *
ödex
 = 
i
;

3195 *
Êag
 = 1;

3196 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

3197 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3198  
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], 
°©us
);

3200  
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
°©us
);

3202 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
is_com∂ëe
) {

3203 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

3204 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
°©us
, 
i
);

3205 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

3206 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
], 
°©us
, i);

3209 
_cou¡
++;

3210 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

3211 
ûi°
[
i
] = 
	`©oi
(
ív
);

3212 
off£t
 = (Ë
	`°æí
(
sbuff1
);

3218 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Testany", "Testany",

3220 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

3221 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3222 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Testany\n");

3228 
no_com∂ëi⁄
 = 1;

3230 
i
 = 0 ; i < 
cou¡
 ; i++) {

3231 i‡(
ûi°
[
i
] == -1) {

3234 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

3239 
ív
 = 
	`HashM≠_GëEnv
(&
rm≠
, 
i•ªque°
);

3240 i‡(
no_com∂ëi⁄
 && 
i•ªque°
 =* ((*Ë
	`HashM≠_GëReque°
(&
rm≠
, isprequest))

3241 && (
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

3242 
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
RECV_INIT
 || 
£nd_block
)) {

3243 
no_com∂ëi⁄
 = 1;

3247 
no_com∂ëi⁄
 = 0;

3250 i‡(!
¨g¨øy
[
ûi°
[
i
]].
is_com∂ëe
) {

3251 *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
Ë
MPI_REQUEST_NULL
;

3253 
ªque°_cou¡
--;

3254 i‡(
¨g¨øy
[
ûi°
[
i
]].
func
 =
IRECV
 ||árg¨øy[ûi°[i]].fun¯=
ISEND
) {

3255 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3256 *
Êag
 = 1;

3257 *
ödex
 = 
i
;

3258 
¨øy_of_ªque°s
[
i
] = 
MPI_REQUEST_NULL
;

3259 
d⁄e
 = 1;

3261 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3270 i‡(
no_com∂ëi⁄
) {

3271 *
Êag
 = 0;

3272 *
ödex
 = 
MPI_UNDEFINED
;

3273  
MPI_SUCCESS
;

3277 i‡(
d⁄e
) {

3278  
MPI_SUCCESS
;

3281 
ªsu…
 = 
	`PMPI_Te°™y
 (
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
, 
°©us
);

3282 i‡(*
Êag
) {

3286  
ªsu…
;

3287 
	}
}

3289 
DLLAPI
 
MPIAPI
 
	$ISP_Te°some
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

3290 *
outcou¡
, *
¨øy_of_ödi˚s
,
MPI_Sètus
 *
¨øy_of_°©u£s
,

3291 c⁄° *
fûe
, 
löe
) {

3293 
ªsu…
;

3294 
sbuff
[
BUFFER_SIZE
];

3295 
sbuff1
[
BUFFER_SIZE
];

3296 
i
;

3297 
off£t
 = 0;

3298 *
ív
 = 
NULL
;

3299 *
ûi°
 = 
NULL
;

3300 
_cou¡
 = 0;

3301 
_¥o˙uŒ_cou¡
 = 0;

3302 
rcou¡
 = 0;

3303 
i•ªque°
;

3305 
	`DebugPröt
("Entering MPI_Testsome...\n");

3308 i‡(! 
is_öôülized
) {

3309  
	`PMPI_Te°some
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
);

3312 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3313 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

3314 
ûi°
 = (*)
	`mÆloc
 ( ()*
öcou¡
);

3316 *
outcou¡
 = 0;

3317 
	`£t_comm⁄_¨gs
 (
TESTANY
);

3318 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
¨øy_of_ªque°s
;

3319 
¨g¨øy
[
func_cou¡
].
°©us
 = 
¨øy_of_°©u£s
;

3320 
¨g¨øy
[
func_cou¡
].
ödex
 = 
¨øy_of_ödi˚s
;

3322 
i
 = 0 ; i < 
öcou¡
 ; i++) {

3323 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

3324 i‡(
ív
 =
NULL
) {

3325 
ûi°
[
i
] = -1;

3326 
¨øy_of_ªque°s
[
i
] = 
MPI_REQUEST_NULL
;

3329 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

3330 
ûi°
[
i
] = -2;

3331 
_¥o˙uŒ_cou¡
++;

3334 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

3335 
ûi°
[
i
] = -3;

3336 
_¥o˙uŒ_cou¡
++;

3339 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
is_com∂ëe
) {

3340 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
) {

3341 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
¨øy_of_°©u£s
, 
i
);

3342 } i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

3343 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
], 
¨øy_of_°©u£s
, i);

3346 
_cou¡
++;

3347 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

3348 
ûi°
[
i
] = 
	`©oi
(
ív
);

3349 
off£t
 = (Ë
	`°æí
(
sbuff1
);

3351 i‡(
_cou¡
 =0 && 
_¥o˙uŒ_cou¡
 == 0) {

3357 i‡(
_cou¡
 != 0) {

3359 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Testany", "Testsome",

3361 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

3362 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3363 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Testsome\n");

3368 
_cou¡
 +
_¥o˙uŒ_cou¡
;

3369 
i
 = 0 ; i < 
öcou¡
 ; i++) {

3370 i‡(
ûi°
[
i
] == -1) {

3373 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

3375 i‡(
ûi°
[
i
] == -2) {

3376 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3377 
ªque°_cou¡
--;

3378 
¨øy_of_ödi˚s
[
i
] = 1;

3379 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3380 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

3381 
rcou¡
++;

3382 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

3383 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], 
MPI_STATUS_IGNORE
);

3385 
	`PMPI_Waô
 (&
¨øy_of_ªque°s
[
i
], &
¨øy_of_°©u£s
[i]);

3387 } i‡(
ûi°
[
i
] == -3) {

3388 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3389 
¨øy_of_ödi˚s
[
i
] = 1;

3390 
rcou¡
++;

3391 i‡(
¨øy_of_°©u£s
 =
MPI_STATUSES_IGNORE
) {

3392 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), 
MPI_STATUS_IGNORE
);

3394 
	`PMPI_Waô
 (
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
), &
¨øy_of_°©u£s
[
i
]);

3396 } i‡(!
¨g¨øy
[
ûi°
[
i
]].
is_com∂ëe
) {

3398 *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
Ë
MPI_REQUEST_NULL
;

3400 
ªque°_cou¡
--;

3401 i‡(
¨g¨øy
[
ûi°
[
i
]].
func
 =
IRECV
 ||árg¨øy[ûi°[i]].fun¯=
ISEND
) {

3402 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3403 
rcou¡
++;

3404 
¨øy_of_ödi˚s
[
i
] = 1;

3405 
¨øy_of_ªque°s
[
i
] = 
MPI_REQUEST_NULL
;

3407 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3415 i‡(
rcou¡
 =
_cou¡
) {

3416 *
outcou¡
 = 
_cou¡
;

3420 
ªsu…
 = 
	`PMPI_Te°some
 (
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
,

3421 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
);

3422 i‡(*
outcou¡
) {

3426 *
outcou¡
 +
rcou¡
;

3427  
ªsu…
;

3428 
	}
}

3430 
DLLAPI
 
MPIAPI
 
	$ISP_Te°Æl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
Êag
,

3431 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
) {

3433 
ªsu…
;

3434 
sbuff
[
BUFFER_SIZE
];

3435 
sbuff1
[
BUFFER_SIZE
];

3436 
i
;

3437 
off£t
 = 0;

3438 *
ív
 = 
NULL
;

3439 
_cou¡
 = 0;

3440 
no_com∂ëi⁄
;

3441 
i•ªque°
;

3442 
ªque°_ty≥
;

3443 
MPI_Reque°
 *
¨øy_of_ªque°s_c›y
;

3445 
	`DebugPröt
("Entering MPI_Testall...\n");

3448 i‡(! 
is_öôülized
) {

3449  
	`PMPI_Te°Æl
(
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
);

3452 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3453 
	`mem£t
 (
sbuff1
, '\0', 
BUFFER_SIZE
);

3454 
	`£t_comm⁄_¨gs
 (
TESTALL
);

3455 
¨g¨øy
[
func_cou¡
].
ªque°
 = 
¨øy_of_ªque°s
;

3456 
¨g¨øy
[
func_cou¡
].
°©us
 = 
¨øy_of_°©u£s
;

3457 
¨g¨øy
[
func_cou¡
].
Êag
 = flag;

3459 
i
 = 0 ; i < 
cou¡
 ; i++) {

3460 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, *((*)&
¨øy_of_ªque°s
[
i
]));

3461 i‡(
ív
 && 
	`°rcmp
(env, "MPI_PROC_NULL") && strcmp(env, "MPI_PROC_NULL_PERSIST")) {

3462 
	`•rötf
 (
sbuff1
+
off£t
, "%†", 
ív
);

3463 
off£t
 = (Ë
	`°æí
(
sbuff1
);

3464 
_cou¡
++;

3469 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d %d %s", 
func_cou¡
, "Testall",

3471 (Ë
	`°æí
(
fûe
), fûe, 
löe
, 
_cou¡
, 
sbuff1
);

3472 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3473 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Testall\n");

3477 
no_com∂ëi⁄
 = 1;

3479 
_cou¡
 = 0;

3480 
¨øy_of_ªque°s_c›y
 = 
	`mÆloc
(
cou¡
 * (*
¨øy_of_ªque°s
));

3481 
	`mem˝y
(
¨øy_of_ªque°s_c›y
, 
¨øy_of_ªque°s
, 
cou¡
 * (*array_of_requests));

3482 
i
 = 0 ; i < 
cou¡
 ; i++) {

3483 
i•ªque°
 = *((*)&
¨øy_of_ªque°s
[
i
]);

3484 
ív
 = 
	`HashM≠_GëEnv
 (&
rm≠
, 
i•ªque°
);

3485 i‡(!
ív
) {

3486 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3487 *
Êag
 = 1;

3488 
	`‰ì
(
¨øy_of_ªque°s_c›y
);

3493 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL")) {

3494 
_cou¡
++;

3495 
no_com∂ëi⁄
 = 0;

3496 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
 (&
rm≠
, 
i•ªque°
);

3497 
	`HashM≠_Dñëe
 (&
rm≠
, 
i•ªque°
);

3502 i‡(!
	`°rcmp
(
ív
, "MPI_PROC_NULL_PERSIST")) {

3503 
_cou¡
++;

3504 
no_com∂ëi⁄
 = 0;

3512 i‡(
no_com∂ëi⁄
 && 
i•ªque°
 =* ((*Ë
	`HashM≠_GëReque°
(&
rm≠
, isprequest))

3513 && (
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

3514 
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
RECV_INIT
 || 
£nd_block
)) {

3515 
no_com∂ëi⁄
 = 1;

3519 
no_com∂ëi⁄
 = 0;

3522 
ªque°_ty≥
 =

3523 
≥rsi°ít_¨g¨øy
[
	`gë_≥rsi°ít_ªque°_ödex
(
i•ªque°
)].
func
;

3524 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

3525 
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
) {

3526 
¨øy_of_ªque°s
[
i
] = *
	`HashM≠_GëReque°
(&
rm≠
, 
i•ªque°
);

3529 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
IRECV
 ||

3530 
ªque°_ty≥
 =
RECV_INIT
) {

3531 
_cou¡
++;

3532 
	`£tIªcvReq
 (
	`©oi
(
ív
), 
¨øy_of_°©u£s
, 
i
);

3534 i‡(
¨g¨øy
[
	`©oi
(
ív
)].
func
 =
ISEND
 ||

3535 
ªque°_ty≥
 =
SEND_INIT
) {

3536 
_cou¡
++;

3537 
	`£tI£ndReq
 (
	`©oi
(
ív
), &
¨øy_of_ªque°s
[
i
],

3538 
¨øy_of_°©u£s
, 
i
);

3540 i‡(
ªque°_ty≥
 !
SEND_INIT
 &&Ñeque°_ty≥ !
RECV_INIT
) {

3548 i‡(
no_com∂ëi⁄
) {

3549 *
Êag
 = 0;

3550 
	`‰ì
(
¨øy_of_ªque°s_c›y
);

3551  
MPI_SUCCESS
;

3553 
ªque°_cou¡
 -
_cou¡
;

3555 
ªsu…
 = 
	`PMPI_Te°Æl
 (
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
);

3556 i‡(*
Êag
) {

3560 
i
 = 0; i < 
cou¡
; i++) {

3561 
	`RemoveFromM©chHashM≠
 (&
¨øy_of_ªque°s_c›y
[
i
], 
TYPE_REQUEST
, 
fûe
, 
löe
);

3563 
	`‰ì
(
¨øy_of_ªque°s_c›y
);

3564  
ªsu…
;

3565 
	}
}

3568 
DLLAPI
 
MPIAPI
 
	$ISP_Ab‹t
 (
MPI_Comm
 
comm
, 
îr‹code
, c⁄° *
fûe
, 
löe
) {

3569 
sbuff
[
BUFFER_SIZE
];

3571 
	`DebugPröt
("Entering MPI_Abort...\n");

3574 i‡(! 
is_öôülized
) {

3575  
	`PMPI_Ab‹t
(
comm
, 
îr‹code
);

3578 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3583 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d", 
func_cou¡
, "Abort", "Abort",

3585 (Ë
	`°æí
(
fûe
), fûe, 
löe
);

3586 
	`£t_comm⁄_¨gs
 (
ABORT
);

3588 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3589 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Abort\n");

3592 #ifde‡
DEBUG_PROF_MEM


3593 
	`memcheck
();

3595  
	`PMPI_Ab‹t
 (
comm
, 
îr‹code
);

3596 
	}
}

3598 
DLLAPI
 
MPIAPI
 
	$ISP_FöÆize
 (c⁄° *
fûe
, 
löe
) {

3599 
sbuff
[
BUFFER_SIZE
];

3600 
ªtvÆ
;

3603 
	`DebugPröt
("Entering MPI_Finalize...\n");

3606 i‡(! 
is_öôülized
) {

3607  
	`PMPI_FöÆize
();

3612 
ªtvÆ
 = 
	`HashM≠M©ch_SídLóks
 (&
mm≠
, &
SídnRecv
);

3614 i‡(
ªtvÆ
 < 0) {

3615  
ªtvÆ
;

3617 
func_cou¡
 -
ªtvÆ
;

3620 
	`mem£t
 (
sbuff
, '\0', 
BUFFER_SIZE
);

3625 
	`•rötf
 (
sbuff
, "%d %†%†%d %u %†%d", 
func_cou¡
, "Finalize", "Finalize",

3627 (Ë
	`°æí
(
fûe
), fûe, 
löe
);

3628 
	`£t_comm⁄_¨gs
 (
FINALIZE
);

3630 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3631 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Finalize\n");

3634 
	`Disc⁄√˘
 (
fd
);

3635 
fd
 = 
INVALID_SOCKET
;

3637 
	`HashM≠_De°roy
(&
rm≠
);

3638 
	`HashM≠Comm_De°roy
(&
cm≠
);

3640 #ifde‡
DEBUG_PROF_MEM


3641 
i
=0; i<
MAX_MPI_CALLS
; i++) {

3642 if(
¨g¨øy
[
i
].
buf„r
) {

3643 if(
mem
.
	`föd
(
¨g¨øy
[
i
].
buf„r
Ë!mem.
	`íd
()) {

3644 
	`‰ì
(
¨g¨øy
[
i
].
buf„r
);

3651 
	`‰ì
(
¨g¨øy
);

3652 
	`‰ì
(
≥rsi°ít_¨g¨øy
);

3654 #ifde‡
DEBUG_PROF_MEM


3655 
	`memcheck
();

3657  
	`PMPI_FöÆize
 ();

3658 
	}
}

3676 
MPIAPI
 
	$MPI_Pc⁄åﬁ
(c⁄° 
Àvñ
, ...) {

3678 
sbuff
[
BUFFER_SIZE
];

3679 *
öãæóvög_
;

3680 
va_li°
 
va
;

3681 
	`va_°¨t
(
va
, 
Àvñ
);

3682 
Àvñ
) {

3683 
ISP_INTERLEAVING
:

3684 
öãæóvög_
 = 
	`va_¨g
(
va
, *);

3685 *
öãæóvög_
 = 
öãæóvög
;

3687 
ISP_START_SAMPLING
:

3688 
ISP_END_SAMPLING
:

3691 
	`•rötf
 (
sbuff
, "%d %†%†%u %†%d %d", 
func_cou¡
, "Pcontrol", "Pcontrol",

3692 (Ë
	`°æí
("fûe"), "fûe", 101, 
Àvñ
);

3693 
	`£t_comm⁄_¨gs
 (
PCONTROL
);

3695 i‡(
	`SídnRecv
 (
sbuff
, 
	`°æí
 (sbuff)) < 0) {

3696 
	`¥ötf
 ("Client unableÅo SendnRecv in MPI_Pcontrol\n");

3701 
	`va_íd
(
va
);

3702  
MPI_SUCCESS
;

3703 
	}
}

	@profiler/Profiler.h

21 #i‚de‡
_PROFILER_H


22 
	#_PROFILER_H


	)

24 
	~"i•.h
"

27 #i‚de‡
MPIAPI


28 
	#MPIAPI


	)

31 #i‚de‡
bc›y


32 
	#bc›y
(
memSrc
, 
memD°
, 
memLí
Ë
	`mem˝y
((memD°), (memSrc), (memLí))

	)

35 #unde‡
MPI_Inô


36 
MPIAPI
 
	$MPI_Inô
 (*
¨gc
, ***
¨gv
) {

37  
	`ISP_Inô
 (
¨gc
, 
¨gv
, "Unknown", -1);

38 
	}
}

40 #unde‡
MPI_Síd


41 
MPIAPI
 
	$MPI_Síd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

42 
èg
, 
MPI_Comm
 
comm
) {

43  
	`ISP_Síd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, "Unknown", -1);

44 
	}
}

46 #unde‡
MPI_R£nd


47 
MPIAPI
 
	$MPI_R£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

48 
èg
, 
MPI_Comm
 
comm
) {

49  
	`ISP_R£nd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, "Unknown", -1);

50 
	}
}

52 #unde‡
MPI_I£nd


53 
MPIAPI
 
	$MPI_I£nd
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

54 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
) {

55  
	`ISP_I£nd
 (
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
, "Unknown", -1);

56 
	}
}

58 #unde‡
MPI_Síd_öô


59 
MPIAPI
 
	$MPI_Síd_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

60 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
) {

61  
	`ISP_Síd_öô
 (
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
, "Unknown", -1);

62 
	}
}

64 #unde‡
MPI_Iªcv


65 
MPIAPI
 
	$MPI_Iªcv
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

66 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
) {

67  
	`ISP_Iªcv
 (
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
, "Unknown", -1);

68 
	}
}

70 #unde‡
MPI_Recv


71 
MPIAPI
 
	$MPI_Recv
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

72 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
) {

73  
	`ISP_Recv
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
, "Unknown", -1);

74 
	}
}

76 #unde‡
MPI_Recv_öô


77 
MPIAPI
 
	$MPI_Recv_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
§c
,

78 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
) {

79  
	`ISP_Recv_öô
 (
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
, "Unknown", -1);

80 
	}
}

82 #unde‡
MPI_Probe


83 
MPIAPI
 
	$MPI_Probe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
) {

84  
	`ISP_Probe
 (
sour˚
, 
èg
, 
comm
, 
°©us
, "Unknown", -1);

85 
	}
}

87 #unde‡
MPI_I¥obe


88 
MPIAPI
 
	$MPI_I¥obe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, *
Êag
, 
MPI_Sètus
 *
°©us
) {

89  
	`ISP_I¥obe
 (
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
, "Unknown", -1);

90 
	}
}

92 #unde‡
MPI_Waô


93 
MPIAPI
 
	$MPI_Waô
 (
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
) {

94  
	`ISP_Waô
 (
ªque°
, 
°©us
, "Unknown", -1);

95 
	}
}

97 #unde‡
MPI_Te°


98 
MPIAPI
 
	$MPI_Te°
 (
MPI_Reque°
 *
ªque°
, *
Êag
, 
MPI_Sètus
 *
°©us
) {

99  
	`ISP_Te°
 (
ªque°
, 
Êag
, 
°©us
, "Unknown", -1);

100 
	}
}

102 #unde‡
MPI_Reque°_‰ì


103 
MPIAPI
 
	$MPI_Reque°_‰ì
 (
MPI_Reque°
 *
ªque°
) {

104  
	`ISP_Reque°_‰ì
 (
ªque°
, "Unknown", -1);

105 
	}
}

107 #unde‡
MPI_B£nd


108 
MPIAPI
 
	$MPI_B£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

109 
èg
, 
MPI_Comm
 
comm
) {

110  
	`ISP_B£nd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, "Unknown", -1);

111 
	}
}

114 #unde‡
MPI_S£nd


115 
MPIAPI
 
	$MPI_S£nd
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

116 
èg
, 
MPI_Comm
 
comm
) {

117  
	`ISP_S£nd
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, "Unknown", -1);

118 
	}
}

120 #unde‡
MPI_Sídªcv


121 
MPIAPI
 
	$MPI_Sídªcv
 (* 
£ndbuf
, 
£ndcou¡
, 
MPI_D©©y≥
 
£ndty≥
,

122 
de°
, 
£ndèg
, * 
ªcvbuf
, 
ªcvcou¡
,

123 
MPI_D©©y≥
 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
MPI_Comm
 
comm
,

124 
MPI_Sètus
 *
°©us
) {

125  
	`ISP_Sídªcv
 (
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
ªcvbuf
,

126 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
, "Unknown", -1);

127 
	}
}

129 #unde‡
MPI_Sèπ


130 
MPIAPI
 
	$MPI_Sèπ
 (
MPI_Reque°
 *
ªque°
) {

131  
	`ISP_Sèπ
 (
ªque°
, "Unknown", -1);

132 
	}
}

134 #unde‡
MPI_SèπÆl


135 
MPIAPI
 
	$MPI_SèπÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
) {

136  
	`ISP_SèπÆl
 (
cou¡
, 
¨øy_of_ªque°s
, "Unknown", -1);

137 
	}
}

139 #unde‡
MPI_B¨rõr


140 
MPIAPI
 
	$MPI_B¨rõr
 (
MPI_Comm
 
comm
) {

141  
	`ISP_B¨rõr
 (
comm
, "Unknown", -1);

142 
	}
}

144 #unde‡
MPI_Comm_¸óã


145 
MPIAPI
 
	$MPI_Comm_¸óã
 ( 
MPI_Comm
 
comm
, 
MPI_Group
 
group
, MPI_Comm *
comm_out
 ) {

146  
	`ISP_Comm_¸óã
 (
comm
, 
group
, 
comm_out
, "Unknown", -1);

147 
	}
}

148 #unde‡
MPI_C¨t_¸óã


149 
MPIAPI
 
	$MPI_C¨t_¸óã
 (
MPI_Comm
 
comm_ﬁd
, 
ndims
, *
dims
, *
≥riods
,

150 
ª‹dî
, 
MPI_Comm
 *
comm_ˇπ
) {

151  
	`ISP_C¨t_¸óã
(
comm_ﬁd
, 
ndims
, 
dims
, 
≥riods
, 
ª‹dî
, 
comm_ˇπ
, "Unknown",-1);

152 
	}
}

154 #unde‡
MPI_Comm_dup


155 
MPIAPI
 
	$MPI_Comm_dup
 ( 
MPI_Comm
 
comm
, MPI_Comm *
comm_out
 ) {

156  
	`ISP_Comm_dup
 (
comm
, 
comm_out
, "Unknown", -1);

157 
	}
}

159 #unde‡
MPI_Comm_•lô


160 
MPIAPI
 
	$MPI_Comm_•lô
 ( 
MPI_Comm
 
comm
, 
cﬁ‹
, 
key
, MPI_Comm *
comm_out
 ) {

161  
	`ISP_Comm_•lô
 (
comm
, 
cﬁ‹
, 
key
, 
comm_out
, "Unknown", -1);

162 
	}
}

164 #unde‡
MPI_Comm_‰ì


165 
MPIAPI
 
	$MPI_Comm_‰ì
 ( 
MPI_Comm
 *
comm
) {

166  
	`ISP_Comm_‰ì
 (
comm
, "Unknown", -1);

167 
	}
}

169 #unde‡
MPI_Ty≥_commô


170 
MPIAPI
 
	$MPI_Ty≥_commô
 ( 
MPI_D©©y≥
 *
d©©y≥
 ) {

171  
	`ISP_Ty≥_commô
 (
d©©y≥
, "Unknown", -1);

172 
	}
}

174 #unde‡
MPI_Ty≥_‰ì


175 
MPIAPI
 
	$MPI_Ty≥_‰ì
 ( 
MPI_D©©y≥
 *
d©©y≥
 ) {

176  
	`ISP_Ty≥_‰ì
 (
d©©y≥
, "Unknown", -1);

177 
	}
}

179 #unde‡
MPI_Bˇ°


180 
MPIAPI
 
	$MPI_Bˇ°
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
roŸ
,

181 
MPI_Comm
 
comm
) {

182  
	`ISP_Bˇ°
 (
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
, "Unknown", -1);

183 
	}
}

185 #unde‡
MPI_Sˇâî


186 
MPIAPI
 
	$MPI_Sˇâî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

187 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

188 
roŸ
, 
MPI_Comm
 
comm
) {

189  
	`ISP_Sˇâî
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
,

190 
roŸ
, 
comm
, "Unknown", -1);

191 
	}
}

193 #unde‡
MPI_Sˇâîv


194 
MPIAPI
 
	$MPI_Sˇâîv
 (*
£ndbuf
, *
£nd˙t
, *
di•ls
, 
MPI_D©©y≥
 
£ndty≥
,

195 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

196 
roŸ
, 
MPI_Comm
 
comm
) {

197  
	`ISP_Sˇâîv
 (
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

198 
ªcvty≥
, 
roŸ
, 
comm
, "Unknown", -1);

199 
	}
}

201 #unde‡
MPI_G©hîv


202 
MPIAPI
 
	$MPI_G©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

203 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

204 
roŸ
, 
MPI_Comm
 
comm
) {

205  
	`ISP_G©hîv
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
,

206 
roŸ
, 
comm
, "Unknown", -1);

207 
	}
}

209 #unde‡
MPI_G©hî


210 
MPIAPI
 
	$MPI_G©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

211 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

212 
roŸ
, 
MPI_Comm
 
comm
) {

213  
	`ISP_G©hî
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
,

214 
roŸ
, 
comm
, "Unknown", -1);

215 
	}
}

217 #unde‡
MPI_AŒg©hî


218 
MPIAPI
 
	$MPI_AŒg©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

219 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

220 
MPI_Comm
 
comm
) {

221  
	`ISP_AŒg©hî
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
,

222 
ªcvty≥
, 
comm
, "Unknown", -1);

223 
	}
}

225 #unde‡
MPI_AŒg©hîv


226 
MPIAPI
 
	$MPI_AŒg©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

227 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
,

228 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
) {

229  
	`ISP_AŒg©hîv
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
,

230 
ªcvty≥
, 
comm
, "Unknown", -1);

231 
	}
}

233 #unde‡
MPI_AŒtﬂŒ


234 
MPIAPI
 
	$MPI_AŒtﬂŒ
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

235 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

236 
MPI_Comm
 
comm
) {

237  
	`ISP_AŒtﬂŒ
 (
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
,

238 
comm
, "Unknown", -1);

239 
	}
}

241 #unde‡
MPI_AŒtﬂŒv


242 
MPIAPI
 
	$MPI_AŒtﬂŒv
 (*
£ndbuf
, *
£nd˙t
, *
sdi•ls
, 
MPI_D©©y≥
 
£ndty≥
,

243 *
ªcvbuf
, *
ªcvcou¡
, *
rdi•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

244 
MPI_Comm
 
comm
) {

245  
	`ISP_AŒtﬂŒv
 (
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
rdi•ls
,

246 
ªcvty≥
, 
comm
, "Unknown", -1);

247 
	}
}

249 #unde‡
MPI_Sˇn


250 
MPIAPI
 
	$MPI_Sˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

251 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
) {

252  
	`ISP_Sˇn
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
, "Unknown", -1);

253 
	}
}

256 #unde‡
MPI_Exsˇn


257 
MPIAPI
 
	$MPI_Exsˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

258 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
) {

259  
	`ISP_Exsˇn
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
, "Unknown", -1);

260 
	}
}

263 #unde‡
MPI_Redu˚


264 
MPIAPI
 
	$MPI_Redu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

265 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
roŸ
, 
MPI_Comm
 
comm
) {

266  
	`ISP_Redu˚
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
, "Unknown", -1);

267 
	}
}

269 #unde‡
MPI_Redu˚_sˇâî


270 
MPIAPI
 
	$MPI_Redu˚_sˇâî
 (*
£ndbuff
, *
ªcvbuff
, *
ªcv˙t
,

271 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
) {

272  
	`ISP_Redu˚_sˇâî
 (
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
, "Unknown", -1);

273 
	}
}

275 #unde‡
MPI_AŒªdu˚


276 
MPIAPI
 
	$MPI_AŒªdu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

277 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
) {

278  
	`ISP_AŒªdu˚
 (
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
, "Unknown", -1);

279 
	}
}

281 #unde‡
MPI_WaôÆl


282 
MPIAPI
 
	$MPI_WaôÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

283 
MPI_Sètus
 *
¨øy_of_°©u£s
) {

284  
	`ISP_WaôÆl
 (
cou¡
, 
¨øy_of_ªque°s
, 
¨øy_of_°©u£s
, "Unknown", -1);

285 
	}
}

287 #unde‡
MPI_Waô™y


288 
MPIAPI
 
	$MPI_Waô™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

289 *
ödex
, 
MPI_Sètus
 *
°©us
) {

290  
	`ISP_Waô™y
 (
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
°©us
, "Unknown", -1);

291 
	}
}

293 #unde‡
MPI_Waôsome


294 
MPIAPI
 
	$MPI_Waôsome
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

295 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
) {

296  
	`ISP_Waôsome
 (
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
,

297 
¨øy_of_°©u£s
, "Unknown", -1);

298 
	}
}

300 #unde‡
MPI_Te°™y


301 
MPIAPI
 
	$MPI_Te°™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

302 *
ödex
, *
Êag
, 
MPI_Sètus
 *
¨øy_of_°©u£s
) {

303  
	`ISP_Te°™y
 (
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
,

304 
¨øy_of_°©u£s
, "Unknown", -1);

305 
	}
}

307 #unde‡
MPI_Te°some


308 
MPIAPI
 
	$MPI_Te°some
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

309 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
) {

310  
	`ISP_Te°some
 (
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
,

311 
¨øy_of_°©u£s
, "Unknown", -1);

312 
	}
}

314 #unde‡
MPI_Te°Æl


315 
MPIAPI
 
	$MPI_Te°Æl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
Êag
,

316 
MPI_Sètus
 *
¨øy_of_°©u£s
) {

317  
	`ISP_Te°Æl
 (
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
, "Unknown", -1);

318 
	}
}

320 #unde‡
MPI_Ab‹t


321 
MPIAPI
 
	$MPI_Ab‹t
 (
MPI_Comm
 
comm
, 
îr‹code
) {

322  
	`ISP_Ab‹t
 (
comm
, 
îr‹code
, "Unknown", -1);

323 
	}
}

325 #unde‡
MPI_FöÆize


326 
MPIAPI
 
	$MPI_FöÆize
 () {

327  
	`ISP_FöÆize
 ("Unknown", -1);

328 
	}
}

	@profiler/isp.h

21 #i‚de‡
_ISP_H


22 
	#_ISP_H


	)

24 
	~<mpi.h
>

26 
	#ISP_INTERLEAVING
 1

	)

28 
	#ISP_START_SAMPLING
 2

	)

29 
	#ISP_END_SAMPLING
 3

	)

35 #i‚de‡
MPIAPI


36 
	#MPIAPI


	)

39 #i‡
deföed
 (
_USRDLL
Ë&& deföed (
WIN32
)

40 
	#DLLAPI
 
	`_de˛•ec
(
dŒexp‹t
)

	)

42 
	#DLLAPI


	)

45 #ifde‡
__˝lu•lus


53 
ISP_As£π
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

54 
ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

55 
ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

57 
	#MPI_Inô
(
¨gc
, 
¨gv
Ë
	`ISP_Inô
◊rgc,árgv, 
__FILE__
, 
__LINE__
)

	)

58 
DLLAPI
 
MPIAPI
 
ISP_Inô
 (*
¨gc
, ***
¨gv
, c⁄° *
fûe
, 
löe
);

60 
	#MPI_Síd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_Síd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

61 
DLLAPI
 
MPIAPI
 
ISP_Síd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

62 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

64 
	#MPI_R£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_R£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

65 
DLLAPI
 
MPIAPI
 
ISP_R£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

66 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

68 
	#MPI_I£nd
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_I£nd
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

69 
DLLAPI
 
MPIAPI
 
ISP_I£nd
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

70 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

72 
	#MPI_Síd_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Síd_öô
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

73 
DLLAPI
 
MPIAPI
 
ISP_Síd_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

74 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

76 
	#MPI_Iªcv
(
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Iªcv
(buf, cou¡, d©©y≥, sour˚,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

77 
DLLAPI
 
MPIAPI
 
ISP_Iªcv
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

78 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

80 
	#MPI_Recv
(
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Recv
(buf„r, cou¡, d©©y≥, sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

81 
DLLAPI
 
MPIAPI
 
ISP_Recv
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

82 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

84 
	#MPI_Recv_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Recv_öô
(buf, cou¡, d©©y≥, src,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

85 
DLLAPI
 
MPIAPI
 
ISP_Recv_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
§c
,

86 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

88 
	#MPI_Probe
(
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Probe
 (sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

89 
DLLAPI
 
MPIAPI
 
ISP_Probe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
,

90 c⁄° * 
fûe
, 
löe
);

92 
	#MPI_I¥obe
(
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
Ë
	`ISP_I¥obe
 (sour˚,Åag, comm, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

93 
DLLAPI
 
MPIAPI
 
ISP_I¥obe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, *
Êag
,

94 
MPI_Sètus
 *
°©us
, c⁄° * 
fûe
, 
löe
);

96 
	#MPI_Waô
(
ªque°
, 
°©us
Ë
	`ISP_Waô
‘eque°, sètus, 
__FILE__
, 
__LINE__
)

	)

97 
DLLAPI
 
MPIAPI
 
ISP_Waô
 (
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
,

98 
löe
);

100 
	#MPI_Te°
(
ªque°
, 
Êag
, 
°©us
Ë
	`ISP_Te°
‘eque°, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

101 
DLLAPI
 
MPIAPI
 
ISP_Te°
 (
MPI_Reque°
 *
ªque°
, *
Êag
, 
MPI_Sètus
 *
°©us
,

102 c⁄° *
fûe
, 
löe
);

106 
	#MPI_B£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_B£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

107 
DLLAPI
 
MPIAPI
 
ISP_B£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

108 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

112 
	#MPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_S£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

113 
DLLAPI
 
MPIAPI
 
ISP_S£nd
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

114 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

116 
	#MPI_Sídªcv
(
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
Ë
	`ISP_Sídªcv
(£ndbuf, sídcou¡, sídty≥, de°, sídèg,Ñecvbuf,Ñecvcou¡,Ñecvty≥, sour˚,Ñecvèg, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

117 
DLLAPI
 
MPIAPI
 
ISP_Sídªcv
 (* 
£ndbuf
, 
£ndcou¡
, 
MPI_D©©y≥
 
£ndty≥
,

118 
de°
, 
£ndèg
, * 
ªcvbuf
, 
ªcvcou¡
,

119 
MPI_D©©y≥
 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
MPI_Comm
 
comm
,

120 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

122 
	#MPI_Sèπ
(
ªque°
Ë
	`ISP_Sèπ
‘eque°, 
__FILE__
, 
__LINE__
)

	)

123 
DLLAPI
 
MPIAPI
 
ISP_Sèπ
(
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

125 
	#MPI_SèπÆl
(
cou¡
, 
ªque°
Ë
	`ISP_SèπÆl
(cou¡,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

126 
DLLAPI
 
MPIAPI
 
ISP_SèπÆl
(
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, c⁄° *
fûe
, 
löe
);

128 
	#MPI_B¨rõr
(
comm
Ë
	`ISP_B¨rõr
(comm, 
__FILE__
, 
__LINE__
)

	)

129 
DLLAPI
 
MPIAPI
 
ISP_B¨rõr
 (
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

131 
	#MPI_C¨t_¸óã
(
comm_ﬁd
,
ndims
,
dims
,
≥riods
,
ª‹dî
,
comm_ˇπ
Ë
	`ISP_C¨t_¸óã
(comm_ﬁd,ndims,dims,≥riods,ª‹dî,comm_ˇπ,
__FILE__
,
__LINE__
)

	)

132 
DLLAPI
 
MPIAPI
 
ISP_C¨t_¸óã
 (
MPI_Comm
 
comm_ﬁd
, 
ndims
, *
dims
, *
≥riods
, 
ª‹dî
, MPI_Comm *
comm_ˇπ
, c⁄° *
fûe
, 
löe
);

134 
	#MPI_Comm_¸óã
(
comm
, 
group
, 
comm_out
Ë
	`ISP_Comm_¸óã
(comm, group, comm_out, 
__FILE__
, 
__LINE__
)

	)

135 
DLLAPI
 
MPIAPI
 
ISP_Comm_¸óã
 (
MPI_Comm
 
comm
, 
MPI_Group
 
group
, MPI_Comm *
comm_out
,

136 c⁄° *
fûe
, 
löe
);

138 
	#MPI_Comm_dup
(
comm
, 
comm_out
Ë
	`ISP_Comm_dup
(comm, comm_out, 
__FILE__
, 
__LINE__
)

	)

139 
DLLAPI
 
MPIAPI
 
ISP_Comm_dup
 (
MPI_Comm
 
comm
, MPI_Comm *
comm_out
, c⁄° *
fûe
, 
löe
);

141 
	#MPI_Comm_•lô
(
comm
, 
cﬁ‹
, 
key
, 
comm_out
Ë
	`ISP_Comm_•lô
(comm, cﬁ‹, key, comm_out, 
__FILE__
, 
__LINE__
)

	)

142 
DLLAPI
 
MPIAPI
 
ISP_Comm_•lô
 (
MPI_Comm
 
comm
, 
cﬁ‹
, 
key
, MPI_Comm *
comm_out
,

143 c⁄° *
fûe
, 
löe
);

145 
	#MPI_Comm_‰ì
(
comm
Ë
	`ISP_Comm_‰ì
(comm, 
__FILE__
, 
__LINE__
)

	)

146 
DLLAPI
 
MPIAPI
 
ISP_Comm_‰ì
 (
MPI_Comm
 *
comm
, c⁄° *
fûe
, 
löe
);

148 
	#MPI_Ty≥_commô
(
d©©y≥
Ë
	`ISP_Ty≥_commô
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

149 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_commô
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

151 
	#MPI_Ty≥_‰ì
(
d©©y≥
Ë
	`ISP_Ty≥_‰ì
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

152 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_‰ì
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

154 
	#MPI_Bˇ°
(
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
Ë
	`ISP_Bˇ°
(buf„r, cou¡, d©©y≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

155 
DLLAPI
 
MPIAPI
 
ISP_Bˇ°
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
roŸ
,

156 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

158 
	#MPI_Sˇâî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

159 
DLLAPI
 
MPIAPI
 
ISP_Sˇâî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

160 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

161 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

163 
	#MPI_Sˇâîv
(
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâîv
(£ndbuf, síd˙t, di•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

164 
DLLAPI
 
MPIAPI
 
ISP_Sˇâîv
 (*
£ndbuf
, *
£nd˙t
, *
di•ls
, 
MPI_D©©y≥
 
£ndty≥
,

165 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
, 
MPI_Comm
 
comm
,

166 c⁄° *
fûe
, 
löe
);

168 
	#MPI_G©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

169 
DLLAPI
 
MPIAPI
 
ISP_G©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

170 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

171 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

173 
	#MPI_G©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

174 
DLLAPI
 
MPIAPI
 
ISP_G©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

175 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
,

176 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

178 
	#MPI_AŒg©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

179 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

180 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

181 c⁄° *
fûe
, 
löe
);

183 
	#MPI_AŒg©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

184 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

185 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

186 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

188 
	#MPI_AŒtﬂŒ
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒ
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

189 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒ
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

190 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

191 c⁄° *
fûe
, 
löe
);

193 
	#MPI_AŒtﬂŒv
(
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
rdi•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒv
(£ndbuf, síd˙t, sdi•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñdi•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

194 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒv
 (*
£ndbuf
, *
£nd˙t
, *
sdi•ls
, 
MPI_D©©y≥
 
£ndty≥
,

195 *
ªcvbuf
, *
ªcvcou¡
, *
rdi•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

196 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

198 
	#MPI_Sˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

199 
DLLAPI
 
MPIAPI
 
ISP_Sˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

200 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

203 
	#MPI_Exsˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

204 
DLLAPI
 
MPIAPI
 
ISP_Exsˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

205 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

208 
	#MPI_Redu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
Ë
	`ISP_Redu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

209 
DLLAPI
 
MPIAPI
 
ISP_Redu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

210 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
roŸ
, 
MPI_Comm
 
comm
,

211 c⁄° *
fûe
, 
löe
);

213 
	#MPI_Redu˚_sˇâî
(
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Redu˚_sˇâî
(£ndbuff,Ñecvbuff,Ñecv˙t, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

214 
DLLAPI
 
MPIAPI
 
ISP_Redu˚_sˇâî
 (*
£ndbuff
, *
ªcvbuff
, *
ªcv˙t
,

215 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

217 
	#MPI_AŒªdu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_AŒªdu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

218 
DLLAPI
 
MPIAPI
 
ISP_AŒªdu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

219 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

221 
	#MPI_WaôÆl
(
cou¡
, 
¨øy_of_ªque°s
, 
¨øy_of_°©u£s
Ë
	`ISP_WaôÆl
(cou¡,áºay_of_ªque°s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

222 
DLLAPI
 
MPIAPI
 
ISP_WaôÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

223 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

225 
	#MPI_Waô™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
°©us
Ë
	`ISP_Waô™y
(cou¡,áºay_of_ªque°s, index, sètus, 
__FILE__
, 
__LINE__
)

	)

226 
DLLAPI
 
MPIAPI
 
ISP_Waô™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

227 *
ödex
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

229 
	#MPI_Waôsome
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Waôsome
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

230 
DLLAPI
 
MPIAPI
 
ISP_Waôsome
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

231 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
,

232 c⁄° *
fûe
, 
löe
);

234 
	#MPI_Te°™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°™y
(cou¡,áºay_of_ªque°s, index, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

235 
DLLAPI
 
MPIAPI
 
ISP_Te°™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
ödex
,

236 *
Êag
, 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

238 
	#MPI_Te°some
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°some
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

239 
DLLAPI
 
MPIAPI
 
ISP_Te°some
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

240 *
outcou¡
, *
¨øy_of_ödi˚s
,
MPI_Sètus
 *
¨øy_of_°©u£s
,

241 c⁄° *
fûe
, 
löe
);

243 
	#MPI_Te°Æl
(
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°Æl
(cou¡,áºay_of_ªque°s, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

244 
DLLAPI
 
MPIAPI
 
ISP_Te°Æl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
Êag
,

245 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

247 
	#MPI_Reque°_‰ì
(
ªque°
Ë
	`ISP_Reque°_‰ì
‘eque°, 
__FILE__
, 
__LINE__
)

	)

248 
DLLAPI
 
MPIAPI
 
ISP_Reque°_‰ì
 (
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

250 
	#MPI_Ab‹t
(
comm
, 
îr‹code
Ë
	`ISP_Ab‹t
(comm,Éº‹code, 
__FILE__
, 
__LINE__
)

	)

251 
DLLAPI
 
MPIAPI
 
ISP_Ab‹t
 (
MPI_Comm
 
comm
, 
îr‹code
, c⁄° *
fûe
, 
löe
);

253 
	#MPI_FöÆize
(Ë
	`ISP_FöÆize
(
__FILE__
, 
__LINE__
)

	)

254 
DLLAPI
 
MPIAPI
 
ISP_FöÆize
 (c⁄° *
fûe
, 
löe
);

256 #ifde‡
__˝lu•lus


	@profiler/mem.cpp

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<°dio.h
>

6 #ifde‡
DEBUG_MEM


7 #ifde‡
__˝lu•lus


10 *
mÆloc2
(
size_t
 
size
, 
löe
, c⁄° *
fûe
) {

11 *
ªsu…
 = 
mÆloc
(
size
);

12 
¥ötf
("MÆloc: %p, Löe: %d, Fûe: %s\n", 
ªsu…
, 
löe
, 
fûe
);

13  
ªsu…
;

15 *
°rdup2
(*
°r
, 
löe
, c⁄° *
fûe
) {

16 *
ªsu…
 = 
°rdup
(
°r
);

17 
¥ötf
("MÆloc: %p, Löe: %d, Fûe: %s\n", 
ªsu…
, 
löe
, 
fûe
);

18  
ªsu…
;

20 
‰ì2
(*
addªss
, 
löe
, c⁄° *
fûe
) {

21 
‰ì
(
addªss
);

22 
¥ötf
("Fªe: %p, Löe: %d, Fûe: %s\n", 
addªss
, 
löe
, 
fûe
);

24 #ifde‡
__˝lu•lus


28 #ñi‡
deföed
(
DEBUG_PROF_MEM
)

30 
	~<m≠
>

31 
	~<utûôy
>

33 
°d
::
m≠
<*, std::
∑ú
<,*> > 
mem
;

35 #ifde‡
__˝lu•lus


38 *
mÆloc2
(
size_t
 
size
, 
löe
, c⁄° *
fûe
) {

39 *
ªsu…
 = 
mÆloc
(
size
);

40 
mem
.
ö£π
(
°d
::
make_∑ú
(
ªsu…
, std::make_∑ú(
löe
,
fûe
)));

42  
ªsu…
;

44 *
°rdup2
(*
°r
, 
löe
, c⁄° *
fûe
) {

45 *
ªsu…
 = 
°rdup
(
°r
);

46 
mem
.
ö£π
(
°d
::
make_∑ú
(
ªsu…
, std::make_∑ú(
löe
,
fûe
)));

48  
ªsu…
;

50 
‰ì2
(*
addªss
, 
löe
, c⁄° *
fûe
) {

51 
‰ì
(
addªss
);

52 
mem
.
îa£
(
addªss
);

56 
memcheck
() {

57 
°d
::
m≠
<*, std::
∑ú
<, *> >::
ôî©‹
 
mi
 = 
mem
.
begö
();

58 
°d
::
m≠
<*, std::
∑ú
<, *> >::
ôî©‹
 
mõ
 = 
mem
.
íd
();

59 
Ârötf
(
°dîr
,"[memoryÜeaks begin]\n");

60 ; 
mi
!=
mõ
; mi++) {

61 
Ârötf
(
°dîr
,"%s:%d\t%x\n", 
mi
->
£c⁄d
.£c⁄d, mi->£c⁄d.
fú°
, mi->first);

63 
Ârötf
(
°dîr
,"[memoryÜeaksÉnd]\n");

65 #ifde‡
__˝lu•lus


	@profiler/mem.h

1 #i‡
deföed
(
DEBUG_MEM
Ë|| deföed(
DEBUG_PROF_MEM
)

2 #ifde‡
__˝lu•lus


5 *
mÆloc2
(
size_t
 
size
, 
löe
, c⁄° *
fûe
);

6 *
°rdup2
(*
°r
, 
löe
, c⁄° *
fûe
);

7 
‰ì2
(*
addªss
, 
löe
, c⁄° *
fûe
);

8 #ifde‡
__˝lu•lus


12 #ifde‡
DEBUG_PROF_MEM


13 
	~<m≠
>

14 
	~<utûôy
>

16 
°d
::
m≠
<*, std::
∑ú
<,*> > 
mem
;

18 #ifde‡
__˝lu•lus


21 
memcheck
();

22 #ifde‡
__˝lu•lus


27 
	#mÆloc
(
size
Ë
	`mÆloc2
(size, 
__LINE__
, 
__FILE__
)

	)

28 
	#°rdup
(
°r
Ë
	`°rdup2
(°r, 
__LINE__
, 
__FILE__
)

	)

29 
	#‰ì
(
addªss
Ë
	`‰ì2
◊ddªss, 
__LINE__
, 
__FILE__
)

	)

	@profiler/mpi_func_structs.h

21 #i‚de‡
_MPI_FUNC_STRUCTS_H


22 
	#_MPI_FUNC_STRUCTS_H


	)

23 
	~<mpi.h
>

26 
	mSEND
,

27 
	mSSEND
,

28 
	mRSEND
,

29 
	mSEND_INIT
,

30 
	mRECV
,

31 
	mRECV_INIT
,

32 
	mPROBE
,

33 
	mIPROBE
,

34 
	mSENDRECV
,

35 
	mSTART
,

36 
	mSTARTALL
,

37 
	mBARRIER
,

38 
	mBCAST
,

39 
	mSCATTER
,

40 
	mGATHER
,

41 
	mSCATTERV
,

42 
	mGATHERV
,

43 
	mREDUCE
,

44 
	mREDUCE_SCATTER
,

45 
	mISEND
,

46 
	mIRECV
,

47 
	mWAIT
,

48 
	mALLREDUCE
,

49 
	mALLGATHER
,

50 
	mALLGATHERV
,

51 
	mALLTOALL
,

52 
	mALLTOALLV
,

53 
	mSCAN
,

54 
	mTEST
,

55 
	mWAITALL
,

56 
	mTESTALL
,

57 
	mWAITANY
,

58 
	mTESTANY
,

59 
	mREQUEST_FREE
,

60 
	mCART_CREATE
,

61 
	mCOMM_CREATE
,

62 
	mCOMM_SPLIT
,

63 
	mCOMM_DUP
,

64 
	mCOMM_FREE
,

65 
	mABORT
,

66 
	mFINALIZE


68 , 
	mPCONTROL


70 } 
	tmpi_i•_func_t
;

76 
	s¨g_èg
 {

78 
mpi_i•_func_t
 
	mfunc
;

79 
	mfunc_cou¡
;

80 
	mis_com∂ëe
;

81 
	m≥rsi°ít_ödex
;

84 *
	mbuf„r
;

85 
	mcou¡
;

86 
MPI_D©©y≥
 
	md©©y≥
;

87 
	msour˚
;

88 
	mde°
;

89 
	mèg
;

90 
	mroŸ
;

91 * 
	mÊag
;

92 * 
	mödex
;

93 
MPI_Comm
 
	mcomm
;

94 
MPI_Reque°
* 
	mªque°
;

95 
MPI_Sètus
* 
	m°©us
;

96 
	mbuf„r_c›õd
;

97 
	md©©y≥_c›õd
;

100 
MPI_Group
 
	mgroup
;

101 
	mcﬁ‹
;

102 
	mkey
;

103 
	mndims
;

104 *
	mdims
;

105 *
	m≥riods
;

106 
	mª‹dî
;

107 
MPI_Comm
 *
	mcomm_out
;

108 } 
	t¨g_t
;

	@scheduler/Envelope.cpp

21 
	~"ScheduÀr.hµ
"

22 
	~"Envñ›e.hµ
"

23 
	~<s°ªam
>

24 
	~<io°ªam
>

28 
Envñ›e
 *
	$Cª©eEnvñ›e
 (*
buf„r
, 
id
, 
‹dî_id
, 
boﬁ
 
to_ex∂
) {

32 
pc⁄åﬁ_mode
;

36 
°d
::
°rög
 
°r
;

37 
°d
::
i°rög°ªam
 
iss
;

38 
Envñ›e
 *
ív
 = 
√w
 Envelope;

39 
ív
->
issue_id
 = -1;

42 
ív
->
ö_exÆl
 = 
to_ex∂
;

45 i‡((
°d
::
	`°rög
 (
buf„r
)).
	`em±y
 ()) {

46 i‡(!
ScheduÀr
::
_quõt
) {

47 
°d
::
cout
 << "EMPTY BUFFER " << "id i†" << 
id
 << " !!!!!!!\n";

49 
dñëe
 
ív
;

50  
NULL
;

52 
iss
.
	`°r
 (
°d
::
	`°rög
 (
buf„r
));

54 
iss
 >> 
ív
->
ödex
;

57 
iss
 >> 
°r
;

58 
ív
->
func
 = 
°r
;

59 
ív
->
func_id
 = 
«me2id
::
	`gëId
 (
°r
);

60 
ív
->
id
 = id;

61 
ív
->
‹dî_id
 = order_id;

62 
ív
->
comm
 = -2;

65 
iss
 >> 
ív
->
di•œy_«me
;

70 if(
ív
->
func_id
 !
LEAK
 &&Énv->func_id !
PCONTROL
){

72 
iss
 >> 
ív
->
d©a_ty≥
;

73 
ív
->
ty≥sM©ch
 = 
åue
;

79 
fûíame_Àngth
;

80 
iss
 >> 
fûíame_Àngth
;

81 
iss
.
	`ign‹e
 ();

82 *
fûíame
 = 
√w
 [
fûíame_Àngth
 + 1];

83 
iss
.
	`gë
 (
fûíame
, 
fûíame_Àngth
 + 1);

84 
ív
->
fûíame
.
	`ö£π
(0, filename);

85 
dñëe
 [] 
fûíame
;

86 
iss
 >> 
ív
->
löíumbî
;

91 
ív
->
func_id
) {

93 
ASSERT
: {

95 
as£πi⁄_Àngth
;

96 
iss
 >> 
as£πi⁄_Àngth
;

97 
iss
.
	`ign‹e
 ();

98 *
as£πi⁄
 = 
√w
 [
as£πi⁄_Àngth
 + 1];

99 
iss
.
	`gë
 (
as£πi⁄
, 
as£πi⁄_Àngth
 + 1);

100 
ív
->
di•œy_«me
.
	`˛ór
 ();

101 
ív
->
di•œy_«me
.
	`ö£π
 (0, 
as£πi⁄
);

102 
dñëe
 
as£πi⁄
;

103 
iss
 >> 
ív
->
func
;

107 
ISEND
: {

108 
°d
::
°rög
 
de°
;

109 
iss
 >> 
de°
 >> 
ív
->
°ag
 >>Énv->
cou¡
 >>Énv->
comm
;

110 i‡(
de°
 == "MPI_ANY_SOURCE") {

111 
ív
->
de°
 = 
WILDCARD
;

112 
ív
->
de°_wûdˇrd
 = 
åue
;

114 
ív
->
de°
 = 
	`©oi
 (de°.
	`c_°r
 ());

115 
ív
->
de°_wûdˇrd
 = 
Ál£
;

119 
SSEND
:

120 
RSEND
:

121 
SEND
: {

122 
°d
::
°rög
 
de°
;

123 
iss
 >> 
de°
 >> 
ív
->
°ag
 >>Énv->
comm
;

124 i‡(
de°
 == "MPI_ANY_SOURCE") {

125 
ív
->
de°
 = 
WILDCARD
;

126 
ív
->
de°_wûdˇrd
 = 
åue
;

128 
ív
->
de°
 = 
	`©oi
 (de°.
	`c_°r
 ());

129 
ív
->
de°_wûdˇrd
 = 
Ál£
;

134 
IRECV
: {

135 
°d
::
°rög
 
§c
;

136 
iss
 >> 
§c
 >> 
ív
->
πag
 >>Énv->
cou¡
 >>Énv->
comm
;

137 i‡(
§c
 == "MPI_ANY_SOURCE") {

138 
ív
->
§c
 = 
WILDCARD
;

139 
ív
->
§c_wûdˇrd
 = 
åue
;

141 
ív
->
§c
 = 
	`©oi
 (§c.
	`c_°r
 ());

142 
ív
->
§c_wûdˇrd
 = 
Ál£
;

144 i‡(
ív
->
πag
 < 0)

145 
ív
->
πag
 = 
WILDCARD
;

148 
IPROBE
:

149 
PROBE
:

150 
RECV
: {

151 
°d
::
°rög
 
§c
;

152 
iss
 >> 
§c
 >> 
ív
->
πag
 >>Énv->
comm
;

153 i‡(
§c
 == "MPI_ANY_SOURCE") {

154 
ív
->
§c
 = 
WILDCARD
;

155 
ív
->
§c_wûdˇrd
 = 
åue
;

157 
ív
->
§c
 = 
	`©oi
 (§c.
	`c_°r
 ());

158 
ív
->
§c_wûdˇrd
 = 
Ál£
;

160 i‡(
ív
->
πag
 < 0)

161 
ív
->
πag
 = 
WILDCARD
;

165 
SENDRECV
:

166 
iss
 >> 
ív
->
de°
 >>Énv->
°ag
 >>Énv->
§c
 >>

167 
ív
->
πag
 >>Énv->
comm
;

168 i‡(
ív
->
πag
 < 0Ëív->πag = 
WILDCARD
;

171 
BCAST
:

172 
SCATTER
:

173 
GATHER
:

174 
SCATTERV
:

175 
GATHERV
:

176 
REDUCE
: {

177 
iss
 >> 
ív
->
≈rocs
;

178 
iss
 >> 
ív
->
cou¡
;

179 i‡(
iss
.
	`Áû
 ()) {

180 
ív
->
cou¡
 = -1;

182 
iss
 >> 
ív
->
comm
;

186 
ALLGATHER
:

187 
ALLGATHERV
:

188 
ALLTOALL
:

189 
ALLTOALLV
:

190 
SCAN
:

192 
EXSCAN
:

194 
BARRIER
:

195 
ALLREDUCE
:

196 
REDUCE_SCATTER
:

197 
CART_CREATE
:

198 
COMM_CREATE
:

199 
COMM_DUP
:

200 
COMM_FREE
:

201 
iss
 >> 
ív
->
≈rocs
 >>Énv->
cou¡
 >>Énv->
comm
;

204 
COMM_SPLIT
:

205 
iss
 >> 
ív
->
≈rocs
 >>Énv->
cou¡
 >>Énv->
comm_•lô_cﬁ‹
 >>Énv->
comm
;

208 
WAIT
:

209 
TEST
:

210 
iss
 >> 
ív
->
cou¡
;

211 
ív
->
ªq_¥ocs
.
	`push_back
 (ív->
cou¡
);

214 
WAITALL
:

215 
TESTALL
:

216 
WAITANY
:

217 
TESTANY
:

218 
iss
 >> 
ív
->
cou¡
;

219 
i
 = 0; i < 
ív
->
cou¡
 ; i++) {

220 
ªq
;

221 
iss
 >> 
ªq
;

222 
ív
->
ªq_¥ocs
.
	`push_back
 (
ªq
) ;

227 
PCONTROL
:

228 
iss
 >> 
pc⁄åﬁ_mode
;

229 
ív
->
°ag
 = 
pc⁄åﬁ_mode
;

233 
LEAK
:

234 
ABORT
:

235 
FINALIZE
:

238 i‡(
ScheduÀr
::
_ªp‹t_¥ogªss
 > 0 &&

239 
‹dî_id
 % 
ScheduÀr
::
_ªp‹t_¥ogªss
 == 0) {

242 
°d
::
cout
 << "Pro˚s£d: " << *
ív
 << std::
ídl
;

244  
ív
;

245 
	}
}

247 
	gEnvñ›e
::
	$Envñ›e
() {

250 
de°
 = 0;

251 
de°_wûdˇrd
 = 
Ál£
;

252 
§c
 = 0;

253 
§c_wûdˇrd
 = 
Ál£
;

254 
ªf
 = 1;

255 
	}
}

257 
	gEnvñ›e
::
	$Envñ›e
(c⁄° 
Envñ›e
 &
e
) {

258 
	`as£π
(0);

259 *
this
 = 
e
;

260 
	}
}

262 
boﬁ
 
	gEnvñ›e
::
›î©‹
=(
Envñ›e
 &
e
) {

263 i‡(
e
.
func
 != func) {

264  
Ál£
;

266 
	ge
.
	gfunc_id
) {

267 
	gASSERT
:

268  (
di•œy_«me
 =
e
.display_name);

270 
	gBARRIER
:

271 
BCAST
:

272 
SCATTER
:

273 
GATHER
:

274 
SCATTERV
:

275 
GATHERV
:

276 
ALLGATHER
:

277 
ALLGATHERV
:

278 
ALLTOALL
:

279 
ALLTOALLV
:

280 
SCAN
:

282 
EXSCAN
:

284 
ALLREDUCE
:

285 
REDUCE
:

286 
REDUCE_SCATTER
:

287 
CART_CREATE
:

288 
COMM_CREATE
:

289 
COMM_DUP
:

290 
COMM_SPLIT
:

291 
COMM_FREE
:

292 
WAIT
:

293 
TEST
:

294 
WAITANY
:

295 
TESTANY
:

296 
WAITALL
:

297 
TESTALL
:

298  (
cou¡
 =
e
.count);

300 
	gSEND
:

301 
SSEND
:

302 
ISEND
:

303 
RSEND
:

304  (
de°
==
e
.de° &&É.
°ag
 == stag);

306 
	gIRECV
:

307 
RECV
:

308 
PROBE
:

309 
IPROBE
:

310  (
e
.
§c
 =§¯&&É.
πag
 ==Ñtag);

312 
	gABORT
:

313 
FINALIZE
:

314  
åue
;

316 
	gLEAK
:

317  (
e
.
fûíame
 =fûíamê&&É.
löíumbî
 ==Üinenumber &&

318 
e
.
cou¡
 == count);

320 
	gPCONTROL
:

321  (
e
.
°ag
 == stag);

324  
	gÁl£
;

327 
boﬁ
 
	gEnvñ›e
::
›î©‹
!(
Envñ›e
 &
e
) {

328  !((*
this
Ë=
e
);

331 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gEnvñ›e
 &
	ge
) {

333 
	gos
 << "o=" << 
	ge
.
	g‹dî_id
 <<" i="<<É.
	gödex
 <<"Ñ™k="<<É.
	gid
 << " ";

334 i‡(
	ge
.
	gfunc_id
 !
ASSERT
) {

335 
os
 << 
e
.
di•œy_«me
;

337 
	gos
 << "assert";

339 i‡(
	ge
.
	glöíumbî
 >= 0) {

340 
os
 << " " << 
e
.
fûíame
 << ":" <<É.
löíumbî
;

348 
	ge
.
	gfunc_id
) {

350 
	gBARRIER
:

351 
BCAST
:

352 
ALLREDUCE
:

353 
REDUCE
:

354 
REDUCE_SCATTER
:

355 
SCATTER
:

356 
GATHER
:

357 
SCATTERV
:

358 
GATHERV
:

359 
ALLGATHER
:

360 
ALLGATHERV
:

361 
ALLTOALL
:

362 
ALLTOALLV
:

363 
SCAN
:

365 
EXSCAN
:

367 
CART_CREATE
:

368 
COMM_CREATE
:

369 
COMM_DUP
:

370 
COMM_SPLIT
:

371 
COMM_FREE
:

372 
os
 << " cou¡=" << 
e
.
cou¡
;

375 
	gSEND
:

376 
SSEND
:

377 
RSEND
:

378 
os
 << " de°=" << 
e
.
de°
 << " sèg=" <<É.
°ag
;

380 
	gISEND
:

381 
os
 << " de°=" << 
e
.
de°
 << " sèg=" <<É.
°ag
 << " count=" <<

382 
e
.
cou¡
;

385 
	gIRECV
:

386 
os
 << " src=" << 
e
.
§c
 << "Ñèg=" <<É.
πag
 << " count=" <<

387 
e
.
cou¡
;

389 
	gRECV
:

390 
PROBE
:

391 
IPROBE
:

392 
os
 << " src=" << 
e
.
§c
 << "Ñèg=" <<É.
πag
;

395 
	gWAIT
:

396 
TEST
:

397 
os
 << " cou¡=" << 
e
.
cou¡
;

399 
	gASSERT
:

400 
ABORT
:

401 
FINALIZE
:

404  
	gos
;

407 
	gEnvñ›e
::
	$PrötLog
 () {

409 
ScheduÀr
::
_logfûe
 << 
ödex
 << " " << 
‹dî_id
 << " " << 
issue_id
 << " ";

410 i‡(
func_id
 !
ASSERT
) {

411 
ScheduÀr
::
_logfûe
 << 
di•œy_«me
 << " ";

413 
ScheduÀr
::
_logfûe
 << "assert ";

416 
func_id
) {

418 
BARRIER
:

419 
BCAST
:

420 
ALLREDUCE
:

421 
REDUCE
:

422 
REDUCE_SCATTER
:

423 
SCATTER
:

424 
GATHER
:

425 
SCATTERV
:

426 
GATHERV
:

427 
ALLGATHER
:

428 
ALLGATHERV
:

429 
ALLTOALL
:

430 
ALLTOALLV
:

431 
SCAN
:

433 
EXSCAN
:

435 
CART_CREATE
:

436 
COMM_CREATE
:

437 
COMM_DUP
:

438 
COMM_SPLIT
:

439 
COMM_FREE
:

440 
ScheduÀr
::
_logfûe
 << 
comm
 << " ";

443 
SEND
:

444 
SSEND
:

445 
ISEND
:

446 
RSEND
:

447 
ScheduÀr
::
_logfûe
 << 
de°
 << " " << 
°ag
 << " " << 
comm
 << " ";

450 
IRECV
:

451 
RECV
:

452 
PROBE
:

453 
IPROBE
:

454 
ScheduÀr
::
_logfûe
 << 
§c
 << " " << 
πag
 << " " << 
comm
 << " ";

457 
WAIT
:

458 
TEST
:

460 
ASSERT
:

461 
ABORT
:

462 
FINALIZE
:

465 
	}
}

467 
	gEnvñ›e
::
	$ªf_öc
() {

468 
ªf
++;

470 
	}
}

472 
	gEnvñ›e
::
	$ªf_dec
() {

473 
	`DS
–
	`as£π
(
ªf
>1); )

474 
ªf
--;

476 
	}
}

478 
boﬁ
 
	gEnvñ›e
::
	$issh¨ed
() {

479 
	`DS
–
	`as£π
(
ªf
>0); )

480  
ªf
 != 1;

481 
	}
}

	@scheduler/Envelope.hpp

21 #i‚de‡
_ENVELOPE_HPP


22 
	#_ENVELOPE_HPP


	)

24 
	~"«me2id.hµ
"

25 
	~<io°ªam
>

26 
	~<ve˘‹
>

27 
	~<ˇs£π
>

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

31 
	#WILDCARD
 (-1)

	)

33 ˛as†
	cEnvñ›e
 {

34 
	mpublic
:

40 
id
;

41 
	m‹dî_id
;

42 
	missue_id
;

43 
	m°d
::
°rög
 
func
;

44 
	m°d
::
°rög
 
di•œy_«me
;

45 
	mfunc_id
;

46 
	mcou¡
;

47 
	mödex
;

48 
	mde°
;

49 
boﬁ
 
	mde°_wûdˇrd
;

50 
	m§c
;

51 
boﬁ
 
	m§c_wûdˇrd
;

52 
	m°ag
;

53 
	m°d
::
°rög
 
comm
;

54 
	md©a_ty≥
;

55 
boﬁ
 
	mty≥sM©ch
;

56 
	m°d
::
ve˘‹
<> 
comm_li°
;

57 
	m°d
::
ve˘‹
<> 
ªq_¥ocs
;

59 
	mπag
;

60 
	m≈rocs
;

61 
	mcomm_•lô_cﬁ‹
;

62 
	mcomm_id
;

63 
	m°d
::
°rög
 
fûíame
;

64 
	mlöíumbî
;

65 
	mªf
;

67 
boﬁ
 
	mö_exÆl
;

70 
ªf_öc
();

71 
ªf_dec
();

72 
boﬁ
 
issh¨ed
();

73 
ölöe
 
	$Issued
 () {

74 
issue_numbî
 = 0;

75 
issue_id
 = ++
issue_numbî
;

77 
	`PrötLog
();

79 
ölöe
 
boﬁ
 
	$isSídTy≥
 () {

80  (
func_id
 =
SSEND
 || func_id =
SEND
 ||

81 
func_id
 =
RSEND
 || func_id =
ISEND
);

82 
	}
}

84 
ölöe
 
boﬁ
 
	$isRecvTy≥
 () {

85  (
func_id
 =
IRECV
 || func_id =
RECV
 ||

86 
func_id
 =
PROBE
 || func_id =
IPROBE
);

87 
	}
}

89 
ölöe
 
boﬁ
 
	$isCﬁÀ˘iveTy≥
 () {

90  (
func_id
 =
BARRIER
 || func_id =
BCAST
 || func_id =
CART_CREATE


91 || 
func_id
 =
COMM_CREATE
 || func_id =
COMM_DUP


92 || 
func_id
 =
COMM_SPLIT
 || func_id =
COMM_FREE


93 || 
func_id
 =
ALLREDUCE
 || func_id =
REDUCE


94 || 
func_id
 =
GATHER
 || func_id =
SCATTER


95 || 
func_id
 =
GATHERV
 || func_id =
SCATTERV


96 || 
func_id
 =
ALLGATHER
 || func_id =
ALLGATHERV


97 || 
func_id
 =
ALLTOALL
 || func_id =
ALLTOALLV


98 || 
func_id
 =
SCAN
 || func_id =
REDUCE_SCATTER
);

99 
	}
}

101 
ölöe
 
boﬁ
 
	$isBlockögTy≥
 () {

102  (
func_id
 =
RECV
 || func_id =
SSEND


103 || 
func_id
 =
WAIT
 || func_id =
PROBE
 || func_id =
IPROBE


104 || 
func_id
 =
FINALIZE
 || func_id =
TEST


105 || 
func_id
 =
WAITANY
 || func_id =
TESTANY


106 || 
func_id
 =
WAITALL
 || func_id =
TESTALL
 || 
	`isCﬁÀ˘iveTy≥
());

107 
	}
}

109 
ölöe
 
boﬁ
 
	$isWaô‹Te°Ty≥
 () {

110  (
func_id
 =
WAIT
 || func_id =
TEST


111 || 
func_id
 =
WAITANY
 || func_id =
TESTANY


112 || 
func_id
 =
WAITALL
 || func_id =
TESTALL


114 
	}
}

117 
boﬁ
 
	g›î©‹
==(
Envñ›e
 &);

118 
boﬁ
 
	g›î©‹
!=(
Envñ›e
 &);

119 
‰õnd
 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gEnvñ›e
 &
	ge
);

120 
Envñ›e
();

121 
Envñ›e
(c⁄° Envñ›ê&
e
);

125 
Envñ›e
 *
Cª©eEnvñ›e
 (*
buf„r
, 
id
, 
‹dî_id
, 
boﬁ
 
to_ex∂
);

128 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam *
os
, 
	gEnvñ›e
 &
	ge
);

	@scheduler/InterleavingTree.cpp

21 
	~"I¡îÀavögTªe.hµ
"

22 
	~<s°ªam
>

23 
	~<m≠
>

24 
	~<queue
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<±hªad.h
>

29 #ifde‡
USE_OPENMP


30 
	~<omp.h
>

36 
	gNode
::
	$Node
 ():
	$has_chûd
 (
Ál£
) {

37 
	}
}

39 
Node
::
	$Node
 (
num_¥ocs
Ë: 
	`has_chûd
 (
Ál£
), 
	`_Àvñ
(0),

40 
	$_num_¥ocs
(
num_¥ocs
) {

43 
ty≥
 = 
GENERAL_NODE
;

44 #ifde‡
CONFIG_BOUNDED_MIXING


45 
ex∑nd
 = 
Ál£
;

47 
has_aux_c€«bÀd_£nds
 = 
Ál£
;

49 
i
 = 0; i< 
num_¥ocs
 ;i++) {

50 
_éi°
.
	`push_back
(
√w
 
	`Tønsôi⁄Li°
 (
i
));

52 
	}
}

54 
	gNode
::
	$Node
 (
Node
 &
n
) {

56 *
this
 = 
n
;

57 
	}
}

60 
	gNode
::
	$Node
 (
Node
 &
n
, 
boﬁ
 
c›yTL
) {

61 i‡(
c›yTL
) {

62 
éi°_dóŒoc
 = 
åue
;

63 
i
 = 0 ; i < 
_num_¥ocs
; i++) {

64 
Tønsôi⁄Li°
 *
é
 = 
√w
 
	`Tønsôi⁄Li°
 (*(
n
.
_éi°
[
i
]));

65 
_éi°
.
	`push_back
 (
é
);

68 
i
 = 0 ; i < 
_num_¥ocs
; i++) {

70 
_éi°
.
	`push_back
 (
n
._éi°[
i
]);

74 
_num_¥ocs
 = 
n
.
	`NumProcs
();

75 
ty≥
 = 
GENERAL_NODE
;

76 
_Àvñ
 = (
n
.
	`GëLevñ
())+1;

77 
ôªe
 = 
n
.itree;

78 
has_chûd
 = 
Ál£
;

80 *
this
 = 
n
;

81 
	}
}

83 
	gNode
::~
	$Node
() {

84 
i
;

89 
i
=0; i<
_num_¥ocs
; i++)

90 
dñëe
 
this
->
_éi°
[
i
];

92 
	}
}

95 
	gNode
 &Node::
›î©‹
(
Node
 &
n
) {

96 
_num_¥ocs
 = 
n
.
NumProcs
 ();

97 
	gi
 = 0 ; i < 
	g_num_¥ocs
; i++) {

98 
	g_éi°
.
push_back
(
√w
 
Tønsôi⁄Li°
(*
n
.
_éi°
[
i
]));

103 
	g_Àvñ
 = (
n
.
GëLevñ
())+1;

104 
	ghas_chûd
 = 
Ál£
;

105 
	gôªe
 = 
n
.
ôªe
;

106 #ifde‡
CONFIG_BOUNDED_MIXING


107 
	gex∑nd
 = 
Ál£
;

109  *
	gthis
;

112 
	gNode
::
	$dìpC›y
() {

113 
i
;

114 
°d
::
ve˘‹
 <
Tønsôi⁄Li°
*> 
éi°
;

115 
i
=0; i<
_num_¥ocs
; i++) {

116 
Tønsôi⁄Li°
 *
é
 = 
√w
 
	`Tønsôi⁄Li°
(*(
this
->
_éi°
[
i
]));

117 
éi°
.
	`push_back
(
é
);

119 
_éi°
 = 
éi°
;

120 
éi°_dóŒoc
 = 
åue
;

121 
	}
}

123 
	gNode
::
	$£tITªe
(
ITªe
* 
√w_ôªe
) {

124 
ôªe
 = 
√w_ôªe
;

125 
	}
}

127 
ITªe
* 
	gNode
::
	$gëITªe
() {

128  
ôªe
;

129 
	}
}

131 
	gNode
::
	$NumProcs
 () {

132  
_num_¥ocs
;

133 
	}
}

135 
	gNode
::
	$GëLevñ
 () {

136  
_Àvñ
;

137 
	}
}

139 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gNode
 &
	gn
) {

141 
	g°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî
;

142 
	g°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî_íd
 = 
n
.
_éi°
.
íd
();

144 
	gôî
 = 
n
.
_éi°
.
begö
 (); iã∏!
ôî_íd
; iter++) {

145 
	gos
 << "Tønsôi⁄Üi° f‹ " << (*
	gôî
)->
GëId
 (Ë<< 
	g°d
::
ídl
;

146 
	gos
 << (*(*
	gôî
));

147 i‡(
	gôî
 + 1 !
ôî_íd
) {

148 
os
 << 
°d
::
ídl
;

151  
	gos
;

154 
	gNode
::
	$PrötLog
 () {

155 
°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî
;

156 
°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî_íd
 = 
_éi°
.
	`íd
();

158 
ôî
 = 
_éi°
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

159 (*
ôî
)->
	`PrötLog
 ();

161 
	}
}

163 
	gNode
::
	$gëTŸÆMpiCÆls
() {

164 
sum
 = 0;

165 
°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî
;

166 
°d
::
ve˘‹
 <
Tønsôi⁄Li°
 *> ::
ôî©‹
 
ôî_íd
 = 
_éi°
.
	`íd
();

168 
ôî
=
_éi°
.
	`begö
(); iã∏!
ôî_íd
; iter++) {

169 
sum
 +(*
ôî
)->
_éi°
.
	`size
();

171  
sum
;

172 
	}
}

174 
boﬁ
 
	gNode
::
AŒAn˚°‹sM©ched
 (
CB
 &
c
, 
°d
::
ve˘‹
 <> &
l
) {

176 
boﬁ
 
is_waô_‹_ã°_ty≥
 = 
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
isWaô‹Te°Ty≥
();

178 
	g°d
::
ve˘‹
 <>::
ôî©‹
 
ôî
, 
	gôî2
, 
	gôî2_íd
;

179 
	g°d
::
ve˘‹
 <>::
ôî©‹
 
ôî_íd
 = 
l
.
íd
();

180 
	gôî
 = 
l
.
begö
 (); iã∏!
ôî_íd
; iter++) {

181 i‡(!
	gôªe
->
	gis_m©ched
[
c
.
_pid
][(*
ôî
)]) {

184 i‡(
	g_éi°
[
c
.
_pid
]->_éi°[(*
ôî
)].
GëEnvñ›e
 ()->
	gfunc_id
 =
PCONTROL
) ;

186 i‡(
	gis_waô_‹_ã°_ty≥
 && !
	gScheduÀr
::
_£nd_block
) {

187 i‡(
_éi°
[
c
.
_pid
]->_éi°[(*
ôî
)].
GëEnvñ›e
 ()->
func_id
 =
ISEND
) {

191  
	gÁl£
;

192 } i‡(
	g_éi°
[
c
.
_pid
]->_éi°[*
ôî
].
GëEnvñ›e
()->
	gfunc_id
 =
WAIT
 ||

193 
_éi°
[
c
.
_pid
]->_éi°[*
ôî
].
GëEnvñ›e
()->
func_id
 =
TEST
 ||

194 
_éi°
[
c
.
_pid
]->_éi°[*
ôî
].
GëEnvñ›e
()->
func_id
 =
WAITALL
 ||

195 
_éi°
[
c
.
_pid
]->_éi°[*
ôî
].
GëEnvñ›e
()->
func_id
 =
TESTALL
) {

197 
Tønsôi⁄
 
t
 = 
_éi°
[
c
.
_pid
]->_éi°[*
ôî
];

198 
	gôî2_íd
 = 
t
.
gë_™˚°‹s
().
íd
();

199 
	gôî2
 = 
t
.
gë_™˚°‹s
().
begö
 (); iãr2 !
ôî2_íd
; iter2++) {

200 
Envñ›e
* 
	gív_f
 = 
_éi°
[
c
.
_pid
]->_éi°[*
ôî2
].
GëEnvñ›e
();

201 
Envñ›e
* 
	gív_s
 = 
GëTønsôi⁄
 (
c
)->
GëEnvñ›e
();

203 if(!
	gôªe
->
	gis_m©ched
[
c
.
_pid
][(*
ôî2
)] &&

204 
	gív_f
->
isSídTy≥
 (Ë&& 
	gív_s
->isSendType () &&

205 
	gív_f
->
	gde°
 =
ív_s
->
de°
 && 
ív_f
->
comm
 ==Énv_s->comm &&

206 
ív_f
->
°ag
 =
ív_s
->stag) {

207  
Ál£
;

212  
	gåue
;

215 
boﬁ
 
	gNode
::
AnyAn˚°‹M©ched
 (
CB
 &
c
, 
°d
::
ve˘‹
<> &
l
) {

216 
°d
::
ve˘‹
 <>::
ôî©‹
 
ô
;

218 
boﬁ
 
	g™y_m©ch
 = 
Ál£
;

220 
Envñ›e
 *
	ge
 = 
GëTønsôi⁄
 (
c
)->
GëEnvñ›e
 ();

222 
	g°d
::
ve˘‹
 <>::
ôî©‹
 
ôî
;

223 
	g°d
::
ve˘‹
 <>::
ôî©‹
 
ôî_íd
 = 
l
.
íd
();

225 
	g°d
::
ve˘‹
 <>::
ôî©‹
 
ô_íd
 = 
e
->
ªq_¥ocs
.
íd
();

227 
boﬁ
 
	gis_waô_‹_ã°_ty≥
 = 
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
isWaô‹Te°Ty≥
();

228 i‡(
	gis_waô_‹_ã°_ty≥
 && 
	gl
.
size
 () == 0) {

229  
åue
;

232 
	gô
 = 
e
->
ªq_¥ocs
.
begö
 (); ià!
ô_íd
; it++) {

234 i‡(
	gôªe
->
	gis_m©ched
[
c
.
_pid
][*
ô
] ||

235 (
	gis_waô_‹_ã°_ty≥
 && !
	gScheduÀr
::
_£nd_block
 && 
_éi°
[
c
.
_pid
]->_éi°[*
ô
].
GëEnvñ›e
()->
func_id
 =
ISEND
)) {

236 
™y_m©ch
 = 
åue
;

238 
	gôî
 = 
l
.
begö
 (); iã∏!
ôî_íd
; iter++) {

239 i‡((*
	gôî
Ë=*
ô
) {

240 
ôî
 = 
l
.
îa£
 (iter);

241 
	gôî_íd
 = 
l
.
íd
 ();

246 i‡(!
	g™y_m©ch
) {

247  
	gÁl£
;

250 
	gôî_íd
 = 
l
.
íd
();

252 
	gôî
 = 
l
.
begö
 (); iã∏!
ôî_íd
; iter++) {

253 if(!
	gôªe
->
	gis_m©ched
[
c
.
_pid
][*
ôî
]) {

254  
	gÁl£
;

258  
	gåue
;

267 
	gNode
::
GëE«bÀdTønsôi⁄sO≥nMP
 (
°d
::
ve˘‹
 <°d::
li°
 <> >&
l
) {

268 
l
.
˛ór
 ();

270 
	gi
 = 0; i < 
NumProcs
(); i++) {

271 
	gl
.
push_back
 (
°d
::
li°
 <> ());

274 #ifde‡
USE_OPENMP


275 #¥agm®
omp
 
∑øŒñ
 

277 
	gi
 = 0 ; i < 
NumProcs
 () ;i++) {

278 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî
 =

279 
_éi°
[
i
]->_éi°.
rbegö
();

280 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî_íd
;

281 
CB
 
c
(
i
,0);

283 
	gôî_íd
 = 
_éi°
[
i
]->_éi°.
ªnd
();

284 
	gj
 = ()
_éi°
[
i
]->_éi°.
size
()-1;

285 ; 
	gôî
 !
ôî_íd
; iter++) {

286 
	gc
.
	g_ödex
 = 
j
;

288 if–!
	gôªe
->
	gis_m©ched
[
i
][
j
] ) {

289 
	g°d
::
ve˘‹
<> &
™˚°‹_li°
(
GëTønsôi⁄
(
c
)->
gë_™˚°‹s
());

290 i‡((
	gôî
->
GëEnvñ›e
 ()->
	gfunc_id
 !
WAITANY
 &&

291 
ôî
->
GëEnvñ›e
 ()->
func_id
 !
TESTANY
) &&

292 
AŒAn˚°‹sM©ched
 (
c
,
™˚°‹_li°
)) {

293 
	gl
[
i
].
push_back
 (
j
);

294 } i‡((
	gôî
->
GëEnvñ›e
()->
	gfunc_id
 =
WAITANY
 ||

295 
ôî
->
GëEnvñ›e
()->
func_id
 =
TESTANY
) &&

296 
AnyAn˚°‹M©ched
 (
c
,
™˚°‹_li°
)) {

297 
	gl
[
i
].
push_back
 (
j
);

301 
	gj
--;

302 i‡(
	gj
 <
ôªe
->
œ°_m©ched
[
i
])

317 
	gNode
::
GëE«bÀdTønsôi⁄sSögÀThªaded
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

318 
l
.
˛ór
 ();

320 
	gi
 = 0; i < 
NumProcs
(); i++) {

321 
	gl
.
push_back
 (
°d
::
li°
 <> ());

324 
	gi
 = 0 ; i < 
NumProcs
 () ;i++) {

325 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî
 =

326 
_éi°
[
i
]->_éi°.
rbegö
();

327 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî_íd
;

328 
CB
 
c
(
i
,0);

330 
	gôî_íd
 = 
_éi°
[
i
]->_éi°.
ªnd
();

331 
	gj
 = ()
_éi°
[
i
]->_éi°.
size
()-1;

332 ; 
	gôî
 !
ôî_íd
; iter++) {

333 
	gc
.
	g_ödex
 = 
j
;

334 i‡(!
	gôªe
->
	gis_m©ched
[
i
][
j
]) {

335 
	g°d
::
ve˘‹
<> &
™˚°‹_li°
(
GëTønsôi⁄
(
c
)->
gë_™˚°‹s
());

336 i‡((
	gôî
->
GëEnvñ›e
 ()->
	gfunc_id
 !
WAITANY
 &&

337 
ôî
->
GëEnvñ›e
 ()->
func_id
 !
TESTANY
) &&

338 
AŒAn˚°‹sM©ched
 (
c
,
™˚°‹_li°
)) {

339 
	gl
[
i
].
push_back
 (
j
);

340 } i‡((
	gôî
->
GëEnvñ›e
()->
	gfunc_id
 =
WAITANY
 ||

341 
ôî
->
GëEnvñ›e
()->
func_id
 =
TESTANY
) &&

342 
AnyAn˚°‹M©ched
 (
c
,
™˚°‹_li°
)) {

343 
	gl
[
i
].
push_back
 (
j
);

347 
	gj
--;

348 i‡(
	gj
 <
ôªe
->
œ°_m©ched
[
i
])

357 
¥öt
(
°d
::
ve˘‹
<°d::
li°
 <> > &
l
) {

358 
i
 = 0 ; 
	gi
 < 
	gl
.
size
(); i++) {

359 
c›y
 (
l
[
i
].
begö
(),Ü[i].
íd
(), 
°d
::
o°ªam_ôî©‹
 <> (°d::
cout
, " "));

360 
	g°d
::
cout
<< 
°d
::
ídl
;

363 
¥öt
(
°d
::
ve˘‹
<°d::
li°
 <
CB
> > &
l
) {

364 
°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

365 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd
;

367 
	gi
 = 0 ; i < 
	gl
.
size
(); i++) {

368 
	gôî_íd
 = 
l
[
i
].
íd
();

369 
	gôî
 = 
l
[
i
].
begö
(); iã∏!
ôî_íd
; iter++) {

370 
	g°d
::
cout
 << 
ôî
->
_pid
 << "," << iãr->
_ödex
 << " ";

372 
	g°d
::
cout
 << 
°d
::
ídl
;

385 *
	$GëE«bÀdTønsôi⁄sThªadC
 (* 
obj
) {

387 
thªad_d©a
 *
my_d©a
;

388 
my_d©a
 = (
thªad_d©a
*Ë
obj
;

389 
Node
 *
n
 = 
my_d©a
->
node
;

390 
n
->
	`GëE«bÀdTønsôi⁄sThªad
(
my_d©a
->
pid
, my_d©a->
l
);

392  
NULL
;

394 
	}
}

426 
	gNode
::
GëE«bÀdTønsôi⁄sThªad
(
pid
, 
°d
::
li°
<> *
l
) {

427 
CB
 
c
(0,0);

428 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî
;

429 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî_íd
;

431 
	gôî_íd
 = 
_éi°
[
pid
]->_éi°.
ªnd
();

432 
	gc
.
	g_pid
 = 
pid
;

434 
	gj
 = ()
_éi°
[
pid
]->_éi°.
size
()-1;

435 
	gôî
 = 
_éi°
[
pid
]->_éi°.
rbegö
 (); iã∏!
ôî_íd
; iter++) {

436 
	gc
.
	g_ödex
 = 
j
;

439 i‡(!
	gôªe
->
	gis_m©ched
[
pid
][
j
]){

441 
	g°d
::
ve˘‹
<> &
™˚°‹_li°
(
GëTønsôi⁄
(
c
)->
gë_™˚°‹s
());

442 i‡((
	gôî
->
GëEnvñ›e
()->
	gfunc_id
 !
WAITANY
 &&

443 
ôî
->
GëEnvñ›e
()->
func_id
 !
TESTANY
) &&

444 
AŒAn˚°‹sM©ched
 (
c
,
™˚°‹_li°
)) {

445 
	gl
->
push_back
 (
j
);

446 } i‡((
	gôî
->
GëEnvñ›e
()->
	gfunc_id
 =
WAITANY
 ||

447 
ôî
->
GëEnvñ›e
()->
func_id
 =
TESTANY
) &&

448 
AnyAn˚°‹M©ched
 (
c
,
™˚°‹_li°
)) {

449 
	gl
->
push_back
 (
j
);

452 
	gj
--;

454 i‡(
	gj
 <
ôªe
->
œ°_m©ched
[
pid
])

459 
	gNode
::
GëWaô‹Te°Am∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

460 
°d
::
li°
 <
CB
> 
bli°
;

462 
	gi
 = 0; i < 
NumProcs
 (); i++) {

463 
	g°d
::
li°
 <>::
ôî©‹
 
ôî
;

464 
	g°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

465 
Envñ›e
 *
	ge
;

466 
	gôî_íd
 = 
l
[
i
].
íd
();

467 
	gôî
 = 
l
[
i
].
begö
 (); iã∏!
ôî_íd
; iter++) {

468 
	ge
 = 
GëTønsôi⁄
(
i
, (*
ôî
))->
GëEnvñ›e
();

470 i‡(
	ge
->
isWaô‹Te°Ty≥
 ()) {

473 
	gbli°
.
push_back
 (
CB
(
i
, *
ôî
));

477 i‡(!
	gbli°
.
em±y
 ()) {

478 
	gam∂e_£t
.
push_back
 (
bli°
);

483 
boﬁ
 
	gNode
::
GëCﬁÀ˘iveAm∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, 
cﬁÀ˘ive
) {

484 
	g°d
::
li°
 <
CB
> 
bli°
;

485 
	g°d
::
li°
 <
CB
> 
Êi°
;

487 
	gi
 = 0; i < 
NumProcs
 (); i++) {

488 
	g°d
::
li°
 <>::
ôî©‹
 
ôî
;

489 
	g°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

491 
	gôî_íd
 = 
l
[
i
].
íd
();

492 
	gôî
 = 
l
[
i
].
begö
 (); iã∏!
ôî_íd
; iter++) {

493 i‡(
GëTønsôi⁄
 (
i
, *
ôî
)->
GëEnvñ›e
 ()->
	gfunc_id
 =
cﬁÀ˘ive
) {

494 
bli°
.
push_back
 (
CB
(
i
, *
ôî
));

499 i‡(
	gcﬁÀ˘ive
 =
FINALIZE
) {

500 i‡(()
bli°
.
size
 (Ë=
NumProcs
 ()) {

501 
am∂e_£t
.
push_back
 (
bli°
);

502  
	gåue
;

504  
	gÁl£
;

507 
Envñ›e
 *
	ge1
;

508 
Envñ›e
 *
	ge2
;

509 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî1
;

510 
	g≈rocs
;

511 
	g°d
::
°rög
 
comm
;

512 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd
;

513 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

514 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî3
;

516 
	gôî_íd
 = 
bli°
.
íd
();

518 
	gôî
 = 
bli°
.
begö
 (); iã∏!
ôî_íd
; iter++) {

519 
	ge1
 = 
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ();

520 
	g≈rocs
 = 
e1
->
≈rocs
;

521 
	gcomm
 = 
e1
->
comm
;

522 
	gôî1
 = 
bli°
.
begö
 (); iãr1 !
ôî_íd
; iter1++) {

523 
	ge2
 = 
GëTønsôi⁄
 (*
ôî1
)->
GëEnvñ›e
 ();

524 i‡(
	ge2
->
	gcomm
 =
e1
->
comm
) {

525 
Êi°
.
push_back
 (
CB
(*
ôî1
));

528 i‡((
	gcﬁÀ˘ive
 =
BCAST
 || 
cﬁÀ˘ive
 =
GATHER
 ||

529 
cﬁÀ˘ive
 =
SCATTER
 || cﬁÀ˘ivê=
SCATTERV
 ||

530 
cﬁÀ˘ive
 =
GATHERV
 || cﬁÀ˘ivê=
REDUCE
Ë&& !
Êi°
.
em±y
()) {

531 
°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

532 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd2
 = 
Êi°
.
íd
();

534 
	groŸ
 =

535 
GëTønsôi⁄
 (*
Êi°
.
begö
())->
GëEnvñ›e
 ()->
cou¡
;

536 
	gôî
 = 
Êi°
.
begö
 (); iã∏!
ôî_íd2
; iter++) {

537 
	groŸ1
 = 
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ()->
cou¡
;

539 i‡(
	groŸ
 !
roŸ1
) {

541 
Êi°
.
˛ór
 ();

543  
	gÁl£
;

548 i‡(
	gcﬁÀ˘ive
 =
COMM_CREATE
 || 
cﬁÀ˘ive
 =
COMM_DUP
 ||

549 
cﬁÀ˘ive
 =
CART_CREATE
 || cﬁÀ˘ivê=
COMM_SPLIT
) {

551 
comm_id
 = 3;

552 i‡(
	gcﬁÀ˘ive
 =
COMM_SPLIT
) {

553 
°d
::
m≠
<, > 
cﬁ‹cou¡
;

556 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

557 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd2
 = 
Êi°
.
íd
();

558 
	gôî
 = 
Êi°
.
begö
 (); iã∏!
ôî_íd2
; iter++) {

559 
	gcﬁ‹cou¡
[
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ()->
comm_•lô_cﬁ‹
] = 1;

563 
	g°d
::
m≠
 <, >::
ôî©‹
 
ôî_m≠
;

564 
	g°d
::
m≠
 <, >::
ôî©‹
 
ôî_m≠_íd
 = 
cﬁ‹cou¡
.
íd
();

565 
	gôî_m≠
 = 
cﬁ‹cou¡
.
begö
 (); iãr_m≠ !
ôî_m≠_íd
; iter_map++) {

566 
	gôî_m≠
->
	g£c⁄d
 = 
comm_id
++;

570 
	gôî
 = 
Êi°
.
begö
 (); iã∏!
ôî_íd2
; iter++) {

571 
Envñ›e
 *
	ge
 = 
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ();

572 
	ge
->
	gcomm_id
 = 
cﬁ‹cou¡
[
e
->
comm_•lô_cﬁ‹
];

575 
	gid
 = 
comm_id
++;

577 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

578 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd2
 = 
Êi°
.
íd
();

579 
	gôî
 = 
Êi°
.
begö
 (); iã∏!
ôî_íd2
; iter++) {

580 
GëTønsôi⁄
(*
ôî
)->
GëEnvñ›e
()->
	gcomm_id
 = 
id
;

585 i‡(()
	gÊi°
.
size
 (Ë=
≈rocs
) {

589 
	gÊi°
.
˛ór
 ();

594 i‡(! 
	gÊi°
.
em±y
 ()) {

595 
	gam∂e_£t
.
push_back
 (
Êi°
);

597  
	gåue
;

599  
	gÁl£
;

602 
boﬁ
 
	gNode
::
gëN⁄WûdˇrdRe˚ive
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

603 
i
 = 0; 
	gi
 < 
NumProcs
 (); i++) {

604 
	g°d
::
li°
 <>::
ôî©‹
 
ôî
;

605 
	g°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

607 
	gôî_íd

l
[
i
].
íd
();

608 
	gôî
 = 
l
[
i
].
begö
 (); iã∏!
ôî_íd
; iter++) {

612 i‡(
GëTønsôi⁄
 (
i
, *
ôî
)->
GëEnvñ›e
 ()->
isRecvTy≥
 ()) {

613 i‡(
GëTønsôi⁄
 (
i
, *
ôî
)->
GëEnvñ›e
 ()->
	g§c
 !
WILDCARD
) {

614 
CB
 
ãmpCB
(
i
, *
ôî
);

615 
CB
 
	gc1
;

616 if(
gëM©chögSíd
 (
c1
, 
l
, 
ãmpCB
)) {

617 
	g°d
::
li°
 <
CB
> 
ml
;

618 
	gml
.
push_back
 (
c1
);

619 
	gml
.
push_back
 (
CB
(
i
, *
ôî
));

620 
	gam∂e_£t
.
push_back
 (
ml
);

621  
	gåue
;

627  
	gÁl£
;

633 
boﬁ
 
	gNode
::
gëM©chögSíd
 (
CB
 &
ªs
, 
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, CB &
c
) {

635 
	g§c
 = 
GëTønsôi⁄
(
c
)->
GëEnvñ›e
 ()->
§c
;

636 
	g°d
::
li°
 <>::
ªvî£_ôî©‹
 
ôî
;

637 
	g°d
::
li°
 <>::
ªvî£_ôî©‹
 
ôî_íd
 = 
l
[
§c
].
ªnd
();

639 
Envñ›e
 *
	ge
;

640 
Envñ›e
 *
	gc_ív
 = 
GëTønsôi⁄
(
c
)->
GëEnvñ›e
();

641 
	gôî
 = 
l
[
§c
].
rbegö
 (); iã∏!
ôî_íd
; iter++) {

642 
	ge
 = 
GëTønsôi⁄
(
§c
, (*
ôî
))->
GëEnvñ›e
();

644 i‡(
	ge
->
isSídTy≥
 () &&

645 
	ge
->
	gde°
 =
c
.
_pid
 &&

646 
e
->
comm
 =
c_ív
->comm &&

647 (
e
->
°ag
 =
c_ív
->
πag
 || c_ív->πag =
WILDCARD
)) {

649 
ªs
.
_pid
 = 
§c
;

650 
	gªs
.
	g_ödex
 = *
ôî
;

651  
	gåue
;

654  
	gÁl£
;

657 
boﬁ
 
	gNode
::
gëAŒM©chögSíds
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, 
CB
 &
c
,

658 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> >& 
ms
) {

659 
DR
–
°d
::
cout
 << " [gëAŒM©chögSíd†begö]\n\åecv=" << 
c
 << "\n"; )

661 
	g°d
::
li°
 <>::
ªvî£_ôî©‹
 
ôî
;

662 
	g°d
::
li°
 <>::
ªvî£_ôî©‹
 
ôî_íd
;

663 
Envñ›e
 *
	ge
;

664 
Envñ›e
 *
	gc_ív
 = 
GëTønsôi⁄
(
c
)->
GëEnvñ›e
();

665 
boﬁ
 
	gfound_am∂e
 = 
Ál£
;

666 
	g°d
::
£t
<
CB
> *
£nds
 = &
ôªe
->
m©ched_£nds
[
c
];

668 
DR
(

669 
°d
::
£t
 <
CB
>::
ôî©‹
 
si
 = 
£nds
->
begö
();

670 
°d
::
£t
 <
CB
>::
ôî©‹
 
sõ
 = 
£nds
->
íd
();

671 
°d
::
cout
 << "\tmatched_sends:";

672 ; 
si
!=
sõ
; si++)

673 
°d
::
cout
 << " " << *
si
;

674 
°d
::
cout
 << "\n";

677 
	gi
 = 0; i < 
NumProcs
 (); i++) {

679 
	gôî_íd
 = 
l
[
i
].
ªnd
();

680 
	gôî
 = 
l
[
i
].
rbegö
 (); iã∏!
ôî_íd
; iter++) {

681 
	ge
 = 
GëTønsôi⁄
(
i
, *
ôî
)->
GëEnvñ›e
();

683 i‡(
	ge
->
isSídTy≥
 () &&

684 
	ge
->
	gde°
 =
c
.
_pid
 &&

685 
e
->
comm
 =
c_ív
->comm &&

686 (
e
->
°ag
 =
c_ív
->
πag
 || c_ív->πag =
WILDCARD
) && (

687 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


688 
ScheduÀr
::
_no_am∂e_£t_fix
 ? 
åue
 :

690 (
£nds
->
föd
(
CB
(
i
, *
ôî
)Ë=£nds->
íd
()))) {

691 
°d
::
li°
 <
CB
> 
ml
;

692 
	gml
.
push_back
 (
CB
(
i
, *
ôî
));

693 
	gml
.
push_back
 (
c
);

695 
	gms
.
push_back
 (
ml
);

696 
	gfound_am∂e
 = 
åue
;

701 
DR
–
°d
::
cout
 << " [getAllMatchingSendsÉnd]\n"; )

702  
	gfound_am∂e
;

705 
	gNode
::
GëÆlSíds
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

706 
boﬁ
 
fú°
 = 
Ál£
;

709 
	gi
 = 0; i < 
NumProcs
 (); i++) {

710 
	g°d
::
li°
 <>::
ôî©‹
 
ôî
;

711 
	g°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

713 
	gôî_íd
 = 
l
[
i
].
íd
();

715 
	gôî
 = 
l
[
i
].
begö
 (); iã∏!
ôî_íd
; iter++) {

716 i‡(
GëTønsôi⁄
 (
i
, (*
ôî
))->
GëEnvñ›e
 ()->
isRecvTy≥
 ()) {

717 i‡(
GëTønsôi⁄
 (
i
, (*
ôî
))->
GëEnvñ›e
 ()->
	g§c
 =
WILDCARD
) {

719 
CB
 
ãmpCB
(
i
, *
ôî
);

721 i‡(
gëAŒM©chögSíds
 (
l
, 
ãmpCB
,

722 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


723 
ScheduÀr
::
_no_am∂e_£t_fix
 ? 
am∂e_£t
 :

725 (!
fú°
Ë? 
am∂e_£t
:
Ÿhî_wc_m©ches
)) {

726 
fú°
 = 
åue
;

732 
	gŸhî_wc_m©ches
.
˛ór
();

735 
	gNode
::
GëRe˚iveAm∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

737 i‡(
gëN⁄WûdˇrdRe˚ive
 (
l
)) {

741 
GëÆlSíds
 (
l
);

744 
boﬁ
 
	gNode
::
	$GëAm∂eSë
 () {

745 i‡(! 
am∂e_£t
.
	`em±y
 ()) {

746  
åue
;

750 
	`GëE«bÀdTønsôi⁄s
 (
íabÀd_å™sôi⁄s
);

754 
°d
::
li°
 <>::
ôî©‹
 
ôî
;

755 
°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

757 
i
 = 0 ; i < 
	`NumProcs
 (); i++) {

758 
ôî_íd
 = 
íabÀd_å™sôi⁄s
[
i
].
	`íd
();

759 
°d
::
cout
 <<"E«bÀd Tønsôi⁄†‰omÖro˚s†" << 
i
 << ": ";

760 
ôî
 = 
íabÀd_å™sôi⁄s
[
i
].
	`begö
 (); iã∏!
ôî_íd
; iter++) {

761 
°d
::
cout
 << (*
ôî
) << " ";

763 
°d
::
cout
 << "œ°_m©ched i†" << 
ôªe
->
œ°_m©ched
[
i
];

764 
°d
::
cout
 << std::
ídl
;

766 
°d
::
cout
 << "Done Listing \n";

773 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
BARRIER
);

774 i‡(! 
am∂e_£t
.
	`em±y
 ())

775  
åue
;

777 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
BCAST
);

778 i‡(! 
am∂e_£t
.
	`em±y
 ())

779  
åue
;

782 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
SCATTER
);

783 i‡(! 
am∂e_£t
.
	`em±y
 ())

784  
åue
;

786 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
GATHER
);

787 i‡(! 
am∂e_£t
.
	`em±y
 ())

788  
åue
;

790 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
SCATTERV
);

791 i‡(! 
am∂e_£t
.
	`em±y
 ())

792  
åue
;

794 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
GATHERV
);

795 i‡(! 
am∂e_£t
.
	`em±y
 ())

796  
åue
;

798 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
ALLGATHER
);

799 i‡(! 
am∂e_£t
.
	`em±y
 ())

800  
åue
;

802 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
ALLGATHERV
);

803 i‡(! 
am∂e_£t
.
	`em±y
 ())

804  
åue
;

806 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
ALLTOALL
);

807 i‡(! 
am∂e_£t
.
	`em±y
 ())

808  
åue
;

810 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
ALLTOALLV
);

811 i‡(! 
am∂e_£t
.
	`em±y
 ())

812  
åue
;

814 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
SCAN
);

815 i‡(! 
am∂e_£t
.
	`em±y
 ())

816  
åue
;

819 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
EXSCAN
);

820 i‡(! 
am∂e_£t
.
	`em±y
 ())

821  
åue
;

824 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
REDUCE
);

825 i‡(! 
am∂e_£t
.
	`em±y
 ())

826  
åue
;

828 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
REDUCE_SCATTER
);

829 i‡(! 
am∂e_£t
.
	`em±y
 ())

830  
åue
;

832 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
ALLREDUCE
);

833 i‡(! 
am∂e_£t
.
	`em±y
 ())

834  
åue
;

836 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
FINALIZE
);

837 i‡(! 
am∂e_£t
.
	`em±y
 ())

838  
åue
;

840 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
CART_CREATE
);

841 i‡(! 
am∂e_£t
.
	`em±y
 ())

842  
åue
;

844 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
COMM_CREATE
);

845 i‡(! 
am∂e_£t
.
	`em±y
 ())

846  
åue
;

848 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
COMM_DUP
);

849 i‡(! 
am∂e_£t
.
	`em±y
 ())

850  
åue
;

852 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
COMM_SPLIT
);

853 i‡(! 
am∂e_£t
.
	`em±y
 ())

854  
åue
;

856 
	`GëCﬁÀ˘iveAm∂e
 (
íabÀd_å™sôi⁄s
, 
COMM_FREE
);

857 i‡(! 
am∂e_£t
.
	`em±y
 ())

858  
åue
;

860 
	`GëWaô‹Te°Am∂e
 (
íabÀd_å™sôi⁄s
);

861 i‡(! 
am∂e_£t
.
	`em±y
 ()) {

862  
åue
;

864 
	`GëRe˚iveAm∂e
 (
íabÀd_å™sôi⁄s
);

865 i‡(! 
am∂e_£t
.
	`em±y
 ())

866  
åue
;

873 
°d
::
li°
<
CB
> 
ã°_li°
;

874 
i
 = 0; i < 
	`NumProcs
(); i++) {

875 
Tønsôi⁄
 
t
 = 
_éi°
[
i
]->_éi°.
	`back
();

876 i‡(
t
.
	`GëEnvñ›e
()->
func_id
 =
TEST
 ||

877 
t
.
	`GëEnvñ›e
()->
func_id
 =
TESTALL
 ||

878 
t
.
	`GëEnvñ›e
()->
func_id
 =
TESTANY
 ||

879 
t
.
	`GëEnvñ›e
()->
func_id
 =
IPROBE
) {

880 
ã°_li°
.
	`push_back
(
	`CB
 (
i
, ()
_éi°
[i]->_éi°.
	`size
()-1));

885 
°d
::
ve˘‹
<>::
ôî©‹
 
ôî
 = 
t
.
	`gë_™˚°‹s
().
	`begö
();

886 
°d
::
ve˘‹
<>::
ôî©‹
 
ôî_íd
 = 
t
.
	`gë_™˚°‹s
().
	`íd
();

887 ; 
ôî
 !
ôî_íd
; iter++) {

888 
°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî2
 = 
t
.
	`gë_öåa_cb
().
	`begö
();

889 
°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî2_íd
 = 
t
.
	`gë_öåa_cb
().
	`íd
();

890 ; 
ôî2
 !
ôî2_íd
; iter2++) {

891 
Tønsôi⁄
* 
des˚nd™t
 = 
	`GëTønsôi⁄
(*
ôî2
);

892 
Tønsôi⁄
* 
™˚°‹
 = 
	`GëTønsôi⁄
(
i
, *
ôî
);

893 
des˚nd™t
->
	`mod_™˚°‹s
().
	`push_back
(*
ôî
);

894 
™˚°‹
->
	`AddI¡øCB
(*
ôî2
);

899 i‡(!
ã°_li°
.
	`em±y
()) {

900 
am∂e_£t
.
	`push_back
(
ã°_li°
);

902 i‡(!
am∂e_£t
.
	`em±y
())

903  
åue
;

906  
Ál£
;

907 
	}
}

909 
Tønsôi⁄
 *
	gNode
::
	$GëTønsôi⁄
 (
CB
 &
c
) {

910  
	`GëTønsôi⁄
(
c
.
_pid
, c.
_ödex
);

912 
	}
}

914 
Tønsôi⁄
 *
	gNode
::
	$GëTønsôi⁄
 (
pid
, 
ödex
) {

915  &
_éi°
[
pid
]->_éi°[
ödex
];

916 
	}
}

919 
	gITªe
::
ITªe
 (
Node
 *
n
, 
°d
::
°rög
 
«me
) {

921 
≤ame
 = 
«me
;

922 
	g_¶i°
.
push_back
 (
n
);

923 
	gdïth
 = 0;

924 
	ghave_wûdˇrd
 = 
Ál£
;

925 #ifde‡
CONFIG_BOUNDED_MIXING


926 
	gex∑nded
 = 0;

928 
	gi
 = 0; i < 
	gn
->
NumProcs
(); i ++) {

929 
	gis_m©ched
.
push_back
 (
√w
 
boﬁ
 [
MAX_TRANSITIONS
]());

930 
	gis_issued
.
push_back
(
√w
 
boﬁ
 [
MAX_TRANSITIONS
]());

932 
	gœ°_m©ched
 = 
√w
 [
n
->
NumProcs
()]();

933 
	gj
 = 0; j < 
	gn
->
NumProcs
(); j++)

934 
	gœ°_m©ched
[
j
] = -1;

936 
	gn
->
£tITªe
(
this
);

939 
	gITªe
::
	$Re£tM©chögInfo
() {

940 
i
 = 0; i< 
	`GëCuºNode
()->
	`NumProcs
(); i++) {

941 
dñëe
 [] 
is_m©ched
[
i
];

942 
dñëe
 [] 
is_issued
[
i
];

943 
is_m©ched
[
i
] = 
√w
 
boﬁ
[
MAX_TRANSITIONS
]();

944 
is_issued
[
i
] = 
√w
 
boﬁ
[
MAX_TRANSITIONS
]();

947 
dñëe
 [] 
œ°_m©ched
;

948 
œ°_m©ched
 = 
√w
 [
	`GëCuºNode
()->
	`NumProcs
()]();

949 
j
 = 0; j < 
	`GëCuºNode
()->
	`NumProcs
(); j++)

950 
œ°_m©ched
[
j
] = -1;

951 
	}
}

953 
Node
 *
	gITªe
::
	$GëCuºNode
 () {

954 
	`as£π
(()
dïth
 < ()
_¶i°
.
	`size
());

955  
_¶i°
[
dïth
];

956 
	}
}

958 
	gITªe
::
CHECK
 (
SîvîSockë
 &
sock
, 
°d
::
li°
 <> &
l
) {

959 
DR
–
°d
::
cout
 << " [CHECK begö dïth=" << 
dïth
 << "]\n"; )

961 
boﬁ
 
	g¥obe_Êag
 = 
Ál£
;

962 
	gchoi˚
 = 0;

963 
Node
 *
	gn
 = 
GëCuºNode
();

964 
Envñ›e
 *
	gív
;

965 i‡(
	gn
->
GëAm∂eSë
()) {

967 
DR
(

968 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> >::
ôî©‹
 
ôî2
 = 
GëCuºNode
 ()->
am∂e_£t
.
begö
();

969 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> >::
ôî©‹
 
ôî_íd2
 = 
GëCuºNode
 ()->
am∂e_£t
.
íd
();

970 
°d
::
cout
 << "\tample_set:\n";

971 ; 
ôî2
!=
ôî_íd2
; iter2++) {

972 
°d
::
li°
<
CB
>::
ôî©‹
 
li
 = 
ôî2
->
begö
();

973 
°d
::
li°
<
CB
>::
ôî©‹
 
lõ
 = 
ôî2
->
íd
();

974 
°d
::
cout
 << "\t\t";

975 ; 
li
!=
lõ
;Üi++) {

976 
°d
::
cout
 << " " << *
li
;

978 
°d
::
cout
 << "\n";

981 
ôî2
 = 
n
->
am∂e_£t
.
begö
();

982 ; 
ôî2
!=
ôî_íd2
; iter2++) {

983 
°d
::
li°
<
CB
>::
ôî©‹
 
li
 = 
ôî2
->
begö
();

984 
°d
::
li°
<
CB
>::
ôî©‹
 
lõ
 = 
ôî2
->
íd
();

985 ; 
li
!=
lõ
;Üi++) {

986 
°d
::
cout
 << "\t\t\t" << *
n
->
GëTønsôi⁄
(*
li
)->
GëEnvñ›e
() << "\n";

992 
	g°d
::
li°
<
CB
> 
cbl
;

995 i‡(
	gScheduÀr
::
_Ârs
) {

996 
°d
::
ve˘‹
< std::
li°
<
CB
> > 
√w_am∂e_£t
;

997 
	g°d
::
ve˘‹
< 
°d
::
li°
<
CB
> > 
d⁄t_ˇª_£t
;

998 
	g°d
::
ve˘‹
< 
°d
::
li°
<
CB
> >::
ôî©‹
 
as_ôî
;

999 
Envñ›e
 *
	gthis_ív
;

1000 
	gas_ôî
 = 
n
->
am∂e_£t
.
begö
(Ë;ás_ôî !n->am∂e_£t.
íd
() ;ás_iter++) {

1001 
boﬁ
 
	gd⁄t_ˇª
 = 
åue
;

1002 
	g°d
::
li°
<
CB
>::
ôî©‹
 
cbôî
;

1003 
	gcbôî
 = (*
as_ôî
).
begö
(Ë; cbôî !(*as_ôî).
íd
() ; cbiter++) {

1004 
	gthis_ív
 = 
n
->
GëTønsôi⁄
(*
cbôî
)->
GëEnvñ›e
();

1005 i‡(
	gthis_ív
->
	gö_exÆl
) {

1006 
	g√w_am∂e_£t
.
push_back
(*
as_ôî
);

1007 
	gd⁄t_ˇª
 = 
Ál£
;

1012 i‡(
	gd⁄t_ˇª
) {

1013 
	gd⁄t_ˇª_£t
.
push_back
(*
as_ôî
);

1021 
	gchoi˚_dc
 = 0;

1022 i‡(
	gd⁄t_ˇª_£t
.
size
(Ë> 1Ë
	gchoi˚_dc
 = 
ønd
(Ë% 
d⁄t_ˇª_£t
.size();

1023 i‡(
	gd⁄t_ˇª_£t
.
size
(Ë> 0Ë
	g√w_am∂e_£t
.
push_back
(
d⁄t_ˇª_£t
.
©
(
choi˚_dc
));

1025 
	gn
->
	gam∂e_£t
.
˛ór
();

1026 
	gn
->
	gam∂e_£t
 = 
√w_am∂e_£t
;

1028 
	gcbl
 = 
n
->
am∂e_£t
.
©
(
choi˚
);

1032 i‡(
	gn
->
	gam∂e_£t
.
size
(Ë> 1 && 
	gScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_RANDOM
) {

1033 
choi˚
 = 
ønd
(Ë% 
n
->
am∂e_£t
.
size
();

1037 
	gcbl
 = 
n
->
am∂e_£t
.
©
(
choi˚
);

1040 
DR
(

1041 
°d
::
cout
 << "\tchoice:";

1042 
°d
::
li°
<
CB
>::
ôî©‹
 
li
 = 
cbl
.
begö
();

1043 
°d
::
li°
<
CB
>::
ôî©‹
 
lõ
 = 
cbl
.
íd
();

1044 ; 
li
!=
lõ
;Üi++) {

1045 
°d
::
cout
 << " " << *
li
;

1047 
°d
::
cout
 << "\n";

1050 
DR
(

1051 if(
n
->
isWûdˇrdNode
()) {

1052 
°d
::
cout
 << "\twûdˇrd-ªcv: " << 
n
->
wûdˇrd
 << "\n";

1054 
°d
::
li°
 <
CB
> *
acs
 = &
aux_c€«bÀd_£nds
[
n
->
wûdˇrd
];

1055 
°d
::
£t
 <
CB
> *
ms
 = &
m©ched_£nds
[
n
->
wûdˇrd
];

1057 
°d
::
li°
 <
CB
>::
ôî©‹
 
li
 = 
acs
->
begö
();

1058 
°d
::
li°
 <
CB
>::
ôî©‹
 
lõ
 = 
acs
->
íd
();

1059 
°d
::
cout
 << "\taux_coenabled_sends:";

1060 ; 
li
!=
lõ
;Üi++)

1061 
°d
::
cout
 << " " << *
li
;

1062 
°d
::
cout
 << "\n";

1064 
°d
::
£t
 <
CB
>::
ôî©‹
 
si
 = 
ms
->
begö
();

1065 
°d
::
£t
 <
CB
>::
ôî©‹
 
sõ
 = 
ms
->
íd
();

1066 
°d
::
cout
 << "\tmatched_sends:";

1067 ; 
si
!=
sõ
; si++)

1068 
°d
::
cout
 << " " << *
si
;

1069 
°d
::
cout
 << "\n";

1073 #ifde‡
FIB


1074 i‡(
	gScheduÀr
::
_fib
) {

1075 
Æ_cuº
.
push_back
(
cbl
);

1093 i‡(
	gdïth
 >()
_¶i°
.
size
 ()-1) {

1096 
Node
 *
n_
 = 
√w
 Node(*
n
);

1097 
	g_¶i°
.
push_back
(
n_
);

1098 
	gn
->
	gty≥
 = 
GENERAL_NODE
;

1099 if(
	gcbl
.
size
() == 2) {

1100 
ív
 = 
n
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
();

1101 i‡((
	gív
->
	gfunc_id
 =
RECV
 || 
ív
->
func_id
 =
IRECV
Ë&&Énv->
§c
 =
WILDCARD
) {

1102 
have_wûdˇrd
 = 
åue
;

1103 
	gn
->
	gty≥
 = 
WILDCARD_RECV_NODE
;

1104 
	gn
->
	gwûdˇrd
.
	g_pid
 = 
ív
->
id
;

1105 
	gn
->
	gwûdˇrd
.
	g_ödex
 = 
ív
->
ödex
;

1108 } i‡(
	gív
->
	gfunc_id
 =
PROBE
 && 
ív
->
§c
 =
WILDCARD
) {

1109 
have_wûdˇrd
 = 
åue
;

1110 
	gn
->
	gty≥
 = 
WILDCARD_PROBE_NODE
;

1111 
	gn
->
	gwûdˇrd
.
	g_pid
 = 
ív
->
id
;

1112 
	gn
->
	gwûdˇrd
.
	g_ödex
 = 
ív
->
ödex
;

1117 if(
	gn
->
isWûdˇrdNode
()) {

1118 
	gív
 = 
n
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
();

1119 
	gn
->
	gwûdˇrd
.
	g_pid
 = 
ív
->
id
;

1120 
	gn
->
	gwûdˇrd
.
	g_ödex
 = 
ív
->
ödex
;

1123 
	gdïth
++;

1124 
	gn
 = 
GëCuºNode
();

1134 
	gsour˚
 = 
cbl
.
‰⁄t
 ().
_pid
;

1136 i‡(
	gn
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
 ()->
isSídTy≥
 ()) {

1139 i‡(
	gn
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
 ()->
	gfunc_id
 !
PROBE
 &&

1140 
n
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
 ()->
func_id
 !
IPROBE
) {

1141 
n
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
£t_cuº_m©chög
(cbl.
back
());

1143 
	g¥obe_Êag
 = 
åue
;

1144 
	gScheduÀr
::
_¥obed
 = 
åue
;

1147 
	gn
->
GëTønsôi⁄
(
cbl
.
back
())->
£t_cuº_m©chög
(cbl.
‰⁄t
());

1151 i‡(
	gn
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
()->
isSídTy≥
 ()){

1152 
	gcuºTy≥
 = 
n
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
()->
d©a_ty≥
;

1153 
	gm©chTy≥
 = 
n
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
()->
d©a_ty≥
;

1154 if(
	gcuºTy≥
 =
m©chTy≥
){

1155 
n
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
()->
ty≥sM©ch
 = 
åue
;

1156 
	gn
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
()->
	gty≥sM©ch
 = 
åue
;

1158 
	gn
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
()->
	gty≥sM©ch
 = 
Ál£
;

1159 
	gn
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
()->
	gty≥sM©ch
 = 
Ál£
;

1161 
Envñ›e
 *
	gív
 = 
n
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
 ();

1162 
	gScheduÀr
::
_mism©chLog
 << 
ív
->
fûíame
 << " "

1163 << 
ív
->
löíumbî
 << 
°d
::
ídl
;

1164 
	gív
 = 
n
->
GëTønsôi⁄
(
cbl
.
back
())->
GëEnvñ›e
 ();

1165 
	gScheduÀr
::
_mism©chLog
 << 
ív
->
fûíame
 << " "

1166 << 
ív
->
löíumbî
 << 
°d
::
ídl
;

1169 if(
	gn
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
()->
	gd©a_ty≥
 == -1){

1170 
Envñ›e
 *
ív
 = 
n
->
GëTønsôi⁄
(
cbl
.
‰⁄t
())->
GëEnvñ›e
();

1171 
	gScheduÀr
::
_mism©chLog
 << 
ív
->
fûíame
 << " "

1172 << 
ív
->
löíumbî
 << 
°d
::
ídl
;

1175 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

1176 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
cbl
.
íd
();

1177 
boﬁ
 
	gã°_ùrobe_ˇŒs_⁄ly
 = 
åue
;

1178 
	gôî
 = 
cbl
.
begö
 (); iã∏!
ôî_íd
; iter++) {

1179 
	gív
 = 
n
->
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ();

1181 i‡(
	gív
->
	gfunc_id
 !
IPROBE
 && 
ív
->
func_id
 !
TEST
 &&

1182 
ív
->
func_id
 !
TESTALL
 &&Énv->func_id !
TESTANY
) {

1183 
ã°_ùrobe_ˇŒs_⁄ly
 = 
Ál£
;

1189 
	gôî
 = 
cbl
.
begö
 (); iã∏!
ôî_íd
; iter++) {

1191 
	gív
 = 
n
->
GëTønsôi⁄
 (*
ôî
)->
GëEnvñ›e
 ();

1193 i‡(
	gã°_ùrobe_ˇŒs_⁄ly
) {

1194 
	gsour˚
 = -1;

1198 i‡(!
	g¥obe_Êag
 || !
	gív
->
isSídTy≥
()) {

1199 
	gis_m©ched
[
ôî
->
_pid
][ôî->
_ödex
] = 
åue
;

1200 
	gn
->
	g_éi°
[
ôî
->
_pid
]->
	g_uli°
.
ªmove
(ôî->
_ödex
);

1205 
	gãmp_œ°_m©ched
 = 
œ°_m©ched
[
ôî
->
_pid
];

1206 
	gãmp_œ°_m©ched
 < (Ë(
	gn
->
	g_éi°
[
ôî
->
_pid
]->_éi°.
size
()-1)

1207 && 
	gis_m©ched
[
ôî
->
_pid
][
ãmp_œ°_m©ched
 + 1]) {

1208 
	gãmp_œ°_m©ched
 ++;

1210 
	gœ°_m©ched
[
ôî
->
_pid
] = 
ãmp_œ°_m©ched
;

1218 i‡(
	gis_issued
[
ôî
->
_pid
][ôî->
_ödex
]) {

1219 i‡(
	gív
->
isSídTy≥
(Ë&&Énv->
isBlockögTy≥
(Ë&& !
	gScheduÀr
::
_¥obed
) {

1220 
ScheduÀr
::
_runQ
[
ôî
->
_pid
]->
_ªad_√xt_ív
 = 
åue
;

1224 
	g°d
::
o°rög°ªam
 
oss
;

1239 
	goss
 << 
	ggﬂhód
 << " " << 
	gív
->
	gödex
 << " " << 
	gsour˚
;

1241 
	gív
->
Issued
 ();

1242 i‡(
	gív
->
	gfunc_id
 =
COMM_CREATE
 || 
ív
->
func_id
 =
COMM_DUP


1243 || 
ív
->
func_id
 =
CART_CREATE
 ||Énv->func_id =
COMM_SPLIT
) {

1244 
oss
 << " " << 
ív
->
comm_id
;

1246 
	goss
 << " " << 0;

1249 i‡(
	gív
-> 
isBlockögTy≥
 ()) {

1250 
	goss
 << " " << 2 ;

1251 
	gl
.
push_back
 (
ôî
->
_pid
);

1253 
	goss
 << " " << 1 ;

1256 
	gsock
.
Síd
 (
ôî
->
_pid
, 
oss
.
°r
());

1257 
	gis_issued
[
ôî
->
_pid
][ôî->
_ödex
]
åue
;

1260 
	gsock
.
ExôMpiPro˚ssAndWaô
 (
åue
);

1262 i‡(!
	gScheduÀr
::
_quõt
 && !
ScheduÀr
::
_limô_ouçut
) {

1263 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

1264 i‡(
	gn
->
gëTŸÆMpiCÆls
(Ë< 
	gCONSOLE_OUTPUT_THRESHOLD
)

1265 
	g°d
::
cout
 << *
n
 << 
°d
::
ídl
;

1267 
	g°d
::
cout
 << "Nÿm©chög MPI cÆ»found!" << 
°d
::
ídl
;

1268 
	g°d
::
cout
 << "Detectedá DEADLOCK in interleaving " <<

1269 
ScheduÀr
::
öãæóvögs
 << 
°d
::
ídl
;

1272 
	g°d
::
cout
 << "-----------------------------------------" << 
°d
::
ídl
;

1274 
	gScheduÀr
::
_ju°_dód_lock
 = 
åue
;

1278 
DR
–
°d
::
cout
 << " [CHECKÉnd]\n"; )

1290 
	gITªe
::
	$Pro˚ssI¡îÀavög
 () {

1293 i‡(
have_wûdˇrd
) {

1297 
	`AddI¡îCB
 ();

1300 
	`FödCoE«bÀdSíds
 ();

1302 
	}
}

1309 
boﬁ
 
	gITªe
::
	$födSídOfThisWaô
 (
CB
 &
ªs
, CB &
c
) {

1310 
Envñ›e
 *
e
 = 
	`GëCuºNode
 ()->
	`GëTønsôi⁄
 (
c
)->
	`GëEnvñ›e
 ();

1311 i‡(
e
->
	`isWaô‹Te°Ty≥
 ()) {

1312 
i
 = 0 ; i < 
e
->
ªq_¥ocs
.
	`size
 (); i++) {

1313 
CB
 
	`wc
 (
c
.
_pid
, 
e
->
ªq_¥ocs
[
i
]);

1314 i‡(
	`GëCuºNode
()->
	`GëTønsôi⁄
(
wc
)->
	`GëEnvñ›e
()->
	`isSídTy≥
()) {

1315 
ªs
 = 
wc
;

1316  
åue
;

1320  
Ál£
;

1321 
	}
}

1325 
size_t
 
	gITªe
::
	$gëMaxTli°Size
() {

1326 
size_t
 
ªt
 = 
	`GëCuºNode
()->
_éi°
[0]->_éi°.
	`size
();

1327 
size_t
 
i
 = 1; i < 
	`GëCuºNode
()->
_éi°
.
	`size
(); i++) {

1328 i‡(
ªt
 < 
	`GëCuºNode
()->
_éi°
[
i
]->_éi°.
	`size
())

1329 
ªt
 = 
	`GëCuºNode
()->
_éi°
[
i
]->_éi°.
	`size
();

1331  
ªt
;

1332 
	}
}

1342 
boﬁ
 
	gITªe
::
	$FödN⁄SídWaôP©h
 (
boﬁ
 ** 
visôed
, 
CB
 &
§c
, CB &
de°
) {

1343 
	`DR
(

1344 
°d
::
cout
 << " [FindNonSendWaitPath]\n"

1345 << "\t\t§c=" << 
§c
 << " de°=" << 
de°
 << "\n";

1348 i‡(
§c
 =
de°
)

1349  
åue
;

1350 i‡(
§c
.
_pid
 =
de°
._pid && src.
_ödex
 > dest._index)

1351  
Ál£
;

1353 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

1354 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî_íd
;

1355 
°d
::
queue
 <
CB
> 
w‹kli°
;

1356 
CB
 
	`cuºít
(0,0);

1359 
i
 = 0; i < 
	`GëCuºNode
()->
	`NumProcs
(); i++) {

1360 
size_t
 
j
 = 0; j < 
	`gëMaxTli°Size
(); j ++)

1361 
visôed
[
i
][
j
] = 
Ál£
;

1366 
w‹kli°
.
	`push
(
§c
);

1367 
	`DR
–
°d
::
cout
 << "\tworklist "; )

1368 !
w‹kli°
.
	`em±y
()) {

1369 
CB
 
c
;

1370 
cuºít
 = 
w‹kli°
.
	`‰⁄t
();

1371 
	`DR
–
°d
::
cout
 << 
cuºít
 << " "; )

1372 
w‹kli°
.
	`p›
();

1373 i‡(
cuºít
 =
de°
) {

1374 
	`DR
–
°d
::
cout
 << "\n"; )

1375  
åue
;

1377 
visôed
[
cuºít
.
_pid
][cuºít.
_ödex
]
åue
;

1379 
Tønsôi⁄
 
t
 = *
	`GëCuºNode
()->
	`GëTønsôi⁄
(
cuºít
);

1380 
ôî
 = 
t
.
	`gë_öåa_cb
().
	`begö
();

1381 
ôî_íd
 = 
t
.
	`gë_öåa_cb
().
	`íd
();

1382 ; 
ôî
 !
ôî_íd
; iter++) {

1383 i‡(
	`födSídOfThisWaô
(
c
, *
ôî
)) {

1384 
visôed
[
ôî
->
_pid
][ôî->
_ödex
] = 
åue
;

1386 i‡(!
visôed
[
ôî
->
_pid
][ôî->
_ödex
]) {

1387 
w‹kli°
.
	`push
(*
ôî
);

1388 
visôed
[
ôî
->
_pid
][ôî->
_ödex
] = 
åue
;

1393 
ôî
 = 
t
.
	`gë_öãr_cb
().
	`begö
();

1394 
ôî_íd
 = 
t
.
	`gë_öãr_cb
().
	`íd
();

1395 ; 
ôî
 !
ôî_íd
; iter++) {

1396 i‡(
	`födSídOfThisWaô
(
c
, *
ôî
)) {

1398 
visôed
[
ôî
->
_pid
][ôî->
_ödex
] = 
åue
;

1401 i‡(!
visôed
[
ôî
->
_pid
][ôî->
_ödex
]) {

1402 
w‹kli°
.
	`push
(*
ôî
);

1403 
visôed
[
ôî
->
_pid
][ôî->
_ödex
] = 
åue
;

1408 
	`DR
–
°d
::
cout
 << "\n"; )

1410  
Ál£
;

1412 
	}
}

1414 
	gITªe
::
	$FödCoE«bÀdSíds
 () {

1415 
	`DR
–
°d
::
cout
 << " [FindCoEnabledSends begin]\n"; )

1422 
°d
::
ve˘‹
 <
Node
 *>::
ôî©‹
 
ôî
;

1423 
°d
::
ve˘‹
 <
Node
 *>::
ôî©‹
 
ôî_íd
 = 
_¶i°
.
	`íd
 ();

1429 
boﬁ
** 
visôed
 = 
√w
 boﬁ* [
	`GëCuºNode
()->
	`NumProcs
()];

1430 
i
 = 0; i < 
	`GëCuºNode
()->
	`NumProcs
(); i++) {

1431 
visôed
[
i
] = 
√w
 
boﬁ
 [
	`gëMaxTli°Size
()];

1434 
ôî
 = 
_¶i°
.
	`begö
 (); iã∏!
ôî_íd
-1; iter++) {

1435 
Node
 *
n
 = (*
ôî
);

1453 i‡(!
n
->
	`isWûdˇrdNode
()) ;

1456 
CB
 
£nd
 = 
n
->
am∂e_£t
.
	`‰⁄t
().front();

1458 
	`DR
–
°d
::
cout
 << "\t£nd: " << 
£nd
 << "\åecv: " << 
n
->
wûdˇrd
 << "\n"; )

1460 
°d
::
£t
 <
CB
> *
¥ev_£nds
 = &
m©ched_£nds
[
n
->
wûdˇrd
];

1461 
¥ev_£nds
->
	`ö£π
(
£nd
);

1462 
°d
::
m≠
 <
CB
, std::
li°
 <CB> >::
ôî©‹
 
csi
 = 
aux_c€«bÀd_£nds
.
	`föd
(
n
->
wûdˇrd
);

1463 if(
csi
 !
aux_c€«bÀd_£nds
.
	`íd
())

1464 
csi
->
£c⁄d
.
	`ªmove
(
£nd
);

1466 
Envñ›e
 *
ªnv
 = 
	`GëCuºNode
 ()->
	`GëTønsôi⁄
 ((
n
->
wûdˇrd
))->
	`GëEnvñ›e
 ();

1467 
i
 = 0 ; i < 
n
->
	`NumProcs
 (); i++) {

1468 i‡(
i
 =
n
->
wûdˇrd
.
_pid
) {

1471 
size_t
 
éi°_size
 = 
	`GëCuºNode
()->
_éi°
[
i
]->_éi°.
	`size
();

1472 
j
 = 0 ; j < 
éi°_size
; j++) {

1473 
Envñ›e
 *
e
 = 
	`GëCuºNode
 ()->
_éi°
[
i
]->_éi°[
j
].
	`GëEnvñ›e
 ();

1474 i‡(! 
e
->
	`isSídTy≥
 ()) {

1477 i‡(
e
->
de°
 =
n
->
wûdˇrd
.
_pid
 &&

1478 (
e
->
°ag
 =
ªnv
->
πag
 ||Ñív->πag =
WILDCARD
) &&

1479 
e
->
comm
 =
ªnv
->comm) {

1480 
CB
 
	`c
(
i
, 
e
->
ödex
);

1481 
°d
::
li°
 <>::
ôî©‹
 
ô
;

1482 
°d
::
li°
 <>::
ôî©‹
 
ô_íd
 = 
n
->
íabÀd_å™sôi⁄s
[
i
].
	`íd
();

1483 
boﬁ
 
£ndc€«bÀd
 = 
Ál£
;

1484 
ô
 = 
n
->
íabÀd_å™sôi⁄s
[
i
].
	`begö
 (); ià!
ô_íd
; it++) {

1485 i‡(*
ô
 >
e
->
ödex
 ) {

1486 
£ndc€«bÀd
 = 
åue
;

1490 i‡(!
£ndc€«bÀd
) {

1491 
	`DR
–
°d
::
cout
 << "Födög P©h bëwì¿" << (
n
->
wûdˇrd
Ë<< "ánd " << 
c
 << "\n"; )

1493 
boﬁ
 
ovîèkög
 = (
c
.
_pid
 ==

1494 
	`GëCuºNode
()->
	`GëTønsôi⁄
(
n
->
wûdˇrd
)->

1495 
	`gë_cuº_m©chög
().
_pid
);

1496 
	`DR
–
°d
::
cout
 << "ovîèkög=" << 
ovîèkög
 << "\n"; )

1497 i‡(
ovîèkög
 ||

1498 
	`FödN⁄SídWaôP©h
 (
visôed
, 
n
->
wûdˇrd
, 
c
)) {

1500 
	`DR
–
°d
::
cout
 << 
n
->
wûdˇrd
 << "ánd " << 
c
 << "areÇot co-enabled\n"; )

1503 
	`DR
–
°d
::
cout
 << 
n
->
wûdˇrd
 << "ánd " << 
c
 << "are co-enabled\n"; )

1505 if(
¥ev_£nds
->
	`föd
(
c
Ë=¥ev_£nds->
	`íd
()) {

1506 
n
->
has_aux_c€«bÀd_£nds
 = 
åue
;

1507 
°d
::
li°
 <
CB
> *
£nds
 = &
aux_c€«bÀd_£nds
[
n
->
wûdˇrd
];

1508 
°d
::
li°
 <
CB
>::
ôî©‹
 
si
 = 
£nds
->
	`begö
();

1509 
°d
::
li°
 <
CB
>::
ôî©‹
 
sõ
 = 
£nds
->
	`íd
();

1510 
si
 !
sõ
 && *sò< 
c
) si++;

1511 if(
si
 =
sõ
 || *sò!
c
Ë
£nds
->
	`ö£π
(si, c);

1520 
i
 = 0; i < 
	`GëCuºNode
()->
	`NumProcs
(); i++) {

1521 
dñëe
 [] 
visôed
[
i
];

1523 
dñëe
 [] 
visôed
;

1524 
	`DR
–
°d
::
cout
 << " [FindCoEnabledSendsÉnd]\n"; )

1525 
	}
}

1527 
	gITªe
::
	$CÀ¨I¡îCB
 () {

1528 
Node
 *
n
 = 
	`GëCuºNode
 ();

1530 
i
 = 0 ; i < 
n
->
	`NumProcs
 (); i++) {

1531 
j
 = 0; j < 
n
->
_éi°
[
i
]->_éi°.
	`size
(); j++) {

1532 
°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî
;

1539 
n
->
_éi°
[
i
]->_éi°[
j
].
	`mod_öãr_cb
().
	`˛ór
();

1542 
	}
}

1544 
	gITªe
::
	$AddI¡îCB
 () {

1545 
°d
::
ve˘‹
 <
Node
 *>::
ôî©‹
 
ôî
;

1546 
°d
::
ve˘‹
 <
Node
 *>::
ôî©‹
 
ôî_íd
 = 
_¶i°
.
	`íd
 ();

1548 
ôî
 = 
_¶i°
.
	`begö
(); iã∏!
ôî_íd
; iter++) {

1549 i‡((*
ôî
)->
am∂e_£t
.
	`size
() == 0) {

1552 
°d
::
li°
 <
CB
> 
m£t
 = (*
ôî
)->
am∂e_£t
.
	`‰⁄t
();

1554 i‡(
m£t
.
	`size
() <= 1) {

1557 i‡(
m£t
.
	`size
() == 2) {

1558 
Envñ›e
 *
e
 = (*
ôî
)->
	`GëTønsôi⁄
 (
m£t
.
	`back
())->
	`GëEnvñ›e
 ();

1559 i‡((
e
->
func_id
 =
IRECV
 ||É->func_id =
RECV
) &&

1560 
e
->
§c
 =
WILDCARD
) {

1561 
	`GëCuºNode
()->
	`GëTønsôi⁄
(
m£t
.
	`back
())->
	`AddI¡îCB
(m£t.
	`‰⁄t
());

1566 
°d
::
li°
 <
CB
>::
ôî©‹
 
ô1
;

1567 
°d
::
li°
 <
CB
>::
ôî©‹
 
ô_íd
 = 
m£t
.
	`íd
();

1568 
boﬁ
 
⁄ly_£nds
 = 
åue
;

1569 
ô1
 = 
m£t
.
	`begö
(); it1 !
ô_íd
 ; it1++) {

1570 i‡(! (*
ôî
)->
	`GëTønsôi⁄
(*
ô1
)->
	`GëEnvñ›e
()->
	`isSídTy≥
())

1571 
⁄ly_£nds
 = 
Ál£
;

1573 i‡(
⁄ly_£nds
)

1576 
ô1
 = 
m£t
.
	`begö
(); it1 !
ô_íd
 ; it1++) {

1577 
°d
::
li°
 <
CB
>::
ôî©‹
 
ô2
;

1578 
°d
::
li°
 <
CB
>::
ôî©‹
 
ô2_íd
 = 
m£t
.
	`íd
();

1579 
ô2
 = 
m£t
.
	`begö
(); it2 !
ô2_íd
 ; it2++) {

1580 i‡(
ô2
 !
ô1
) {

1581 
	`GëCuºNode
()->
	`GëTønsôi⁄
(*
ô1
)->
	`AddI¡îCB
(*
ô2
);

1589 
	}
}

1597 
boﬁ
 
	gITªe
::
	$NextI¡îÀavög
 () {

1598 
	`DR
–
°d
::
cout
 << " [NextInterleaving begin]\n"; )

1599 
	`CÀ¨I¡îCB
();

1601 
i
 = 
dïth
+1;

1602 
	`as£π
(
i
 =(Ë
_¶i°
.
	`size
());

1620 
ﬁdDïth
 = 
dïth
;

1621 
œ°_node
 = 
	`GëCuºNode
 ();

1625 i‡(
ScheduÀr
::
_Ârs
) {

1626 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_RANDOM
Ë 
åue
;

1627 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_LEFT_MOST
Ë 
Ál£
;

1630 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_RANDOM
 ||ScheduÀr::_ex∂‹e_modê=
EXP_MODE_LEFT_MOST
)

1631  
Ál£
;

1635 
i
-- > 0) {

1637 
Node
 *
n
 = 
_¶i°
[
i
];

1638 i‡(!
n
->
am∂e_£t
.
	`em±y
()) {

1639 
	`DR
(

1640 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> >::
ôî©‹
 
ôî2
 = 
n
->
am∂e_£t
.
	`begö
();

1641 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> >::
ôî©‹
 
ôî_íd2
 = 
n
->
am∂e_£t
.
	`íd
();

1642 
°d
::
cout
 << "\t[" << 
i
 << "]ámple_set:\n";

1643 ; 
ôî2
!=
ôî_íd2
; iter2++) {

1644 
°d
::
li°
<
CB
>::
ôî©‹
 
li
 = 
ôî2
->
	`begö
();

1645 
°d
::
li°
<
CB
>::
ôî©‹
 
lõ
 = 
ôî2
->
	`íd
();

1646 
°d
::
cout
 << "\t\t";

1647 
li
 !
lõ
) {

1648 
°d
::
cout
 << *
li
;

1649 if(++
li
 =
lõ
) ;

1650 
°d
::
cout
 << " ";

1652 
°d
::
cout
 << "\n";

1655 
ôî2
 = 
n
->
am∂e_£t
.
	`begö
();

1656 ; 
ôî2
!=
ôî_íd2
; iter2++) {

1657 
°d
::
li°
<
CB
>::
ôî©‹
 
li
 = 
ôî2
->
	`begö
();

1658 
°d
::
li°
<
CB
>::
ôî©‹
 
lõ
 = 
ôî2
->
	`íd
();

1659 ; 
li
!=
lõ
;Üi++) {

1660 
°d
::
cout
 << "\t\t\t" << *
n
->
	`GëTønsôi⁄
(*
li
)->
	`GëEnvñ›e
() << "\n";

1665 
n
->
am∂e_£t
.
	`îa£
“->am∂e_£t.
	`begö
());

1668 
	`DR
(

1669 if(
n
->
	`isWûdˇrdNode
()) {

1671 
°d
::
cout
 << "\t\åecv: " << 
n
->
wûdˇrd
 << "\n";

1673 
°d
::
li°
 <
CB
> *
acs
 = &
aux_c€«bÀd_£nds
[
n
->
wûdˇrd
];

1674 
°d
::
£t
 <
CB
> *
ms
 = &
m©ched_£nds
[
n
->
wûdˇrd
];

1676 
°d
::
li°
 <
CB
>::
ôî©‹
 
li
 = 
acs
->
	`begö
();

1677 
°d
::
li°
 <
CB
>::
ôî©‹
 
lõ
 = 
acs
->
	`íd
();

1678 
°d
::
cout
 << "\t\taux_coenabled_sends:";

1679 
li
 !
lõ
) {

1680 
°d
::
cout
 << *
li
;

1681 if(++
li
 =
lõ
) ;

1682 
°d
::
cout
 << " ";

1684 
°d
::
cout
 << "\n";

1691 
°d
::
£t
 <
CB
>::
ôî©‹
 
si
 = 
ms
->
	`begö
();

1692 
°d
::
£t
 <
CB
>::
ôî©‹
 
sõ
 = 
ms
->
	`íd
();

1693 
°d
::
cout
 << "\t\tmatched_sends:";

1694 ; 
si
!=
sõ
; si++)

1695 
°d
::
cout
 << " " << *
si
;

1696 
°d
::
cout
 << "\n";

1699 i‡(!–
n
->
am∂e_£t
.
	`em±y
() && (

1700 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


1701 
ScheduÀr
::
_no_am∂e_£t_fix
 ? 
åue
 :

1703 (!
n
->
	`isWûdˇrdNode
() ||

1704 (
n
->
	`isWûdˇrdNode
(Ë&& 
aux_c€«bÀd_£nds
[n->
wûdˇrd
].
	`em±y
()))))) {

1706 #ifde‡
CONFIG_BOUNDED_MIXING


1707 i‡(
n
->
	`isWûdˇrdNode
(Ë&& 
ScheduÀr
::
_bound
 &&

1708 !
n
->
ex∑nd
 && 
ex∑nded
 < 
ScheduÀr
::
_bound
) {

1709 
n
->
ex∑nd
 = 
åue
;

1710 
ex∑nded
++;

1712 if(
ScheduÀr
::
_bound
 && 
n
->
ex∑nd
 || !Scheduler::_bound) {

1716 
dñëe
 
œ°_node
;

1726 
	`DR
–
°d
::
cout
 << " [NextInterleavingÉnd]\n"; )

1727  
åue
;

1728 #ifde‡
CONFIG_BOUNDED_MIXING


1734 if(
n
->
	`isWûdˇrdNode
()) {

1735 #ifde‡
CONFIG_BOUNDED_MIXING


1736 if(
ScheduÀr
::
_bound
 && 
n
->
ex∑nd
) {

1737 
ex∑nded
--;

1740 
m©ched_£nds
[
n
->
wûdˇrd
].
	`˛ór
();

1742 #i‚de‡
FIB


1743 
dñëe
 *(
_¶i°
.
	`íd
()-1);

1746 i‡(
dïth
 !
ﬁdDïth
) {

1747 
dñëe
 *(
_¶i°
.
	`íd
()-1);

1750 
_¶i°
.
	`p›_back
 ();

1751 
dïth
--;

1752 
i
 = ()
_¶i°
.
	`size
();

1754 
	`DR
–
°d
::
cout
 << " [NextInterleavingÉnd]\n"; )

1755  
Ál£
;

1756 
	}
}

1758 
	gITªe
::
	$ª£tDïth
 () {

1759 
dïth
 = 0;

1760 
size_t
 
i
 = 0; i < 
_¶i°
[
dïth
]->
_éi°
.
	`size
(); i ++) {

1761 
_¶i°
[
dïth
]->
_éi°
[
i
]->
œ°_m©ched
 = -1;

1763 
	}
}

1765 #ifde‡
FIB


1766 
	gNode
::
upd©eI¡îHB
 (
°d
::
li°
 <
CB
> &
l
) {

1767 
°d
::
li°
 <
CB
>::
ôî©‹
 
ôî
;

1768 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
l
.
íd
 ();

1770 
	gôî
 = 
l
.
begö
 (); iã∏!
ôî_íd
; iter++) {

1771 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî1
;

1772 
	g°d
::
li°
 <
CB
>::
ôî©‹
 
ôî1_íd
 = 
l
.
íd
 ();

1774 
	gôî1
 = 
l
.
begö
 (); iãr1 !
ôî1_íd
; iter1++) {

1775 
	g°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî2
, 
	gôî2_íd
;

1777 i‡(*
	gôî
 =*
ôî1
) {

1780 
Tønsôi⁄
 
	gt
 = 
_éi°
[
ôî1
->
_pid
]->_éi°[ôî1->
_ödex
];

1783 
	gôî2_íd
 = 
t
.
gë_öåa_cb
().
íd
 ();

1784 
	gôî2
 = 
t
.
gë_öåa_cb
().
begö
 (); iãr2 !
ôî2_íd
; iter2++) {

1785 
	g_éi°
[
ôî
->
_pid
]->_éi°[ôî->
_ödex
].

1787 
AddI¡îCB
(*
ôî2
);

1791 
	gôî2_íd
 = 
t
.
gë_öãr_cb
().
íd
 ();

1792 
	gôî2
 = 
t
.
gë_öãr_cb
().
begö
 (); iãr2 !
ôî2_íd
; iter2++) {

1793 
	g_éi°
[
ôî
->
_pid
]->_éi°[ôî->
_ödex
].

1794 
AddI¡îCB
(*
ôî2
);

1800 
	gITªe
::
	$födI¡îCB
 () {

1801 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ªvî£_ôî©‹
 
ôî
;

1802 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ªvî£_ôî©‹
 
ôî_íd
 = 
Æ_cuº
.
	`ªnd
 ();

1803 
Node
 *
n
 = 
	`GëCuºNode
();

1805 
ôî
 = 
Æ_cuº
.
	`rbegö
 (); iã∏!
ôî_íd
; iter++) {

1806 
n
->
	`upd©eI¡îHB
 (*
ôî
);

1808 
	}
}

1810 
boﬁ
 
	gITªe
::
visôed
 (
CB
 &
c
, 
°d
::
ve˘‹
<CB> &
l
) {

1811 
°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî
;

1812 
	g°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî_íd
 = 
l
.
íd
 ();

1814 
	gôî
 = 
l
.
begö
(); iã∏!
ôî_íd
; iter++) {

1815 i‡(
	gc
 =*
ôî
) {

1816  
åue
;

1819  
	gÁl£
;

1822 
boﬁ
 
	gITªe
::
födAdja˚¡
 (
CB
 &
ªs
, CB &
c
, 
°d
::
ve˘‹
<CB> &
l
) {

1823 
Tønsôi⁄
 
t
 = *
GëCuºNode
()->
GëTønsôi⁄
(
c
);

1824 
	g°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî
;

1825 
	g°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî_íd
 = 
t
.
gë_öåa_cb
().
íd
 ();

1827 
	gôî
 = 
t
.
gë_öåa_cb
().
begö
(); iã∏!
ôî_íd
; iter++) {

1828 i‡(!
visôed
(*
ôî
,
l
Ë&& 
	gôî
->
	g_pid
 != -1) {

1829 
ªs
 = *
ôî
;

1830  
	gåue
;

1834 
	gôî_íd
 = 
t
.
gë_öãr_cb
().
íd
();

1835 
	gôî
 = 
t
.
gë_öãr_cb
().
begö
(); iã∏!
ôî_íd
; iter++) {

1836 i‡(!
visôed
(*
ôî
,
l
Ë&& (
	gôî
->
	g_pid
 != -1)) {

1837 
ªs
 = *
ôî
;

1838  
	gåue
;

1841  
	gÁl£
;

1844 
	gITªe
::
checkB¨rõr
(
CB
 &
c
, CB &
c1
, 
°d
::
ve˘‹
<CB> &
s
)

1846 
Node
 *
n
 = 
GëCuºNode
();

1847 
boﬁ
 
	gcheck_Êag
 = 
Ál£
;

1848 
	g°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî
;

1849 
	g°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî_íd
 = 
s
.
íd
 ();

1851 i‡(
	gn
->
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
isSídTy≥
() &&

1852 
	gn
->
GëTønsôi⁄
(
c1
)->
GëEnvñ›e
()->
isRecvTy≥
() &&

1853 
	gn
->
GëTønsôi⁄
(
c1
)->
GëEnvñ›e
()->
	g§c
 =
WILDCARD
 &&

1854 
n
->
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
de°
 ==

1855 
n
->
GëTønsôi⁄
(
c1
)->
GëEnvñ›e
()->
id
) {

1858 
ôî
 = 
s
.
begö
 (); 
	gôî
 !
ôî_íd
; iter++)

1860 if(*
	gôî
 =
c1
) {

1861 
check_Êag
 = 
Ál£
;

1864 if(*
	gôî
 =
c
) {

1865 
check_Êag
 = 
åue
;

1873 
	gbli°
.
push_back
(*
ôî
);

1880 if(
	gn
->
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
isRecvTy≥
() &&

1881 
	gn
->
GëTønsôi⁄
(
c1
)->
GëEnvñ›e
()->
isSídTy≥
() &&

1882 
	gn
->
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
	g§c
 =
WILDCARD
 &&

1883 
n
->
GëTønsôi⁄
(
c1
)->
GëEnvñ›e
()->
de°
 ==

1884 
n
->
GëTønsôi⁄
(
c
)->
GëEnvñ›e
()->
id
) {

1886 
ôî
 = 
s
.
begö
(); 
	gôî
 !
ôî_íd
; iter++)

1888 i‡(*
	gôî
 =
c1
) {

1889 
check_Êag
 = 
Ál£
;

1892 i‡(*
	gôî
 =
c
) {

1893 
check_Êag
 = 
åue
;

1895 i‡(
	gn
->
GëTønsôi⁄
(*
ôî
)->
GëEnvñ›e
()->
	gfunc_id
 =
BARRIER
 &&

1896 !
visôed
(*
ôî
, 
bli°
Ë&& 
	gcheck_Êag
) {

1899 
	gbli°
.
push_back
(*
ôî
);

1910 
	gITªe
::
	$Dfs
 (
CB
 &
c
) {

1911 
°d
::
ve˘‹
<
CB
> 
s
;

1912 
°d
::
ve˘‹
<
CB
> 
visôed
;

1914 
s
.
	`push_back
(
c
);

1915 
visôed
.
	`push_back
(
c
);

1916 !
s
.
	`em±y
()) {

1917 
CB
 
c1
 = 
s
.
	`back
();

1919 
	`checkB¨rõr
(
c
, 
c1
, 
s
);

1921 
CB
 
adj
;

1922 if(
	`födAdja˚¡
(
adj
, 
c1
, 
visôed
)) {

1924 
visôed
.
	`push_back
(
adj
);

1925 
s
.
	`push_back
(
adj
);

1927 
s
.
	`p›_back
();

1930 
	}
}

1932 
	gITªe
::
f‹Dfs
 (
°d
::
li°
<
CB
> &
l
) {

1933 
°d
::
li°
<
CB
>::
ôî©‹
 
ôî
;

1934 
	g°d
::
li°
<
CB
>::
ôî©‹
 
ôî_íd
 = 
l
.
íd
 ();

1936 
	gôî
 = 
l
.
begö
(); iã∏!
ôî_íd
; iter++) {

1937 
Tønsôi⁄
 
	gt
 = *
GëCuºNode
()->
GëTønsôi⁄
(*
ôî
);

1938 i‡(
	gt
.
GëEnvñ›e
()->
isRecvTy≥
(Ë&&Å.GëEnvñ›e()->
	g§c
 =
WILDCARD
)

1940 
Dfs
(*
ôî
);

1945 
	gITªe
::
	$gëB¨rõrLi°
 () {

1946 
boﬁ
 
Êag
 = 
Ál£
;

1947 
°d
::
li°
<
CB
> 
ãmp
;

1948 
°d
::
ve˘‹
<
CB
>::
ôî©‹
 
ôî
, 
ôî_íd
;

1949 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî1
, 
ôî1_íd
;

1950 
°d
::
li°
<
CB
>::
ôî©‹
 
ôî2
, 
ôî2_íd
;

1952 
ôî_íd
 = 
bli°
.
	`íd
 ();

1953 
ôî
 = 
bli°
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

1955 
ôî1_íd
 = 
Æ_cuº
.
	`íd
 ();

1956 
ôî1
 = 
Æ_cuº
.
	`begö
 (); iãr1 !
ôî1_íd
; iter1++) {

1958 
ôî2_íd
 = 
ôî1
->
	`íd
 ();

1959 
ôî2
 = 
ôî1
->
	`begö
 (); iãr2 !
ôî2_íd
; iter2++) {

1960 if(*
ôî2
 =*
ôî
) {

1961 
Êag
 = 
åue
;

1966 if(
Êag
)

1968 
ôî2
 = 
ôî1
->
	`begö
 (); iãr2 !
ôî2_íd
; iter2++) {

1972 
ãmp
.
	`push_back
(*
ôî2
);

1977 
Êag
 = 
Ál£
;

1979 if(!
	`¥e£¡
(
ãmp
, 
FRBli°
Ë&& (ãmp.
	`size
() != 0))

1982 
FRBli°
.
	`push_back
(
ãmp
);

1988 
	}
}

1990 
boﬁ
 
	gITªe
::
¥e£¡
(
°d
::
li°
<
CB
> &
l
, std::
ve˘‹
<°d::li°<CB> > &
b
) {

1991 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî
, 
	gôî_íd
;

1992 
	g°d
::
li°
<
CB
>::
ôî©‹
 
ôî2
, 
	gôî2_íd
;

1994 i‡(
	gl
.
em±y
 ()) {

1995  
	gÁl£
;

1997 
CB
 
	gc
 = 
l
.
‰⁄t
();

1999 
	gôî_íd
 = 
b
.
íd
 ();

2000 
	gôî
 = 
b
.
begö
 (); iã∏!
ôî_íd
; iter++) {

2001 
	gôî2_íd
 = 
ôî
->
íd
 ();

2002 
	gôî2
 = 
ôî
->
begö
 (); iãr2 !
ôî2_íd
; iter2++) {

2003 if(
	gc
 =*
ôî2
) {

2004  
åue
;

2008  
	gÁl£
;

2011 
	gITªe
::
	$FödRñB¨rõrs
()

2013 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî
;

2014 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî_íd
 = 
Æ_cuº
.
	`íd
 ();

2017 
ôî
 = 
Æ_cuº
.
	`begö
 (); iã∏!
ôî_íd
; iter++)

2019 
	`f‹Dfs
(*
ôî
);

2027 
	}
}

2030 
	gITªe
::
	$¥ötTy≥Mism©ches
()

2032 if(
ScheduÀr
::
_mism©chLog
.
	`°r
().
	`Àngth
() != 0){

2033 
ScheduÀr
::
_logfûe
 << "[TYPEMISMATCH]" << 
°d
::
ídl
;

2034 
ScheduÀr
::
_logfûe
 << ScheduÀr::
_mism©chLog
.
	`°r
();

2035 
°d
::
cout
 << "-----------------------------------------\n";

2036 
°d
::
cout
 << "WARNING - The following calls don't shareÅhe same dataÅype withÅheir matching calls:\n";

2037 
°d
::
cout
 << 
ScheduÀr
::
_mism©chLog
.
	`°r
();

2039 
	}
}

2043 
	gITªe
::
	$gëFIB
()

2045 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî
;

2046 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî_íd
 = 
Æ_cuº
.
	`íd
 ();

2048 
ôî
 = 
Æ_cuº
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

2049 
CB
 
c
 = 
ôî
->
	`‰⁄t
 ();

2050 i‡(
œ°_node
->
	`GëTønsôi⁄
(
c
)->
	`GëEnvñ›e
()->
func_id
 =
BARRIER
) {

2051 i‡(!
	`¥e£¡
(*
ôî
, 
FRBli°
)) {

2052 
FIBli°
.
	`push_back
(*
ôî
);

2056 
	}
}

2058 
	gITªe
::
	$¥ötRñB¨rõrs
()

2060 
°d
::
ve˘‹
<°d::
li°
<
CB
> >::
ôî©‹
 
ôî
, 
ôî_íd
;

2061 
°d
::
li°
<
CB
>::
ôî©‹
 
ôî2
, 
ôî2_íd
;

2062 
i
;

2064 
	`gëB¨rõrLi°
();

2065 i‡(!
FRBli°
.
	`em±y
 ()) {

2066 
°d
::
cout
 << "\n";

2067 
°d
::
cout
<< "List of Relevant Barriers - None should beÑemoved fromÅheÖrogram:\n";

2068 
°d
::
cout
<< " FRBÜi° size: " << 
FRBli°
.
	`size
() << "\n";

2069 
ôî_íd
 = 
FRBli°
.
	`íd
 ();

2070 
i
 = 1, 
ôî
 = 
FRBli°
.
	`begö
 (); iã∏!
ôî_íd
; i++, iter++) {

2071 
°d
::
cout
 << "M©ch Së: " << 
i
 << "\n";

2072 
ôî2_íd
 = 
ôî
->
	`íd
 ();

2073 
ôî2
 = 
ôî
->
	`begö
(); iãr2 !
ôî2_íd
; iter2++) {

2074 
Envñ›e
 *
ív
 = 
œ°_node
->
	`GëTønsôi⁄
 (*
ôî2
)->
	`GëEnvñ›e
 ();

2075 
°d
::
cout
 << 
ôî2
->
_pid
 << ": " << 
ív
->
fûíame
 << ":"

2076 << 
ív
->
löíumbî
 << "\n";

2078 
°d
::
cout
 << "\n";

2080 
°d
::
cout
 << "\n";

2083 
	`gëFIB
();

2084 i‡(!
FIBli°
.
	`em±y
 (Ë&& !
ScheduÀr
::
_limô_ouçut
) {

2085 
°d
::
cout
 << "\n";

2086 
°d
::
cout
 << "List of Irrelevant Barriers - If wantÅoÑemove,Ñemoveá complete match set:\n";

2087 
ôî_íd
 = 
FIBli°
.
	`íd
 ();

2090 
ScheduÀr
::
_logfûe
<< "[FIB]" << 
°d
::
ídl
;

2092 
i
 = 1, 
ôî
 = 
FIBli°
.
	`begö
 (); iã∏!
ôî_íd
; i++, iter++) {

2093 
°d
::
cout
 << "M©ch Së: " << 
i
 << "\n";

2094 
ôî2_íd
 = 
ôî
->
	`íd
 ();

2095 
ôî2
 = 
ôî
->
	`begö
(); iãr2 !
ôî2_íd
; iter2++) {

2096 
Envñ›e
 *
ív
 = 
œ°_node
->
	`GëTønsôi⁄
 (*
ôî2
)->
	`GëEnvñ›e
 ();

2097 
°d
::
cout
 << 
ôî2
->
_pid
 << ": " << 
ív
->
fûíame
 << ":"

2098 << 
ív
->
löíumbî
 << "\n";

2100 
ScheduÀr
::
_logfûe
 << 
ív
->
fûíame
 << " "

2101 << 
ív
->
löíumbî
 << 
°d
::
ídl
;

2103 
°d
::
cout
 << "\n";

2105 
°d
::
cout
 << "\n";

2106 } if(!
ScheduÀr
::
_limô_ouçut
){

2107 
°d
::
cout
 << "\n";

2108 
°d
::
cout
 << "There wereÇo Irrelevant Barriers!\n";

2110 
	}
}

	@scheduler/InterleavingTree.hpp

21 #i‚de‡
_INTERLEAVING_TREE_HPP


22 
	#_INTERLEAVING_TREE_HPP


	)

24 
	#CONSOLE_OUTPUT_THRESHOLD
 200

	)

26 
	~<ve˘‹
>

27 
	~<£t
>

28 
	~<ôî©‹
>

29 
	~"Tønsôi⁄Li°.hµ
"

30 
	~<li°
>

31 
	~<ˇs£π
>

32 #i‚de‡
WIN32


33 
	~<sys/ty≥s.h
>

34 
	~<sig«l.h
>

37 
	eNTYPE
 {

38 
	mGENERAL_NODE
,

39 
	mWILDCARD_RECV_NODE
,

40 
	mWILDCARD_PROBE_NODE
,

41 
	mDEADLOCK_NODE


44 ˛as†
	cNode
 {

46 
	mpublic
:

47 
Node
 ();

48 
Node
 (
num_¥ocs
);

52 
Node
 (Node &);

53 
Node
 (Nodê&, 
boﬁ
 
c›yTL
);

54 ~
Node
();

56 
	mNode
& 
	m›î©‹
(
Node
 &
r
);

58 
ölöe
 
NumProcs
 ();

59 
GëLevñ
 ();

60 
ölöe
 
boﬁ
 
	$isWûdˇrdNode
() {

61  
ty≥
 =
WILDCARD_RECV_NODE
 ||Åy≥ =
WILDCARD_PROBE_NODE
;

63 
	`PrötLog
 ();

64 
	`gëTŸÆMpiCÆls
();

65 
boﬁ
 
	`AŒAn˚°‹sM©ched
 (
CB
 &
c
, 
°d
::
ve˘‹
<> &
l
);

66 
boﬁ
 
	`AnyAn˚°‹M©ched
 (
CB
 &
c
, 
°d
::
ve˘‹
<> &
l
);

67 
	`GëE«bÀdTønsôi⁄sO≥nMP
 (
°d
::
ve˘‹
 <°d::
li°
 <> >&);

68 
	`GëE«bÀdTønsôi⁄sSögÀThªaded
 (
°d
::
ve˘‹
 <°d::
li°
 <> >&);

69 
	`GëE«bÀdTønsôi⁄sThªad
 (
pid
, 
°d
::
li°
<> *
l
);

70 
boﬁ
 
	`GëCﬁÀ˘iveAm∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, 
cﬁÀ˘ive
);

71 
	`GëWaô‹Te°Am∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
);

72 
boﬁ
 
	`gëN⁄WûdˇrdRe˚ive
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
);

74 
boﬁ
 
	`gëM©chögSíd
 (
CB
 &
ªs
, 
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, CB &
c
);

75 
boﬁ
 
	`gëAŒM©chögSíds
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
, 
CB
 &
c
,

76 
°d
::
ve˘‹
 <°d::
li°
 <
CB
> > &);

77 
	`GëÆlSíds
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
);

78 
	`GëRe˚iveAm∂e
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
);

79 
boﬁ
 
	`GëAm∂eSë
 ();

80 
ölöe
 
	`£tITªe
(
ITªe
* 
√w_ôªe
);

81 
ölöe
 
ITªe
* 
	`gëITªe
();

83 
Tønsôi⁄
 *
	`GëTønsôi⁄
 (
CB
 &
c
);

84 
Tønsôi⁄
 *
	`GëTønsôi⁄
 (, );

86 #ifde‡
USE_OPENMP


87 
ölöe
 
	`GëE«bÀdTønsôi⁄s
 (
°d
::
ve˘‹
 <°d::
li°
 <> > &
l
) {

88 i‡(
ScheduÀr
::
_›ímp
) {

89 
	`GëE«bÀdTønsôi⁄sO≥nMP
(
l
);

91 
	`GëE«bÀdTønsôi⁄sSögÀThªaded
(
l
);

93 
	}
}

95 
	#GëE«bÀdTønsôi⁄s
 
GëE«bÀdTønsôi⁄sSögÀThªaded


	)

98 #ifde‡
FIB


99 
upd©eI¡îHB
 (
°d
::
li°
 <
CB
> &
l
);

101 
‰õnd
 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gNode
 &
	gn
);

102 
dìpC›y
();

104 
	g°d
::
ve˘‹
 <
Node
 *> 
chûdªn
;

106 
	g°d
::
ve˘‹
 <
Tønsôi⁄Li°
*> 
_éi°
;

107 
boﬁ
 
	ghas_chûd
;

108 
boﬁ
 
	ghas_aux_c€«bÀd_£nds
;

109 
boﬁ
 
	géi°_dóŒoc
;

110 
CB
 
	gwûdˇrd
;

111 
NTYPE
 
	gty≥
;

112 
	g°d
::
ve˘‹
 <
°d
::
li°
 <
CB
> > 
am∂e_£t
;

113 
	g°d
::
ve˘‹
 <
°d
::
li°
 <> > 
íabÀd_å™sôi⁄s
;

114 
	g°d
::
ve˘‹
 <
°d
::
li°
 <
CB
> > 
Ÿhî_wc_m©ches
;

115 #ifde‡
CONFIG_BOUNDED_MIXING


116 
boﬁ
 
	gex∑nd
;

119 
	g¥iv©e
:

120 
_Àvñ
;

121 
	g_num_¥ocs
;

122 
ITªe
* 
	gôªe
;

125 * 
GëE«bÀdTønsôi⁄sThªadC
 (*);

126 
¥öt
(
°d
::
ve˘‹
<°d::
li°
<> >&);

127 
¥öt
(
°d
::
ve˘‹
<°d::
li°
<
CB
 *> >&);

128 
FªeMem‹y
 (
°d
::
li°
<
CB
*> &
l
);

129 
	sthªad_d©a
 {

130 
Node
 *
	mnode
;

131 
	mpid
;

132 
	m°d
::
li°
<> * 
l
;

134 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gNode
 &
	gn
);

137 ˛as†
	cITªe
 {

138 
	mpublic
:

139 
ITªe
 (
Node
 *, 
°d
::
°rög
);

140 
CHECK
 (
SîvîSockë
 &, 
°d
::
li°
 <> &);

141 
Node
 *
GëCuºNode
 ();

142 
boﬁ
 
NextI¡îÀavög
 ();

143 
ª£tDïth
 ();

144 
Re£tM©chögInfo
();

145 
¥ötTy≥Mism©ches
();

146 
	m°d
::
li°
<
CB
> 
mism©chTy≥Li°
;

148 
	$GëCuºítDïth
(Ë{  
dïth
; }

150 #ifde‡
FIB


151 
	`Pröt
 ();

152 
boﬁ
 
	`visôed
 (
CB
& 
c
, 
°d
::
ve˘‹
<CB> &);

153 
boﬁ
 
	`födAdja˚¡
 (
CB
 &
ªs
, CB &
c
, 
°d
::
ve˘‹
<CB> &);

154 
	`födI¡îCB
 ();

155 
	`Dfs
 (
CB
&);

156 
	`f‹Dfs
 (
°d
::
li°
<
CB
> &);

157 
	`FödRñB¨rõrs
 ();

158 
	`¥ötRñB¨rõrs
 ();

159 
	`gëB¨rõrLi°
 ();

160 
	`checkB¨rõr
 (
CB
 &
c
, CB &
c1
, 
°d
::
ve˘‹
<CB>&);

161 
	$GëSli°Size
 (Ë{  (Ë
_¶i°
.
	`size
(); 
	}
}

162 
Node
 *
	gœ°_node
;

163 
boﬁ
 
¥e£¡
 (
°d
::
li°
<
CB
>&, std::
ve˘‹
<std::list<CB> >&);

164 
gëFIB
 ();

167 
	g°d
::
ve˘‹
 <
°d
::
li°
<
CB
> > 
Æ_cuº
;

168 
	g°d
::
ve˘‹
 <
°d
::
li°
<
CB
> > 
FRBli°
;

169 
	g°d
::
ve˘‹
 <
°d
::
li°
<
CB
> > 
FIBli°
;

170 
	g°d
::
ve˘‹
 <
CB
> 
bli°
;

173 
Pro˚ssI¡îÀavög
();

175 
	g°d
::
ve˘‹
 <
boﬁ
* > 
is_m©ched
;

176 
	g°d
::
ve˘‹
 <
boﬁ
* > 
is_issued
;

177 * 
	gœ°_m©ched
;

178 
	g°d
::
m≠
 <
CB
, std::
li°
 <CB> > 
aux_c€«bÀd_£nds
;

179 
	g°d
::
m≠
 <
CB
, std::
£t
 <CB> > 
m©ched_£nds
;

180 #ifde‡
CONFIG_BOUNDED_MIXING


181 
	gex∑nded
;

185 
boﬁ
 *
	g_is_exÆl_mode
;

188 
	g¥iv©e
:

189 
dïth
;

190 
boﬁ
 
	ghave_wûdˇrd
;

191 
	g°d
::
°rög
 
≤ame
;

192 
	g°d
::
ve˘‹
 <
Node
 *> 
_¶i°
;

193 c⁄° 
	gMAX_TRANSITIONS
 = 500000;

194 
AddI¡îCB
();

195 
CÀ¨I¡îCB
();

196 
FödCoE«bÀdSíds
();

197 
boﬁ
 
FödN⁄SídWaôP©h
(boﬁ **
visôed
, 
CB
 &
§c
, CB &
de°
);

198 
boﬁ
 
födSídOfThisWaô
(
CB
& 
ªs
, CB& 
c
);

200 
size_t
 
gëMaxTli°Size
();

	@scheduler/MpiProc.cpp

21 
	~"MpiProc.hµ
"

24 
	gMpiProc
::
	$MpiProc
 (
id
Ë: 
	`_ªad_√xt_ív
 (
åue
), 
	`_cou¡
 (0), 
	`_is£À˘
 (
Ál£
), 
	$_id
 (
id
) {

26 
	}
}

28 
	gMpiProc
::
	$Id
 () {

29  
_id
;

30 
	}
}

	@scheduler/MpiProc.hpp

21 #i‚de‡
_MPI_PROC_HPP


22 
	#_MPI_PROC_HPP


	)

24 
	~"Envñ›e.hµ
"

32 
	mRUNNING
,

33 
	mBLOCKED_ON_SSEND
,

34 
	mBLOCKED_ON_RECV
,

35 
	mBLOCKED_ON_PROBE
,

36 
	mBLOCKED_ON_SENDREVC
,

37 
	mBLOCKED_ON_BARRIER
,

38 
	mBLOCKED_ON_WIN_LOCK
,

39 
	mBLOCKED_ON_WIN_UNLOCK
,

40 
	mBLOCKED_ON_WIN_FREE
,

41 
	mDONE


42 } 
	tProcSètus
;

50 ˛as†
	cMpiProc
 {

52 
	mpublic
:

56 
MpiProc
 (
id
);

61 
Id
 ();

63 
boﬁ
 
	m_ªad_√xt_ív
;

64 
Envñ›e
 *
	m_ív
;

65 
	m_cou¡
;

66 
boﬁ
 
	m_is£À˘
;

67 
	m¥iv©e
:

68 
_id
;

	@scheduler/Scheduler.cpp

21 
	~"ScheduÀr.hµ
"

22 
	~<sys/ty≥s.h
>

23 #i‚de‡
WIN32


24 
	~<sys/£À˘.h
>

25 
	~<sys/time.h
>

27 
	~<f°ªam
>

28 
	~<s°ªam
>

29 
	~<ve˘‹
>

31 
	~<˘ime
>

33 
	~"I¡îÀavögTªe.hµ
"

35 
	#ISP_START_SAMPLING
 2

	)

36 
	#ISP_END_SAMPLING
 3

	)

39 #ifde‡
_MSC_VER


40 #¥agm®
w¨nög
–
dißbÀ
 : 4127 )

43 
ScheduÀr
 * 
	gScheduÀr
::
_ö°™˚
 = 
NULL
;

47 
	g°d
::
°rög
 
ScheduÀr
::
_num_¥ocs
 = "";

48 
	g°d
::
°rög
 
ScheduÀr
::
_‚ame
 = "";

49 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ScheduÀr
::
_Árgs
 = std::vector<std::string>();

50 
	g°d
::
°rög
 
ScheduÀr
::
_p‹t
 = "";

51 
	g°d
::
of°ªam
 
ScheduÀr
::
_logfûe
;

52 
	g°d
::
°rög°ªam
 
ScheduÀr
::
_mism©chLog
;

53 
	g°d
::
°rög
 
ScheduÀr
::
_£rvî
 = "";

54 
boﬁ
 
	gScheduÀr
::
_£nd_block
 = 
Ál£
;

55 
boﬁ
 
	gScheduÀr
::
_mpiˇŒs
 = 
Ál£
;

56 
boﬁ
 
	gScheduÀr
::
_vîbo£
 = 
Ál£
;

57 
boﬁ
 
	gScheduÀr
::
_quõt
 = 
Ál£
;

58 
boﬁ
 
	gScheduÀr
::
_unix_sockës
 = 
Ál£
;

59 
	gScheduÀr
::
_ªp‹t_¥ogªss
 = 0;

60 
boﬁ
 
	gScheduÀr
::
_fib
 = 
Ál£
;

61 
boﬁ
 
	gScheduÀr
::
_›ímp
 = 
Ál£
;

62 
boﬁ
 
	gScheduÀr
::
_ív_⁄ly
 = 
Ál£
;

63 
boﬁ
 
	gScheduÀr
::
_¥obed
 = 
Ál£
;

64 
boﬁ
 
	gScheduÀr
::
_b©ch_mode
 = 
Ál£
;

65 
	gScheduÀr
::
öãæóvögs
 = 0;

66 
ã_Exp_Mode
 
	gScheduÀr
::
_ex∂‹e_mode
 = 
EXP_MODE_ALL
;

67 
	gScheduÀr
::
_ex∂‹e_some
 = 0;

68 
	g°d
::
ve˘‹
<>* 
ScheduÀr
::
_ex∂‹e_Æl
 = 
NULL
;

69 
	g°d
::
ve˘‹
<>* 
ScheduÀr
::
_ex∂‹e_øndom
 = 
NULL
;

70 
	g°d
::
ve˘‹
<>* 
ScheduÀr
::
_ex∂‹e_À·_mo°
 = 
NULL
;

71 
boﬁ
 
	gScheduÀr
::
_°›_©_dódlock
 = 
Ál£
;

72 
boﬁ
 
	gScheduÀr
::
_ju°_dód_lock
 = 
Ál£
;

73 
boﬁ
 
	gScheduÀr
::
_dódlock_found
 = 
Ál£
;

74 
boﬁ
 
	gScheduÀr
::
_∑øm_£t
 = 
Ál£
;

75 
	gScheduÀr
::
_îr‹no
 = 0;

76 
boﬁ
 
	gScheduÀr
::
_debug
 = 
Ál£
;

77 
boﬁ
 
	gScheduÀr
::
_no_am∂e_£t_fix
 = 
Ál£
;

78 
	gScheduÀr
::
_bound
 = 0;

79 
boﬁ
 
	gScheduÀr
::
_limô_ouçut
 = 
Ál£
;

81 
boﬁ
 
	gScheduÀr
::
_Ârs
;

84 
fd_£t
 
	gScheduÀr
::
_fds
;

85 
SOCKET
 
	gScheduÀr
::
_lfd
 = 0;

86 
	g°d
::
m≠
 <
SOCKET
, > 
	gScheduÀr
::
_fd_id_m≠
;

92 
	g°d
::
ve˘‹
 <
MpiProc
 *> 
ScheduÀr
::
_runQ
;

93 
Node
 *
	gScheduÀr
::
roŸ
 = 
NULL
;

95 
ScheduÀr
 * 
	gScheduÀr
::
	$GëIn°™˚
 () {

97 
	`as£π
 (
_∑øm_£t
);

102 i‡(
_ö°™˚
 !
NULL
) {

103  
_ö°™˚
;

105 
_ö°™˚
 = 
√w
 
	`ScheduÀr
 ();

106 i‡(
_îr‹no
 != 0) {

107 
dñëe
 
_ö°™˚
;

108 
	`exô
 (
_îr‹no
);

110  
_ö°™˚
;

111 
	}
}

113 
	gScheduÀr
::
SëP¨ams
 (
°d
::
°rög
 
p‹t
, std::°rög 
num_˛õ¡s
,

114 
°d
::
°rög
 
£rvî
, 
boﬁ
 
£nd_block
,

115 
°d
::
°rög
 
‚ame
, std::°rög 
logfûe
,

116 
°d
::
ve˘‹
<°d::
°rög
> 
Árgs
,

117 
boﬁ
 
mpiˇŒs
, boﬁ 
vîbo£
, boﬁ 
quõt
,

118 
boﬁ
 
unix_sockës
, 
ªp‹t_¥ogªss
,

119 
boﬁ
 
fib
, boﬁ 
›ímp
, boﬁ 
ív_⁄ly
,

120 
boﬁ
 
b©ch_mode
, boﬁ 
°›_©_dódlock
,

121 
ã_Exp_Mode
 
ex∂‹e_mode
, 
ex∂‹e_some
,

122 
°d
::
ve˘‹
<> *
ex∂‹e_Æl
,

123 
°d
::
ve˘‹
<> *
ex∂‹e_øndom
,

124 
°d
::
ve˘‹
<> *
ex∂‹e_À·_mo°
,

125 
boﬁ
 
debug
, boﬁ 
no_am∂e_£t_fix
,

126 
bound
, 
boﬁ
 
limô_ouçut


128 , 
boﬁ
 
Ârs


132 
	g_∑øm_£t
 = 
åue
;

133 
	g_p‹t
 = 
p‹t
;

134 
	g_num_¥ocs
 = 
num_˛õ¡s
;

135 
	g_£rvî
 = 
£rvî
;

136 
	g_£nd_block
 = 
£nd_block
;

137 
	g_‚ame
 = 
‚ame
;

138 
	g_Árgs
 = 
Árgs
;

139 
	g_mpiˇŒs
 = 
mpiˇŒs
;

140 
	g_vîbo£
 = 
vîbo£
;

141 
	g_quõt
 = 
quõt
;

142 
	g_unix_sockës
 = 
unix_sockës
;

143 
	g_ªp‹t_¥ogªss
 = 
ªp‹t_¥ogªss
;

144 
	g_fib
 = 
fib
;

145 
	g_›ímp
 = 
›ímp
;

146 
	g_ív_⁄ly
 = 
ív_⁄ly
;

147 
	g_b©ch_mode
 = 
b©ch_mode
;

148 
	g_°›_©_dódlock
 = 
°›_©_dódlock
;

149 
	g_ex∂‹e_mode
 = 
ex∂‹e_mode
;

150 
	g_ex∂‹e_some
 = 
ex∂‹e_some
;

151 
	g_ex∂‹e_Æl
 = 
ex∂‹e_Æl
;

152 
	g_ex∂‹e_øndom
 = 
ex∂‹e_øndom
;

153 
	g_ex∂‹e_À·_mo°
 = 
ex∂‹e_À·_mo°
;

154 
	g_debug
 = 
debug
;

155 
	g_no_am∂e_£t_fix
 = 
no_am∂e_£t_fix
;

156 
	g_bound
 = 
bound
;

157 
	g_limô_ouçut
 = 
limô_ouçut
;

159 
	g_Ârs
 = 
Ârs
;

163 
	g_logfûe
.
›í
 (
logfûe
.
c_°r
());

164 i‡(
	glogfûe
 !"" && ! 
_logfûe
.
is_›í
()) {

165 i‡(!
quõt
) {

166 
°d
::
cout
 << "U«bÀÅÿ›í fûê" << 
logfûe
 << "\n";

168 
exô
 (20);

170 
	g_logfûe
 << 
	gnum_˛õ¡s
 << "\n";

174 
	gScheduÀr
::
	$ScheduÀr
 () :

175 
	`SîvîSockë
 (
	`©oi
(
_p‹t
.
	`c_°r
()),©oi(
_num_¥ocs
.c_str()),

176 
_unix_sockës
, 
_b©ch_mode
), 
	$‹dî_id
(1) {

178 
_îr‹no
 = 
	`Sèπ
 ();

179 i‡(
_îr‹no
 != 0) {

180 i‡(!
_quõt
) {

181 
_îr‹no
) {

183 
°d
::
cout
 << "Server unableÅo open Socket!\n";

186 
°d
::
cout
 << "Server unableÅo bindÅoÖort. TheÖort mayálready be in use.\n";

189 
°d
::
cout
 << "Server unableÅoÜisten onÅhe socket\n";

196 
	`SèπClõ¡s
 ();

198 
_îr‹no
 = 
	`Ac˚±
 ();

199 i‡(
_îr‹no
 != 0) {

200 i‡(!
_quõt
) {

201 
_îr‹no
) {

203 
°d
::
cout
 << "Server unableÅoáccept\n";

206 
°d
::
cout
 << "ErrorÑeading from socket in server\n";

213 
	`FD_ZERO
 (&
_fds
);

214 
_lfd
 = 0;

215 
i
 = 0 ; i < 
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()); i++) {

216 
SOCKET
 
fd
 = 
	`GëFD
 (
i
);

217 
	`FD_SET
 (
fd
, &
_fds
);

218 
_fd_id_m≠
[
fd
] = 
i
;

219 i‡(
fd
 > 
_lfd
) {

220 
_lfd
 = 
fd
;

224 
ô
 = 
√w
 
	`ITªe
 (Çew 
	`Node
 (
	`©oi
(
_num_¥ocs
.
	`c_°r
 ())), 
	`ProgName
());

231 
i
 = 0 ; i < 
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()); i++) {

232 
_runQ
.
	`push_back
 (
√w
 
	`MpiProc
 (
i
));

236 
ô
->
_is_exÆl_mode
 = (
boﬁ
*Ë
	`mÆloc
((boﬁ)*
	`©oi
(
_num_¥ocs
.
	`c_°r
()));

237 
i
 = 0 ; i < 
	`©oi
(
_num_¥ocs
.
	`c_°r
()Ë; i++Ë
ô
->
_is_exÆl_mode
[i] = 
Ál£
;

239 
	}
}

241 
	g°d
::
°rög
 
ScheduÀr
::
	$ProgName
 () {

243 
°d
::
°rög
::
size_ty≥
 
pos
 = 
_‚ame
.
	`föd_œ°_of
 ("/", _‚ame.
	`size
 ()-1);

244 i‡(
pos
 =
°d
::
°rög
::
≈os
) {

245  
_‚ame
;

247  
_‚ame
.
	`sub°r
 (
pos
+1, _‚ame.
	`size
 ()-1);

248 
	}
}

250 
	gScheduÀr
::
	$SèπClõ¡s
 () {

251 
°d
::
ve˘‹
<c⁄° *> 
cmd
;

253 
öãæóvögs
++;

254 c⁄° *
u£_mpúun_ív
 = 
	`gëív
("USE_MPIRUN");

255 
boﬁ
 
u£_mpúun
 = 
u£_mpúun_ív
 && !
	`°rcmp
(use_mpirun_env, "true");

257 i‡(
_b©ch_mode
) {

258 
°d
::
cout
 << "PÀa£ÜaunchÅhê˛õ¡†⁄Åhê˛u°î wôhÅhêfﬁlowög comm™d:" << std::
ídl
;

259 i‡(
u£_mpúun
) {

260 
°d
::
cout
 << " mpirun ";

262 
°d
::
cout
 << " mpiexec ";

264 
°d
::
cout
 << "-¿" << 
_num_¥ocs
 << " "

265 << "\"" << 
_‚ame
 << "\" "

267 << 
_p‹t
 << " "

268 << 
_num_¥ocs
 << " "

269 << 
_£rvî
 << " "

270 << (
_£nd_block
 ? "1" : "0") << " ";

271 
i
 = 0; i < (
_Árgs
.
	`size
()); i++) {

272 
°d
::
cout
 << 
_Árgs
[
i
] << " ";

274 
°d
::
cout
 << std::
ídl
;

278 i‡(
u£_mpúun
) {

279 
cmd
.
	`push_back
("mpirun");

281 
cmd
.
	`push_back
("mpiexec");

283 
cmd
.
	`push_back
("-n");

284 
cmd
.
	`push_back
((c⁄° *)
_num_¥ocs
.
	`c_°r
());

286 i‡(
_ív_⁄ly
) {

287 
cmd
.
	`push_back
("-env");

288 
cmd
.
	`push_back
("ISP_USE_ENV");

289 
cmd
.
	`push_back
("1");

290 
cmd
.
	`push_back
("-env");

291 
cmd
.
	`push_back
("ISP_HOSTNAME");

292 #i‚de‡
WIN32


293 i‡(
_unix_sockës
) {

294 
cmd
.
	`push_back
((c⁄° *)
	`GëSockëFûe
 ().
	`c_°r
());

295 
cmd
.
	`push_back
("-env");

296 
cmd
.
	`push_back
("ISP_UNIX_SOCKETS");

297 
cmd
.
	`push_back
("1");

302 
cmd
.
	`push_back
((c⁄° *)
_£rvî
.
	`c_°r
());

303 
cmd
.
	`push_back
("-env");

304 
cmd
.
	`push_back
("ISP_UNIX_SOCKETS");

305 
cmd
.
	`push_back
("0");

306 
cmd
.
	`push_back
("-env");

307 
cmd
.
	`push_back
("ISP_PORT");

308 
cmd
.
	`push_back
((c⁄° *)
_p‹t
.
	`c_°r
());

310 
cmd
.
	`push_back
("-env");

311 
cmd
.
	`push_back
("ISP_NUMPROCS");

312 
cmd
.
	`push_back
((c⁄° *)
_num_¥ocs
.
	`c_°r
());

313 
cmd
.
	`push_back
("-env");

314 
cmd
.
	`push_back
("ISP_SENDBLOCK");

315 
cmd
.
	`push_back
(
_£nd_block
 ? "1" : "0");

318 
cmd
.
	`push_back
((c⁄° *)
_‚ame
.
	`c_°r
());

319 i‡(!
_ív_⁄ly
) {

320 #i‚de‡
WIN32


321 i‡(
_unix_sockës
) {

322 
cmd
.
	`push_back
("1");

323 
cmd
.
	`push_back
(
	`GëSockëFûe
 ().
	`c_°r
());

328 
cmd
.
	`push_back
("0");

329 
cmd
.
	`push_back
((c⁄° *)
_p‹t
.
	`c_°r
());

331 
cmd
.
	`push_back
((c⁄° *)
_num_¥ocs
.
	`c_°r
());

332 
cmd
.
	`push_back
((c⁄° *)
_£rvî
.
	`c_°r
());

333 
cmd
.
	`push_back
(
_£nd_block
 ? "1" : "0");

335 
°d
::
°rög°ªam
 
ss_öãæóvög
;

336 
ss_öãæóvög
 << 
öãæóvögs
;

337 
cmd
.
	`push_back
(
ss_öãæóvög
.
	`°r
().
	`c_°r
());

340 
i
 = 0; i < (
_Árgs
.
	`size
()); i++) {

341 
cmd
.
	`push_back
((c⁄° *)
_Árgs
[
i
].
	`c_°r
());

343 
cmd
.
	`push_back
(
NULL
);

345 #i‚de‡
WIN32


346 
gpid
 = 
	`f‹k
 ();

350 i‡(
gpid
 == 0) {

351 i‡(
	`execvp
 (
cmd
[0], (* const*) &cmd[0]) < 0) {

352 
cmd
[0] = "mpirun";

353 i‡(
	`execvp
 (
cmd
[0], (* const*) &cmd[0]) < 0) {

354 i‡(!
_quõt
) {

355 
°d
::
cout
 <<"UnableÅo Start Clients usingÉxec!\n";

357 
	`exô
 (12);

360 } i‡(
gpid
 < 0) {

361 
	`≥º‹
(0);

362 
	`exô
(1);

364 
_pid
 = 
gpid
;

366 
°d
::
°rög
 
	`fûíame
("\"" + 
_‚ame
 + "\"");

367 
DWORD
 
	`execvp
(c⁄° *
fûe
, c⁄° **
¨gv
);

368 i‡((
_pid
 = 
	`execvp
 (
NULL
, &
cmd
[0])) == 0) {

369 i‡(!
_quõt
) {

370 
°d
::
cout
 <<"UnableÅo Start Clients usingÉxec!\n";

372 
	`exô
 (12);

376 i‡(!
_quõt
 && !
_limô_ouçut
) {

377 
°d
::
cout
 << "Sèπed Pro˚ss: " << 
_pid
 << std::
ídl
;

379 
	}
}

381 
	gScheduÀr
::
	$Re°¨t
 () {

382 
ªsu…
;

384 
SîvîSockë
::
	`Re°¨t
 ();

385 
	`SèπClõ¡s
 ();

386 i‡((
ªsu…
 = 
	`Ac˚±
 ()) != 0) {

387 i‡(!
_quõt
) {

388 
ªsu…
) {

390 
°d
::
cout
 << "Server unableÅoáccept\n";

393 
°d
::
cout
 << "ErrorÑeading from socket in server\n";

397 
	`exô
 (
ªsu…
);

399 
i
 = 0 ; i < 
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()); i++) {

400 
_runQ
[
i
]->
_ªad_√xt_ív
 = 
åue
;

402 
ô
->
_is_exÆl_mode
[
i
] = 
Ál£
;

405 
ô
->
	`Re£tM©chögInfo
();

407 
	}
}

408 
	$PrötSèts
 (
tŸÆ_time
) {

410 
°d
::
cout
 << "TotalÅime = " <<

411 (1.0* 
tŸÆ_time
)/1000000 << "sec \n";

414 
	}
}

416 
	$gëTimeEœp£d
 (
timevÆ
 
fú°
,

417 
timevÆ
 
£c⁄d
) {

418 
£cs
;

419 
u£cs
 = 0;

421 i‡(
fú°
.
tv_u£c
 > 
£c⁄d
.tv_usec) {

422 
u£cs
 = 1000000 - 
fú°
.
tv_u£c
 + 
£c⁄d
.tv_usec;

423 
£c⁄d
.
tv_£c
--;

425 
u£cs
 = 
£c⁄d
.
tv_u£c
 - 
fú°
.tv_usec;

427 
£cs
 = (
£c⁄d
.
tv_£c
 - 
fú°
.tv_sec);

428 
£cs
 *= 1000000;

429  (
£cs
 + 
u£cs
);

430 
	}
}

431 
	gScheduÀr
::
	$SèπMC
 () {

432 
timevÆ
 
fú°
;

433 
timevÆ
 
£c⁄d
;

434 
tŸÆ_time
 = 0;

442 
øn_£ed
 = 
	`time
(0);

445 
	`gëtimeofday
 (&
fú°
, 
NULL
);

446 i‡(!
_quõt
) {

447 
°d
::
cout
 << "INTERLEAVING :" << 
öãæóvögs
 << "\n";

448 
	`fÊush
(
°dout
);

451 i‡(
ScheduÀr
::
_Ârs
) {

452 
	`§™d
(
øn_£ed
);

453 
ScheduÀr
::
_ex∂‹e_mode
 = 
EXP_MODE_RANDOM
;

456 
	`gíî©eFú°I¡îÀavög
 ();

458 i‡(
ScheduÀr
::
_Ârs
) {

459 
ScheduÀr
::
_ex∂‹e_mode
 = 
EXP_MODE_ALL
;

462 #ifde‡
FIB


463 i‡(
_fib
) {

464 
ô
->
	`födI¡îCB
 ();

465 
ô
->
	`FödRñB¨rõrs
 ();

468 
ô
->
	`GëCuºNode
 ()->
	`PrötLog
 ();

472 i‡(
_Ârs
 =
Ál£
) {

477 i‡(
ScheduÀr
::
_ju°_dód_lock
) {

478 
ScheduÀr
::
_logfûe
 << ScheduÀr::
öãæóvögs
 << " DEADLOCK\n";

479 
ScheduÀr
::
_ju°_dód_lock
 = 
Ál£
;

480 
ScheduÀr
::
_dódlock_found
 = 
åue
;

482 
boﬁ
 
ouçutu£d
 = 
Ál£
;

483 
°d
::
°rög°ªam
 
ouçutmsg
;

484 
ouçutmsg
 << "-----------------------------------------" << 
°d
::
ídl
;

485 i‡(
_vîbo£
) {

486 
ouçutmsg
 << *(
ô
->
	`GëCuºNode
 ());

487 
ouçutu£d
 = 
åue
;

488 } i‡(!
_quõt
 && !
_limô_ouçut
) {

489 
°d
::
ve˘‹
<
Tønsôi⁄Li°
 *>::
ôî©‹
 
ôî
, 
ôî_íd
;

490 
ôî
 = 
ô
->
	`GëCuºNode
 ()->
_éi°
.
	`begö
 ();

491 
ôî_íd
 = 
ô
->
	`GëCuºNode
 ()->
_éi°
.
	`íd
 ();

492 ; 
ôî
 !
ôî_íd
; iter++) {

493 
boﬁ
 
ouçut
 = 
Ál£
;

494 i‡((*
ôî
)->
_Àaks_cou¡
 != 0) {

495 
ouçut
 = 
åue
;

496 
ouçutmsg
 << "R™k " << (*
ôî
)->
	`GëId
 () << ": ";

497 
ouçutmsg
 << (*
ôî
)->
_Àaks_cou¡
 << "ÑesourceÜeaks detected.";

499 i‡(
_mpiˇŒs
) {

500 i‡(!
Ál£
) {

501 
ouçutmsg
 << "R™k " << (*
ôî
)->
	`GëId
 () << ": ";

502 
ouçut
 = 
åue
;

504 
ouçutmsg
 << (*
ôî
)->
_éi°
.
	`size
 () << " MPI callsÅrapped.";

506 i‡(
ouçut
) {

507 
ouçutmsg
 << 
°d
::
ídl
;

509 
ouçutu£d
 = ouçutu£d || 
ouçut
;

512 
	`gëtimeofday
 (&
£c⁄d
, 
NULL
);

513 
tŸÆ_time
 +
	`gëTimeEœp£d
 (
fú°
, 
£c⁄d
);

514 i‡(
ô
->
	`NextI¡îÀavög
 ()) {

515 i‡(
ScheduÀr
::
_dódlock_found
 && ScheduÀr::
_°›_©_dódlock
) {

516 
°d
::
cout
 << "Verification stopped. Thereáre still more interleavingsÅoÉxplore\n";

517 
°d
::
cout
 << "To continueÉxploring,ÖleaseÑe-runánd doÇot set stop-at-deadlock flag\n";

518 
	`ExôMpiPro˚ssAndWaô
(
åue
);

519 
	`exô
(1);

521 i‡(
ouçutu£d
) {

522 
ouçutmsg
 << "-----------------------------------------" << 
°d
::
ídl
;

523 
°d
::
cout
 << 
ouçutmsg
.
	`°r
();

525 
ô
->
	`ª£tDïth
();

526 #ifde‡
FIB


527 i‡(
_fib
) {

532 
ô
->
Æ_cuº
.
	`˛ór
();

535 
	`Re°¨t
 ();

538 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

539 i‡(!
_quõt
 && !
_limô_ouçut
) {

540 
°d
::
°rög
 
ex∂‹e_mode
 = "";

541 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_ALL
)

542 
ex∂‹e_mode
 = "All Relevant Interleavings";

543 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_RANDOM
)

544 
ex∂‹e_mode
 = "Random Choice";

545 i‡(
ScheduÀr
::
_ex∂‹e_mode
 =
EXP_MODE_LEFT_MOST
)

546 
ex∂‹e_mode
 = "First Available Choice";

548 i‡(
ScheduÀr
::
_dódlock_found
)

549 
ouçutmsg
 << "ISP dëe˘ed dódlock!!!" << 
°d
::
ídl
;

551 
ouçutmsg
 << "ISP dëe˘edÇÿdódlocks!" << 
°d
::
ídl
;

553 
ouçutmsg
 << "TŸÆ Ex∂‹ed I¡îÀavögs: " << 
öãæóvögs
 << 
°d
::
ídl
;

554 
ouçutmsg
 << "I¡îÀavög Ex∂‹©i⁄ Mode: " << 
ex∂‹e_mode
 << 
°d
::
ídl
;

555 
ouçutmsg
 << "-----------------------------------------" << 
°d
::
ídl
;

556 
°d
::
cout
 << 
ouçutmsg
.
	`°r
();

558 #ifde‡
FIB


559 i‡(
_fib
) {

560 
ô
->
	`¥ötRñB¨rõrs
 ();

562 
dñëe
 
ô
->
œ°_node
;

564 
	`PrötSèts
(
tŸÆ_time
);

568 
	}
}

570 
	gScheduÀr
::
	$gíî©eFú°I¡îÀavög
 () {

571 
timevÆ
 
tv
;

572 
Tønsôi⁄
 *
t
;

573 
tv
.
tv_u£c
 = 0;

574 
tv
.
tv_£c
 = 2;

575 
cou¡
 = 
	`©oi
(
_num_¥ocs
.
	`c_°r
 ());

576 
≈rocs
 = 
cou¡
;

578 
cou¡
) {

580 
i
 = 0 ; i < 
≈rocs
; i++) {

581 i‡(
_runQ
[
i
]->
_ªad_√xt_ív
) {

583 
t
 = 
	`gëTønsôi⁄
(
i
);

586 i‡(
_Ârs
) {

587 i‡(
t
->
	`GëEnvñ›e
()->
func_id
 =
PCONTROL
 &&Å->GëEnvñ›e()->
°ag
 =
ISP_START_SAMPLING
) {

588 
ô
->
_is_exÆl_mode
[
i
] = 
åue
;

590 i‡(
t
->
	`GëEnvñ›e
()->
func_id
 =
PCONTROL
 &&Å->GëEnvñ›e()->
°ag
 =
ISP_END_SAMPLING
) {

591 
ô
->
_is_exÆl_mode
[
i
] = 
Ál£
;

596 i‡(!(
ô
->
	`GëCuºNode
 ())->
_éi°
[
i
]->
	`AddTønsôi⁄
 (
t
)) {

597 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

599 i‡(!
ScheduÀr
::
_quõt
) {

605 
°d
::
cout
 << "ERROR! TRANSITIONS ON RESTARTS NOT SAME!!!!\n";

607 
	`exô
 (21);

616 i‡(! 
t
->
	`GëEnvñ›e
 ()->
	`isBlockögTy≥
 ()) {

617 
	`Síd
 (
i
, 
goback
);

619 
_runQ
[
i
]->
_ªad_√xt_ív
 = 
Ál£
;

621 i‡(
t
->
	`GëEnvñ›e
 ()->
func_id
 =
FINALIZE
) {

624 
_runQ
[
i
]->
_ªad_√xt_ív
 = 
Ál£
;

625 
cou¡
--;

627 
dñëe
 
t
;

630 
°d
::
li°
 <> 
l
;

631 
°d
::
li°
 <>::
ôî©‹
 
ôî
;

632 
°d
::
li°
 <>::
ôî©‹
 
ôî_íd
;

634 !
	`hasM‹eEnvñ›eToRód
 ()) {

635 i‡(
ô
->
	`CHECK
 (*
this
, 
l
) == 1)

637 
ôî_íd
 = 
l
.
	`íd
();

645 i‡(
ScheduÀr
::
_¥obed
) {

646 
	`as£π
 (
l
.
	`size
() <= 2);

647 
_runQ
[
l
.
	`back
()]->
_ªad_√xt_ív
 = 
åue
;

648 
ScheduÀr
::
_¥obed
 = 
Ál£
;

650 
ôî
 = 
l
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

651 
_runQ
[*
ôî
]->
_ªad_√xt_ív
 = 
åue
;

659 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


660 if(!
ScheduÀr
::
_no_am∂e_£t_fix
)

662 
ô
->
	`Pro˚ssI¡îÀavög
();

663 
	}
}

665 
boﬁ
 
	gScheduÀr
::
	$hasM‹eEnvñ›eToRód
 () {

667 
i
 = 0 ; i < 
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()); i++) {

668 i‡(
_runQ
[
i
]->
_ªad_√xt_ív
) {

669  
åue
;

672  
Ál£
;

673 
	}
}

675 
Tønsôi⁄
 *
	gScheduÀr
::
	$gëTønsôi⁄
 (
id
) {

677 
Envñ›e
 *
e
 = 
NULL
;

678 
buf„r
[
BUFFER_SIZE
];

681 
	`mem£t
(
buf„r
, '\0', 
BUFFER_SIZE
);

682 
	`Re˚ive
 (
id
, 
buf„r
, 
BUFFER_SIZE
);

685 
e
 = 
	`Cª©eEnvñ›e
 (
buf„r
, 
id
, 
‹dî_id
++, 
ô
->
_is_exÆl_mode
[id]);

687 i‡(!
e
) {

688 
ô
->
	`GëCuºNode
 ()->
	`PrötLog
 ();

689 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

690 i‡(!
_quõt
) {

691 
°d
::
cout
 << *(
ô
->
	`GëCuºNode
 ()) << "\n";

692 
°d
::
cout
 << "ReceivingÉmpty buffer - Terminating ...\n";

694 
	`exô
 (22);

697 i‡(
e
->
func_id
 =
LEAK
) {

698 
°d
::
°rög°ªam
& 
Àaks
 = 
ô
->
	`GëCuºNode
 ()->
_éi°
[
id
]->
_Àaks_°rög
;

699 
ô
->
	`GëCuºNode
 ()->
_éi°
[
id
]->
_Àaks_cou¡
++;

700 
Àaks
 << 
ScheduÀr
::
öãæóvögs
 << " " << 
id
 << " Leak ";

701 
Àaks
 << 
e
->
di•œy_«me
 << " { } { } Match: -1 -1 File: ";

702 
Àaks
 << 
e
->
fûíame
.
	`Àngth
 (Ë<< " " <<É->fûíamê<< " " <<É->
löíumbî
 << 
°d
::
ídl
;

703 
	`Síd
 (
id
, 
goback
);

704 
‹dî_id
--;

706 } 
e
->
func_id
 =
LEAK
);

708 
boﬁ
 
îr‹
 = 
Ál£
;

709 
e
->
func_id
) {

711 
ASSERT
:

712 
ô
->
	`GëCuºNode
 ()->
	`PrötLog
 ();

713 
_logfûe
 << 
öãæóvögs
 << " "

714 << 
e
->
id
 << " "

716 << "Mesßge: " << 
e
->
di•œy_«me
.
	`Àngth
() << " " <<É->display_name << " "

717 << "Fun˘i⁄: " << 
e
->
func
.
	`Àngth
() << " " <<É->func << " "

718 << "Fûe: " << 
e
->
fûíame
.
	`Àngth
(Ë<< " " <<É->fûíamê<< " " <<É->
löíumbî
 << "\n";

719 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

720 i‡(!
_quõt
) {

721 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

722 
°d
::
cout
 << *(
ô
->
	`GëCuºNode
 ()Ë<< std::
ídl
;

723 
°d
::
cout
 << "Progømás£πi⁄ faûed!" << std::
ídl
;

724 
°d
::
cout
 << "R™k " << 
e
->
id
 << ": " <<É->
fûíame
 << ":" <<É->
löíumbî


725 << ": " << 
e
->
func
 << ": " <<É->
di•œy_«me
 << 
°d
::
ídl
;

726 
°d
::
cout
 << "KûlögÖrogøm " << 
	`ProgName
(Ë<< std::
ídl
;

727 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

728 
°d
::
cout
.
	`Êush
();

730 
	`exô
 (3);

733 
ABORT
:

734 
ô
->
	`GëCuºNode
()->
_éi°
[
id
]->
	`AddTønsôi⁄
(
√w
 
	`Tønsôi⁄
(
e
));

735 
ô
->
	`GëCuºNode
 ()->
	`PrötLog
 ();

736 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

737 i‡(!
_quõt
) {

738 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

739 
°d
::
cout
 << *(
ô
->
	`GëCuºNode
 ()Ë<< std::
ídl
;

740 
°d
::
cout
 << "MPI_Ab‹à⁄Ñ™k " << 
e
->
id
 << " cau£dáb‹à⁄áŒÑ™ks." << std::
ídl
;

741 
°d
::
cout
 << "KûlögÖrogøm " << 
	`ProgName
(Ë<< std::
ídl
;

742 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

743 
°d
::
cout
.
	`Êush
();

745 
	`exô
 (4);

748 
SEND
:

749 
ISEND
:

750 
SSEND
:

751 
RSEND
:

752 i‡(!
e
->
de°_wûdˇrd
 &&

753 (
e
->
de°
 < 0 ||É->de° >
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()))) {

754 
îr‹
 = 
åue
;

757 
IRECV
:

758 
IPROBE
:

759 
PROBE
:

760 
RECV
:

761 i‡(!
e
->
§c_wûdˇrd
 &&

762 (
e
->
§c
 < 0 ||É->§¯>
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ()))) {

763 
îr‹
 = 
åue
;

766 
SCATTER
:

767 
GATHER
:

768 
SCATTERV
:

769 
GATHERV
:

770 
BCAST
:

771 
REDUCE
:

772 i‡(
e
->
cou¡
 < 0 ||É->cou¡ >
	`©oi
 (
_num_¥ocs
.
	`c_°r
 ())) {

773 
îr‹
 = 
åue
;

777 i‡(
îr‹
) {

778 
ô
->
	`GëCuºNode
 ()->
_éi°
[
id
]->
	`AddTønsôi⁄
(
√w
 
	`Tønsôi⁄
(
e
));

779 
ô
->
	`GëCuºNode
 ()->
	`PrötLog
 ();

780 
	`ExôMpiPro˚ssAndWaô
 (
åue
);

781 i‡(!
_quõt
) {

782 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

783 
°d
::
cout
 << *(
ô
->
	`GëCuºNode
 ()Ë<< std::
ídl
;

784 
°d
::
cout
 << "R™k " << 
id
 << ": " << "InvÆidÑ™k i¿MPI_" << 
e
->
func
 << "át "

785 << 
e
->
fûíame
 << ":" <<É->
löíumbî
 << 
°d
::
ídl
;

786 
°d
::
cout
 << "KûlögÖrogøm " << 
	`ProgName
(Ë<< std::
ídl
;

787 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

788 
°d
::
cout
.
	`Êush
();

790 
	`exô
 (5);

793  
√w
 
	`Tønsôi⁄
(
e
);

794 
	}
}

	@scheduler/Scheduler.hpp

21 #i‚de‡
_SCHEDULER_HPP


22 
	#_SCHEDULER_HPP


	)

28 
	#EXPLORE_SOME
 3

	)

30 #ifde‡
CONFIG_DEBUG_SCHED


31 
	#DR
(
code
Ëif(
ScheduÀr
::
_debug
Ë{ codê}

	)

32 
	#DS
(
code
Ë{ codê}

	)

34 
	#DR
(
code
)

	)

35 
	#DS
(
code
)

	)

39 
˛ass
 
	gNode
;

40 
˛ass
 
	gITªe
;

41 
	~<li°
>

42 
	~"SîvîSockë.hµ
"

43 
	~"MpiProc.hµ
"

44 
	~"«me2id.hµ
"

45 
	~<ve˘‹
>

46 
	~"Tønsôi⁄.hµ
"

47 
	~<f°ªam
>

48 
	~<io°ªam
>

49 
	~"sched-›t.h
"

50 
	~<ˇs£π
>

58 ˛as†
	cScheduÀr
 : 
public
 
SîvîSockë
 {

60 
public
:

64 
ScheduÀr
* 
GëIn°™˚
 ();

68 
SèπMC
 ();

87 
SëP¨ams
 (
°d
::
°rög
 
p‹t
, std::°rög 
num_˛õ¡s
,

88 
°d
::
°rög
 
£rvî
, 
boﬁ
 
£nd_block
, std::°rög 
‚ame
,

89 
°d
::
°rög
 
logfûe
, std::
ve˘‹
<°d::°rög> 
Árgs
,

90 
boﬁ
 
mpiˇŒs
, boﬁ 
vîbo£
, boﬁ 
quõt
, boﬁ 
unix_sockës
,

91 
ªp‹t_¥ogªss
, 
boﬁ
 
fib
, boﬁ 
›ímp
,

92 
boﬁ
 
u£_ív_⁄ly
,

93 
boﬁ
 
b©ch_mode
, boﬁ 
°›_©_dódlock
,

94 
ã_Exp_Mode
 
ex∂‹e_mode
, 
ex∂‹e_some
,

95 
°d
::
ve˘‹
<>* 
ex∂‹e_Æl
,

96 
°d
::
ve˘‹
<>* 
ex∂‹e_øndom
, std::ve˘‹<>* 
ex∂‹e_À·_mo°
,

97 
boﬁ
 
debug
, boﬁ 
no_am∂e_£t_fix
, 
bound
, boﬁ 
limô_ouçut
, boﬁ 
Ârs
);

102 
	m°d
::
ve˘‹
 <
MpiProc
 *> 
_runQ
;

104 
	m¥iv©e
:

114 
ScheduÀr
 ();

119 
ScheduÀr
 (const Scheduler &);

125 
	mScheduÀr
& 
	m›î©‹
(c⁄° 
ScheduÀr
 &);

129 
SèπClõ¡s
 ();

131 
Re°¨t
 ();

132 
	m°d
::
°rög
 
ProgName
 ();

133 
gíî©eFú°I¡îÀavög
 ();

134 
Tønsôi⁄
 *
gëTønsôi⁄
 ();

135 
boﬁ
 
hasM‹eEnvñ›eToRód
 ();

136 
ITªe
 *
	mô
;

138 
ScheduÀr
* 
	m_ö°™˚
;

139 
	m°d
::
°rög
 
_num_¥ocs
;

140 
	m°d
::
°rög
 
_‚ame
;

141 
	m°d
::
ve˘‹
<
°d
::
°rög
> 
_Árgs
;

142 
	m°d
::
°rög
 
_p‹t
;

143 
	m°d
::
°rög
 
_£rvî
;

144 
boﬁ
 
	m_∑øm_£t
;

145 
	m_îr‹no
;

146 
fd_£t
 
	m_fds
;

147 
SOCKET
 
	m_lfd
;

148 
	m°d
::
m≠
 <
SOCKET
, > 
	m_fd_id_m≠
;

149 
Node
 *
	mroŸ
;

150 
	mpublic
:

151 
öãæóvögs
;

152 
boﬁ
 
	m_£nd_block
;

153 
boﬁ
 
	m_mpiˇŒs
;

154 
boﬁ
 
	m_vîbo£
;

155 
boﬁ
 
	m_quõt
;

156 
boﬁ
 
	m_unix_sockës
;

157 
	m_ªp‹t_¥ogªss
;

158 
boﬁ
 
	m_fib
;

159 
	m°d
::
of°ªam
 
_logfûe
;

160 
	m°d
::
°rög°ªam
 
_mism©chLog
;

161 
boﬁ
 
	m_›ímp
;

162 
boﬁ
 
	m_ív_⁄ly
;

163 
boﬁ
 
	m_b©ch_mode
;

164 
boﬁ
 
	m_¥obed
;

165 
ã_Exp_Mode
 
	m_ex∂‹e_mode
;

166 
	m_ex∂‹e_some
;

167 
boﬁ
 
	m_ju°_dód_lock
;

168 
boﬁ
 
	m_°›_©_dódlock
;

169 
boﬁ
 
	m_dódlock_found
;

170 
boﬁ
 
	m_debug
;

171 
boﬁ
 
	m_no_am∂e_£t_fix
;

172 
	m_bound
;

173 
boﬁ
 
	m_limô_ouçut
;

175 
	m‹dî_id
;

176 
	m°d
::
ve˘‹
<> *
_ex∂‹e_Æl
;

177 
	m°d
::
ve˘‹
<> *
_ex∂‹e_øndom
;

178 
	m°d
::
ve˘‹
<> *
_ex∂‹e_À·_mo°
;

180 
boﬁ
 
	m_Ârs
;

	@scheduler/ServerSocket.cpp

21 
	~"SîvîSockë.hµ
"

22 
	~<io°ªam
>

23 #i‚de‡
WIN32


24 
	~<sys/waô.h
>

26 
usög
 
«me•a˚
 
	g°d
;

32 
	gSîvîSockë
::
	$SîvîSockë
 (
p‹t
, 
num_˛õ¡s
, 
boﬁ
 
unix_sockës
, boﬁ 
b©ch_mode
) :

33 
	`_£rv_p‹t
 (
p‹t
), 
	`_num_˛õ¡s
 (
num_˛õ¡s
), 
	`_unix_sockës
 (
unix_sockës
),

34 
	`_b©ch_mode
 (
b©ch_mode
), 
	$_£rv_sock
 (
unix_sockës
) {

36 
	}
}

38 
	gSîvîSockë
::~
	$SîvîSockë
(){

39 #ifde‡
WIN32


40 
	`WSACÀ™up
();

42 
	}
}

44 
	gSîvîSockë
::
	$Sèπ
 () {

46 #ifde‡
WIN32


50 
WSADATA
 
wßD©a
;

51 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
Ë!
NO_ERROR
) {

52 
	`exô
 (12);

60 i‡(
_£rv_sock
.
	`O≥n
 (Ë=
INVALID_SOCKET
) {

67 #i‚de‡
WIN32


68 i‡(
_unix_sockës
) {

69 
	`mem£t
 ((*)&
_£rv_addr_un
, '\0',  (_serv_addr_un));

70 
_£rv_addr_un
.
sun_Ámûy
 = 
AF_UNIX
;

71 
	`°r˝y
 (
_£rv_addr_un
.
sun_∑th
, 
	`GëSockëFûe
 ().
	`c_°r
() );

73 i‡(
	`böd
 (
_£rv_sock
.
	`gë_fd
 (), (
sockaddr
 *)&
_£rv_addr_un
,

74 
	`°æí
 (
_£rv_addr_un
.
sun_∑th
Ë+  (_£rv_addr_un.
sun_Ámûy
))

75 =
SOCKET_ERROR
) {

80 
	`mem£t
 ((*)&
_£rv_addr_ö
, '\0',  (_serv_addr_in));

81 
_£rv_addr_ö
.
sö_Ámûy
 = 
AF_INET
;

82 
_£rv_addr_ö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

83 
_£rv_addr_ö
.
sö_p‹t
 = 
	`ht⁄s
 ((
u_sh‹t
)
_£rv_p‹t
);

85 i‡(
	`böd
 (
_£rv_sock
.
	`gë_fd
 (), (
sockaddr
 *)&
_£rv_addr_ö
,

86  (
_£rv_addr_ö
)Ë=
SOCKET_ERROR
) {

89 #i‚de‡
WIN32


97 i‡(
	`li°í
 (
_£rv_sock
.
	`gë_fd
 (), 5Ë=
SOCKET_ERROR
) {

101 
	}
}

103 
	gSîvîSockë
::
	$Ac˚±
 () {

105 
i
 = 0 ; i < 
_num_˛õ¡s
; i++) {

107 
buf„r
[
BUFFER_SIZE
];

108 
sockaddr_ö
 
˛i_addr
;

109 
SOCKET
 
nfd
;

110 
id
;

111 
˛i_Àn
;

113 
	`mem£t
 (
buf„r
, '\0', 
BUFFER_SIZE
);

114 
˛i_Àn
 =  (
˛i_addr
);

120 
nfd
 = 
	`ac˚±
 (
_£rv_sock
.
	`gë_fd
 (),

121 #i‚de‡
WIN32


122 (
sockaddr
 *Ë&
˛i_addr
,

123 
ªöãΩªt_ˇ°
 <
sockÀn_t
 *> (&
˛i_Àn
));

125 (
SOCKADDR
*Ë&
˛i_addr
, &
˛i_Àn
);

127 i‡(
nfd
 =
SOCKET_ERROR
) {

128 #ifde‡
DEBUG


129 
	`¥ötf
("SockëÉº‹ o¿scheduÀr: %d\n", 
	`WSAGëLa°Eº‹
());

134 
Sockë
 *
nsock
 = 
√w
 
	`Sockë
 (
nfd
, 
_unix_sockës
);

136 
Àn
;

137 
Àn
 = 
nsock
->
	`Re˚ive
 (
buf„r
, 
BUFFER_SIZE
);

138 i‡(
Àn
 =0 ||Üí =
SOCKET_ERROR
) {

141 
id
 = 
	`©oi
 (
buf„r
);

142 
nsock
->
	`Síd
 (
goback
);

143 
_˛i_socks
[
id
] = 
nsock
;

144 i‡(
_b©ch_mode
) {

145 
°d
::
cout
 << "Re˚ived c⁄√˘i⁄ fromÑ™k " << 
id
 << "." << std::
ídl
;

149 
	}
}

151 
	gSîvîSockë
::
Síd
 (
id
, 
°d
::
°rög
 
∑ckë
) {

152 
°d
::
m≠
 <, 
	gSockë
*>::
ôî©‹
 
ôî
 = 
_˛i_socks
.
föd
 (
id
);

153 
as£π
 (
ôî
 !
_˛i_socks
.
íd
 ());

154  ((*
	gôî
).
	g£c⁄d
)->
Síd
 (
∑ckë
);

157 
	gSîvîSockë
::
	$Re°¨t
 () {

159 
°d
::
m≠
 <, 
Sockë
*>::
ôî©‹
 
ôî
;

164 
ôî
 = 
_˛i_socks
.
	`begö
 (); iã∏!_˛i_socks.
	`íd
 (); iter++) {

165 (*
ôî
).
£c⁄d
->
	`Clo£
 ();

166 
	`dñëe
 (*
ôî
).
£c⁄d
;

171 
_˛i_socks
.
	`˛ór
();

175 #i‚de‡
WIN32


176 i‡(
_unix_sockës
) {

177 
_£rv_sock
.
	`Clo£
();

179 i‡(!
_£rv_sock_fûíame
.
	`em±y
())

180 
	`u∆ök
(
_£rv_sock_fûíame
.
	`c_°r
());

182 
_£rv_sock_fûíame
 = "";

183 
	`Sèπ
();

187 
	}
}

189 
	gSîvîSockë
::
	$St›
 () {

191 
°d
::
m≠
 <, 
Sockë
*>::
ôî©‹
 
ôî
;

196 
ôî
 = 
_˛i_socks
.
	`begö
 (); iã∏!_˛i_socks.
	`íd
 (); iter++) {

197 (*
ôî
).
£c⁄d
->
	`Síd
(
°›
);

198 (*
ôî
).
£c⁄d
->
	`Clo£
 ();

201 #ifde‡
WIN32


204 i‡(!
_£rv_sock_fûíame
.
	`em±y
 ()) {

205 
	`u∆ök
 (
_£rv_sock_fûíame
.
	`c_°r
 ());

207 i‡(
_unix_sockës
)

208 
_£rv_sock_fûíame
 = "";

211 
	}
}

213 
	gSîvîSockë
::
	$Re˚ive
 (
id
, *
buf„r
, 
Àn
) {

214 
°d
::
m≠
 <, 
Sockë
*>::
ôî©‹
 
ôî
 = 
_˛i_socks
.
	`föd
 (
id
);

215 
	`as£π
 (
ôî
 !
_˛i_socks
.
	`íd
 ());

216  ((*
ôî
).
£c⁄d
)->
	`Re˚ive
 (
buf„r
, 
Àn
);

217 
	}
}

219 
SOCKET
 
	gSîvîSockë
::
	$GëFD
 (
id
) {

220 
°d
::
m≠
 <, 
Sockë
*>::
ôî©‹
 
ôî
 = 
_˛i_socks
.
	`föd
 (
id
);

221 
	`as£π
 (
ôî
 !
_˛i_socks
.
	`íd
());

222  ((*
ôî
).
£c⁄d
)->
	`gë_fd
 ();

223 
	}
}

225 
	gSîvîSockë
::
	$Clo£
 () {

226 
°d
::
m≠
 <, 
Sockë
 *>::
ôî©‹
 
ôî
;

228 
ôî
 = 
_˛i_socks
.
	`begö
 (); iã∏!_˛i_socks.
	`íd
 (); iter++) {

229 (*
ôî
).
£c⁄d
->
	`Clo£
 ();

232 #ifde‡
WIN32


236 i‡(!
_£rv_sock_fûíame
.
	`em±y
 ()) {

237 
	`u∆ök
 (
_£rv_sock_fûíame
.
	`c_°r
 ());

239 i‡(
_unix_sockës
)

240 
_£rv_sock_fûíame
= "";

243 
	}
}

245 
	gSîvîSockë
::
	$ExôMpiPro˚ssAndWaô
 (
boﬁ
 
ãrmö©e
) {

247 #i‚de‡
WIN32


248 
	`sig«l
(
SIGCHLD
, 
SIG_DFL
);

250 i‡(
ãrmö©e
) {

251 
	`St›
 ();

253 
	`Clo£
 ();

255 #i‚de‡
WIN32


256 
°©
;

257 
	`waôpid
 (
_pid
, &
°©
, 0);

258 
	`chûd_sig«l_h™dÀr
 (
sig«l
);

259 
	`sig«l
(
SIGCHLD
, 
chûd_sig«l_h™dÀr
);

261 
HANDLE
 
h
 = 
	`O≥nPro˚ss
(
SYNCHRONIZE
, 
Ál£
, 
_pid
);

262 i‡(
h
 !
NULL
) {

263 
	`WaôF‹SögÀObje˘
(
h
, 
INFINITE
);

264 
	`Clo£H™dÀ
(
h
);

267 
	}
}

269 #i‚de‡
WIN32


270 
	g°d
::
°rög
 
SîvîSockë
::
	$GëSockëFûe
 () {

272 i‡(
_£rv_sock_fûíame
.
	`em±y
 ()) {

273 
fûíame
[] = "/tmp/isp.XXXXXX";

274 
fd
 = 
	`mk°emp
 (
fûíame
);

275 i‡(
fd
 >= 0) {

276 
	`˛o£
 (
fd
);

277 
	`u∆ök
 (
fûíame
);

278 
_£rv_sock_fûíame
.
	`ö£π
 (0, 
fûíame
);

282  
_£rv_sock_fûíame
;

283 
	}
}

	@scheduler/ServerSocket.hpp

21 #i‚de‡
_SERVER_SOCKET_HPP_


22 
	#_SERVER_SOCKET_HPP_


	)

24 
	~<sys/ty≥s.h
>

25 
	~"Sockë.hµ
"

26 
	~<ˇs£π
>

27 
	~<°rög
>

28 
	~<m≠
>

29 
	~<°dlib.h
>

30 #i‚de‡
WIN32


31 
	~<sys/sockë.h
>

32 
	~<sys/un.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

35 
	~<uni°d.h
>

37 
	~<wösock2.h
>

38 
DWORD
 
	tpid_t
;

41 c⁄° 
	g°d
::
°rög
 
gﬂhód
 = "1";

42 c⁄° 
	g°d
::
°rög
 
lo›
 = "2";

43 c⁄° 
	g°d
::
°rög
 
goback
 = "2";

44 c⁄° 
	g°d
::
°rög
 
ª°¨t
 = "3";

45 c⁄° 
	g°d
::
°rög
 
°›
 = "4";

47 ˛as†
	cSîvîSockë
 {

49 
	mpublic
:

56 
SîvîSockë
 (
p‹t
, 
˛õ¡s
, 
boﬁ
 
unix_sockës
, boﬁ 
b©ch_mode
);

67 
	mvútuÆ
 ~
SîvîSockë
();

69 
Sèπ
 ();

80 
Ac˚±
 ();

86 
Síd
 (
id
, 
°d
::
°rög
 
∑ckë
);

92 
Re˚ive
 (
id
, *
buf„r
, 
Àn
);

102 
vútuÆ
 
Re°¨t
 ();

109 
vútuÆ
 
St›
 ();

114 
SOCKET
 
GëFD
 (
id
);

119 
Clo£
 ();

126 
ExôMpiPro˚ssAndWaô
 (
boﬁ
 
ãrmö©e
);

128 #i‚de‡
WIN32


133 
	m°d
::
°rög
 
GëSockëFûe
 ();

136 
	m¥iv©e
:

137 
_£rv_p‹t
;

138 
	m_num_˛õ¡s
;

139 
boﬁ
 
	m_unix_sockës
;

140 
boﬁ
 
	m_b©ch_mode
;

141 
sockaddr_ö
 
	m_£rv_addr_ö
;

142 #i‚de‡
WIN32


143 
sockaddr_un
 
	m_£rv_addr_un
;

145 
Sockë
 
	m_£rv_sock
;

146 
	m°d
::
m≠
 <, 
	mSockë
*> 
	m_˛i_socks
;

147 
	m°d
::
°rög
 
_£rv_sock_fûíame
;

149 
	m¥Ÿe˘ed
:

150 
pid_t
 
_pid
;

	@scheduler/Socket.cpp

21 
	~"Sockë.hµ
"

22 
	~<io°ªam
>

23 
	~<°rög.h
>

30 
	gSockë
::
	$Sockë
 (
boﬁ
 
unix_sockës
Ë: 
	`_sfd
 (
INVALID_SOCKET
), 
	`_is_›í
 (
Ál£
),

31 
	$_unix_sockës
 (
unix_sockës
) {

33 
	}
}

35 
	gSockë
::
	$Sockë
 (
SOCKET
 
fd
, 
boﬁ
 
unix_sockës
Ë: 
	`_sfd
 (fd), 
	`_is_›í
 (
åue
),

36 
	$_unix_sockës
 (
unix_sockës
) {

38 
	}
}

40 
SOCKET
 
	gSockë
::
	$O≥n
 () {

42 
⁄
 = 1;

43 
sock_ty≥
 = 
_unix_sockës
 ? 
AF_UNIX
 : 
AF_INET
;

49 i‡(
_is_›í
) {

57 
_sfd
 = 
	`sockë
 (
sock_ty≥
, 
SOCK_STREAM
, 0);

58 i‡(
	`£tsock›t
 (
_sfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

59 (c⁄° *)&
⁄
,  (⁄)Ë=
SOCKET_ERROR
) {

60  
INVALID_SOCKET
;

63 i‡(
_sfd
 !
INVALID_SOCKET
) {

64 
_is_›í
 = 
åue
;

67  
_sfd
;

68 
	}
}

70 
SOCKET
 
	gSockë
::
	$gë_fd
 () {

71  
_sfd
;

72 
	}
}

74 
	gSockë
::
	$Clo£
 () {

75 i‡(!
_is_›í
) {

79 #i‚de‡
WIN32


80 
	`˛o£
 (
_sfd
);

82 
	`˛o£sockë
 (
_sfd
);

84 
_is_›í
 = 
Ál£
;

85 
	}
}

87 
	gSockë
::
Síd
 (
°d
::
°rög
 
∑ckë
) {

88 i‡(! 
_is_›í
) {

91 
	g∑ckë
 = 
∑ckë
 + ":";

92  
£nd
 (
_sfd
, 
∑ckë
.
c_°r
(), (Ìackë.
size
(), 0);

95 
	gSockë
::
	$Re˚ive
 (*
buf„r
, 
Àn
) {

97 i‡(! 
_is_›í
) {

101 i‡(
Àn
 <= 0) {

104  
	`ªcv
 (
_sfd
, 
buf„r
, 
Àn
, 0);

105 
	}
}

	@scheduler/Socket.hpp

21 #i‚de‡
_SOCKET_HPP_


22 
	#_SOCKET_HPP_


	)

24 
	~<sys/ty≥s.h
>

25 
	~<io°ªam
>

26 
	~<°rög
>

27 
	~<î∫o.h
>

28 #i‚de‡
WIN32


29 
	~<sys/sockë.h
>

30 
	~<sys/un.h
>

31 
	~<uni°d.h
>

32 
	tSOCKET
;

33 
	#INVALID_SOCKET
 -1

	)

34 
	#SOCKET_ERROR
 -1

	)

36 
	~<wösock2.h
>

39 
	#BUFFER_SIZE
 2560

	)

46 
˛ass
 
	gScheduÀr
;

47 ˛as†
	cSockë
 {

49 
	mpublic
:

54 
Sockë
 (
boﬁ
 
unix_sockës
);

61 
Sockë
 (
SOCKET
 
fd
, 
boﬁ
 
unix_sockës
);

66 
SOCKET
 
O≥n
 ();

71 
Clo£
 ();

76 
SOCKET
 
gë_fd
 ();

81 
Síd
 (
°d
::
°rög
 
∑ckë
);

87 
Re˚ive
 (*
∑ckë
, 
Àn
);

89 
	m¥iv©e
:

90 
SOCKET
 
_sfd
;

91 
boﬁ
 
	m_is_›í
;

92 
boﬁ
 
	m_unix_sockës
;

	@scheduler/Transition.cpp

21 
	~"Tønsôi⁄.hµ
"

22 
	~"ScheduÀr.hµ
"

24 
	~<sig«l.h
>

26 
	gTønsôi⁄
::
	$Tønsôi⁄
() {

27 
	`DS
–
t
 = 
NULL
; );

28 
	}
}

30 
	gTønsôi⁄
::
	$Tønsôi⁄
(c⁄° 
Tønsôi⁄
 &
t_
, 
boﬁ
 
ªf_t
) {

31 *
this
 = 
t_
;

32 if(
ªf_t
Ë
t
->
	`ªf_öc
();

33 
	}
}

35 
	gTønsôi⁄
::
	$Tønsôi⁄
(
Envñ›e
 *
e
, 
boﬁ
 
ªf_e
) {

36 
t
 = 
√w
 
	`Tønsôi⁄_öã∫Æ
(
e
);

37 if(
ªf_e
Ë
t
->
	`GëEnvñ›e
()->
	`ªf_öc
();

38 
	}
}

40 
	gTønsôi⁄
 &Tønsôi⁄::
›î©‹
=(c⁄° 
Tønsôi⁄
 &
t_
) {

42 
t
 = 
t_
.t;

45  *
	gthis
;

48 
	g°d
::
o°ªam
 &
›î©‹
<<(
°d
::o°ªam &
os
, c⁄° 
	gTønsôi⁄
 &
	gt
) {

49  
	gos
 << *
	gt
.t;

52 
	gTønsôi⁄
::
	$ªf
() {

53 
t
->
	`ªf_öc
();

55 
	}
}

57 
	gTønsôi⁄
::
	$uƒef
() {

59 if(!
t
->
	`issh¨ed
()) {

62 
dñëe
 
t
;

63 
	`DS
–
t
 = 
NULL
; )

64 } 
t
->
	`ªf_dec
();

65 
	}
}

67 
	gTønsôi⁄
::
	$c›y
() {

69 if(
t
->
	`issh¨ed
()) {

70 
t
->
	`ªf_dec
();

71 
t
 = 
√w
 
	`Tønsôi⁄_öã∫Æ
(*t);

81 
	}
}

83 
	gTønsôi⁄
::
	$Execuã
(
SîvîSockë
 &
s
) {

84 
t
->
	`Execuã
(
s
);

85 
	}
}

87 
Envñ›e
 *
	gTønsôi⁄
::
	$GëEnvñ›e
() const {

88  
t
->
	`GëEnvñ›e
();

89 
	}
}

91 
boﬁ
 
	gTønsôi⁄
::
	$AddI¡øCB
(
CB
 &
c
) {

92 if(
t
->
	`AddI¡øCB_check
(
c
)) {

93 
	`c›y
();

94 
t
->
	`AddI¡øCB_muèã
(
c
);

95  
åue
;

97  
Ál£
;

98 
	}
}

100 
	gTønsôi⁄
::
	$PrötLog
() const {

101 
t
->
	`PrötLog
();

102 
	}
}

104 
	gTønsôi⁄
::
	$AddI¡îCB
(
CB
 &
c
) {

105 if(
t
->
	`AddI¡îCB_check
(
c
)) {

106 
	`c›y
();

107 
t
->
	`AddI¡îCB_muèã
(
c
);

109 
	}
}

120 
	gTønsôi⁄
::
	$£t_cuº_m©chög
(c⁄° 
CB
 &
c
) {

121 
	`c›y
();

122 
t
->
cuº_m©chög
 = 
c
;

124 
	}
}

126 
	gCB
 &
	gTønsôi⁄
::
	$gë_cuº_m©chög
() const {

127  
t
->
cuº_m©chög
;

128 
	}
}

134 
	g°d
::
ve˘‹
<> &
Tønsôi⁄
::
	$gë_™˚°‹s
() const {

135  
t
->
™˚°‹s
;

136 
	}
}

138 
	g°d
::
ve˘‹
<> &
Tønsôi⁄
::
	$mod_™˚°‹s
() {

139 
	`c›y
();

140  
t
->
™˚°‹s
;

141 
	}
}

151 #ifde‡
FIB


152 
	g°d
::
ve˘‹
 <
CB
> &
Tønsôi⁄
::
	$gë_öãr_cb
() {

153  
t
->
_öãr_cb
;

154 
	}
}

156 
	g°d
::
ve˘‹
 <
CB
> &
Tønsôi⁄
::
	$mod_öãr_cb
() {

157 
	`c›y
();

158  
t
->
_öãr_cb
;

159 
	}
}

161 
	g°d
::
ve˘‹
 <
CB
> &
Tønsôi⁄
::
	$gë_öåa_cb
() {

162  
t
->
_öåa_cb
;

163 
	}
}

165 
	g°d
::
ve˘‹
 <
CB
> &
Tønsôi⁄
::
	$gë_c⁄d_öåa_cb
() {

166  
t
->
_c⁄d_öåa_cb
;

167 
	}
}

169 
	gTønsôi⁄
::
	$AddC⁄dI¡øCB
(
CB
 &
c
) {

170 if(
t
->
	`AddC⁄dI¡øCB_check
(
c
)) {

171 
	`c›y
();

172 
t
->
	`AddC⁄dI¡øCB_muèã
(
c
);

174 
	}
}

179 
	gTønsôi⁄_öã∫Æ
::
	$Tønsôi⁄_öã∫Æ
 (
Envñ›e
 * 
ív
) {

180 
_ív
 = 
ív
;

182 
ªf
 = 1;

183 
cuº_m©chög
 = 
	`CB
(-1,-1);

189 
	}
}

191 
	gTønsôi⁄_öã∫Æ
::
	$Tønsôi⁄_öã∫Æ
 () {

192 
_ív
 = (
Envñ›e
*)1;

193 
ªf
 = 1;

194 
cuº_m©chög
 = 
	`CB
(-1,-1);

200 
	}
}

202 
	gTønsôi⁄_öã∫Æ
::
	$Tønsôi⁄_öã∫Æ
 (
Tønsôi⁄_öã∫Æ
 &
t
) {

205 (*
this
Ë
t
;

208 
	}
}

210 
	gTønsôi⁄_öã∫Æ
::~
	$Tønsôi⁄_öã∫Æ
() {

217 if(!
_ív
->
	`issh¨ed
()) {

219 
dñëe
 
_ív
;

220 
	`DS
–
_ív
 = 
NULL
; )

221 } 
_ív
->
	`ªf_dec
();

227 
	}
}

229 
	gTønsôi⁄_öã∫Æ
 &Tønsôi⁄_öã∫Æ::
›î©‹
(
Tønsôi⁄_öã∫Æ
 &
t
) {

240 
ªf
 = 1;

244 
	gcuº_m©chög
 = 
t
.
cuº_m©chög
;

248 
	g_ív
 = 
t
.
GëEnvñ›e
();

249 
	g_ív
->
ªf_öc
();

252 
	g™˚°‹s
 = 
t
.
™˚°‹s
;

253 
	g_öåa_cb
 = 
t
.
_öåa_cb
;

254 
	g_öãr_cb
 = 
t
.
_öãr_cb
;

255 
	g_c⁄d_öåa_cb
 = 
t
.
_c⁄d_öåa_cb
;

258  *
	gthis
;

276 
	gTønsôi⁄_öã∫Æ
::
	$Execuã
 (
SîvîSockë
 &
sock
) {

281 
_ív
->
	`Issued
 ();

282 
sock
.
	`Síd
 (
_ív
->
id
, 
gﬂhód
);

283 
	}
}

291 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gTønsôi⁄_öã∫Æ
 &
	gt
) {

292 
	g°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

293 
	g°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
t
.
_öåa_cb
.
íd
();

294 
	gos
 << *(
	gt
.
GëEnvñ›e
 ());

295 
	gos
 << "{";

296 
	gôî
 = 
t
.
_öåa_cb
.
begö
(); iã∏!
ôî_íd
; iter++) {

297 
	gos
 << *
	gôî
;

299 
	gos
 << "} {";

300 
	gôî_íd
 = 
t
.
_öãr_cb
.
íd
();

301 
	gôî
 = 
t
.
_öãr_cb
.
begö
(); iã∏!
ôî_íd
; iter++) {

302 
	gos
 << *
	gôî
;

304 
	gos
 << "}";

305 i‡(
	gt
.
is_cuº_m©chög_£t
(Ë&& (t.
GëEnvñ›e
 ()->
isSídTy≥
 () ||

306 
	gt
.
GëEnvñ›e
 ()->
isRecvTy≥
 ())) {

307 
	gos
 << "\àM©ched [" << 
	gt
.
	gcuº_m©chög
.
	g_pid


308 << ","<< 
	gt
.
	gcuº_m©chög
.
	g_ödex
 << "]";

310  
	gos
;

313 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, c⁄° 
	gCB
 &
	gc
) {

314 
	gos
 << "[" << 
	gc
.
	g_pid
 << ", "<< c.
	g_ödex
 << "]";

316  
	gos
;

319 
	gTønsôi⁄_öã∫Æ
::
	$PrötLog
 () {

320 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

321 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
_öåa_cb
.
	`íd
();

322 
ScheduÀr
::
_logfûe
 << ScheduÀr::
öãæóvögs
 << " " << 
	`GëEnvñ›e
()->
id


324 
	`GëEnvñ›e
 ()->
	`PrötLog
();

325 
ScheduÀr
::
_logfûe
 << "{ ";

326 
ôî
 = 
_öåa_cb
.
	`begö
(); iã∏!
ôî_íd
; iter++) {

327 
ôî
->
	`PrötLog
();

328 
ScheduÀr
::
_logfûe
 << " ";

330 
ScheduÀr
::
_logfûe
 << "} { ";

331 
ôî_íd
 = 
_öãr_cb
.
	`íd
();

332 
ôî
 = 
_öãr_cb
.
	`begö
(); iã∏!
ôî_íd
; iter++) {

333 
ôî
->
	`PrötLog
(
åue
);

334 
ScheduÀr
::
_logfûe
 << " ";

336 
ScheduÀr
::
_logfûe
 << "}";

337 i‡(
	`is_cuº_m©chög_£t
(Ë&& (
	`GëEnvñ›e
 ()->
	`isSídTy≥
 () ||

338 
	`GëEnvñ›e
 ()->
	`isRecvTy≥
 ())) {

339 
ScheduÀr
::
_logfûe
 << " M©ch: " << 
cuº_m©chög
.
_pid


340 << " " << 
cuº_m©chög
.
_ödex
;

342 
ScheduÀr
::
_logfûe
 << " Match: " << -1

346 
ScheduÀr
::
_logfûe
 << " Fûe: " << 
	`GëEnvñ›e
 ()->
fûíame
.
	`Àngth
 ()

347 << " " << 
	`GëEnvñ›e
 ()->
fûíame


348 << " " << 
	`GëEnvñ›e
 ()->
löíumbî
;

349 
	}
}

351 
	gCB
::
	$PrötLog
 (
boﬁ
 
pid
) {

352 i‡(!
pid
)

353 
ScheduÀr
::
_logfûe
 << 
_ödex
 ;

355 
ScheduÀr
::
_logfûe
 << "[ " << 
_pid
 << " " <<
_ödex


357 
	}
}

359 
boﬁ
 
	gTønsôi⁄_öã∫Æ
::
	$AddI¡øCB_check
(
CB
 &
c
) {

360 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

361 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
_öåa_cb
.
	`íd
();

363 
ôî
 = 
_öåa_cb
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

364 i‡(*
ôî
 =
c
) {

365  
Ál£
;

368 
ôî_íd
 = 
_öãr_cb
.
	`íd
();

369 
ôî
 = 
_öãr_cb
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

370 i‡(*
ôî
 =
c
) {

371  
Ál£
;

374  
åue
;

375 
	}
}

377 
	gTønsôi⁄_öã∫Æ
::
	$AddI¡øCB_muèã
(
CB
 &
c
) {

378 
_öåa_cb
.
	`push_back
(
c
);

379 
	}
}

381 
boﬁ
 
	gTønsôi⁄_öã∫Æ
::
	$AddI¡îCB_check
(
CB
 &
c
) {

382 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

383 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî_íd
 = 
_öåa_cb
.
	`íd
();

385 i‡(
c
.
_pid
 =-1 && c.
_ödex
 == -1) {

386 
_öãr_cb
.
	`push_back
 (
c
);

387  
Ál£
;

389 
ôî
 = 
_öåa_cb
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

390 i‡(*
ôî
 =
c
) {

391  
Ál£
;

394 
ôî_íd
 = 
_öãr_cb
.
	`íd
();

395 
ôî
 = 
_öãr_cb
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

396 i‡(*
ôî
 =
c
) {

397  
Ál£
;

400  
åue
;

401 
	}
}

402 
	gTønsôi⁄_öã∫Æ
::
	$AddI¡îCB_muèã
(
CB
 &
c
) {

403 
_öãr_cb
.
	`push_back
(
c
);

404 
	}
}

406 #ifde‡
FIB


407 
boﬁ
 
	gTønsôi⁄_öã∫Æ
::
	$AddC⁄dI¡øCB_check
(
CB
 &
c
)

409 
°d
::
ve˘‹
 <
CB
>::
ôî©‹
 
ôî
;

411 
ôî
 = 
_c⁄d_öåa_cb
.
	`begö
 ();

412 
ôî
 !
_c⁄d_öåa_cb
.
	`íd
 (); iter++) {

413 i‡(*
ôî
 =
c
) {

414  
Ál£
;

418 
ôî
 = 
_öãr_cb
.
	`begö
 ();

419 
ôî
 !
_öãr_cb
.
	`íd
 (); iter++) {

420 i‡(*
ôî
 =
c
) {

421  
Ál£
;

424  
åue
;

425 
	}
}

427 
	gTønsôi⁄_öã∫Æ
::
	$AddC⁄dI¡øCB_muèã
(
CB
 &
c
) {

428 
_c⁄d_öåa_cb
.
	`push_back
(
c
);

429 
	}
}

432 
boﬁ
 
	gTønsôi⁄_öã∫Æ
::
	$is_cuº_m©chög_£t
() {

433  
cuº_m©chög
 !
	`CB
(-1,-1);

434 
	}
}

436 
	gTønsôi⁄_öã∫Æ
::
	$ªf_öc
() {

437 
ªf
++;

439 
	}
}

441 
	gTønsôi⁄_öã∫Æ
::
	$ªf_dec
() {

442 
	`DS
–
	`as£π
(
ªf
>1); )

443 
ªf
--;

445 
	}
}

447 
boﬁ
 
	gTønsôi⁄_öã∫Æ
::
	$issh¨ed
() {

448 
	`DS
–
	`as£π
(
ªf
>0); )

449  
ªf
 != 1;

450 
	}
}

	@scheduler/Transition.hpp

21 #i‚de‡
_TRANSITION_HPP


22 
	#_TRANSITION_HPP


	)

24 
	~"Envñ›e.hµ
"

25 
	~"SîvîSockë.hµ
"

26 
	~<ve˘‹
>

27 
	~<ˇs£π
>

32 ˛as†
	cCB
 {

33 
	mpublic
:

34 
_pid
;

35 
	m_ödex
;

36 
	$CB
 () { }

38 
	$CB
 (
i
, 
öd
Ë: 
	`_pid
(i), 
	$_ödex
(
öd
) {

39 
	}
}

40 
	$CB
(c⁄° 
CB
& 
c
Ë: 
	`_pid
(c.
_pid
), 
	$_ödex
(
c
.
_ödex
){
	}
}

41 
boﬁ
 
	g›î©‹
=(c⁄° 
CB
 &
c
) {

42  
_pid
 =
c
._pid && 
_ödex
 == c._index;

44 
boﬁ
 
	g›î©‹
!(c⁄° 
CB
 &
c
) {

45  !(*
this
 =
c
);

47 
‰õnd
 
boﬁ
 
	g›î©‹
< (c⁄° 
	gCB
 &
	ga
, c⁄° CB &
	gb
) {

48  
	ga
.
	g_pid
 < 
	gb
._pid || (a._pid =
b
.
_pid
 && 
a
.
_ödex
 < b._index);

50 
	gCB
& 
	g›î©‹
(c⁄° 
CB
 &
c
) {

51 
this
->
_pid
 = 
c
._pid;

52 
	gthis
->
	g_ödex
 = 
c
.
_ödex
;

53  *
	gthis
;

55 
PrötLog
(
boﬁ
 
pid
 = 
Ál£
);

56 
‰õnd
 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, c⁄° 
	gCB
 &
	gc
);

60 ˛as†
	cTønsôi⁄_öã∫Æ
 {

61 
	mpublic
:

62 
Tønsôi⁄_öã∫Æ
();

63 ~
Tønsôi⁄_öã∫Æ
();

64 
Tønsôi⁄_öã∫Æ
(
Envñ›e
 * 
ív
);

68 
Tønsôi⁄_öã∫Æ
(Tønsôi⁄_öã∫Æ &
t
);

69 
	mTønsôi⁄_öã∫Æ
& 
	m›î©‹
=(
Tønsôi⁄_öã∫Æ
 &);

77 
Execuã
 (
SîvîSockë
 &
sock
);

80 
ölöe
 
Envñ›e
 *
	$GëEnvñ›e
 (Ë{ 
_ív
;}

81 
boﬁ
 
	`AddI¡øCB_check
(
CB
 &
c
);

82 
	`AddI¡øCB_muèã
(
CB
 &
c
);

83 
	`PrötLog
();

84 
boﬁ
 
	`AddI¡îCB_check
(
CB
 &
c
);

85 
	`AddI¡îCB_muèã
(
CB
 &
c
);

88 
boﬁ
 
	`is_cuº_m©chög_£t
();

90 #ifde‡
FIB


91 
boﬁ
 
	`AddC⁄dI¡øCB_check
(
CB
 &
c
);

92 
	`AddC⁄dI¡øCB_muèã
(
CB
 &
c
);

94 
	`ªf_öc
();

95 
	`ªf_dec
();

96 
boﬁ
 
	`issh¨ed
();

98 
‰õnd
 
°d
::
o°ªam
 &
›î©‹
<< (°d::o°ªam &
os
, 
Tønsôi⁄_öã∫Æ
 &
t
);

100 
°d
::
ve˘‹
 <
CB
> 
_öãr_cb
;

101 
°d
::
ve˘‹
 <
CB
> 
_öåa_cb
;

102 #ifde‡
FIB


103 
°d
::
ve˘‹
 <
CB
> 
_c⁄d_öåa_cb
;

111 
°d
::
ve˘‹
<> 
™˚°‹s
;

112 
CB
 
cuº_m©chög
;

116 
ªf
;

117 
¥iv©e
:

118 
Envñ›e
 *
_ív
;

119 
	}
};

123 ˛as†
	cTønsôi⁄
 {

124 
	mpublic
:

125 
Tønsôi⁄
();

126 
Tønsôi⁄
(c⁄° Tønsôi⁄ &
t_
, 
boﬁ
 
ªf_t
=
Ál£
);

127 
Tønsôi⁄
(
Envñ›e
 *
e
, 
boﬁ
 
ªf_e
=
Ál£
);

129 
	mTønsôi⁄
 &
	m›î©‹
=(c⁄° 
Tønsôi⁄
 &
t_
);

130 
‰õnd
 
	m°d
::
o°ªam
 &
›î©‹
<<(
°d
::o°ªam &
os
, c⁄° 
	mTønsôi⁄
 &
	mt
);

132 
ªf
();

133 
uƒef
();

134 
c›y
();

135 
Execuã
(
SîvîSockë
 &
s
);

136 
Envñ›e
 *
	$GëEnvñ›e
() const;

137 
boﬁ
 
	`AddI¡øCB
(
CB
 &
c
);

138 
	$PrötLog
() const;

139 
	`AddI¡îCB
(
CB
 &
c
);

141 
	`moveCuºM©chög
();

143 
	`£t_cuº_m©chög
(c⁄° 
CB
 &
c
);

144 
CB
 &
	$gë_cuº_m©chög
() const;

146 
°d
::
ve˘‹
<> &
	$gë_™˚°‹s
() const;

147 
°d
::
ve˘‹
<> &
	`mod_™˚°‹s
();

150 #ifde‡
FIB


151 
°d
::
ve˘‹
 <
CB
> &
	`gë_öãr_cb
();

152 
°d
::
ve˘‹
 <
CB
> &
	`mod_öãr_cb
();

153 
°d
::
ve˘‹
 <
CB
> &
	`gë_öåa_cb
();

154 
°d
::
ve˘‹
 <
CB
> &
	`gë_c⁄d_öåa_cb
();

156 
	`AddC⁄dI¡øCB
(
CB
 &
c
);

159 
Tønsôi⁄_öã∫Æ
 *
t
;

	@scheduler/TransitionList.cpp

21 
	~"Tønsôi⁄Li°.hµ
"

22 
	~"ScheduÀr.hµ
"

24 
	~<io°ªam
>

25 
	~<s°ªam
>

27 
	gTønsôi⁄Li°
::
	$Tønsôi⁄Li°
 () {

28 
œ°_m©ched
 = -1;

29 
_Àaks_cou¡
 = 0;

30 
_Àaks_°rög
.
	`˛ór
 ();

31 
	}
}

33 
	gTønsôi⁄Li°
::
	$Tønsôi⁄Li°
 (
id
Ë: 
	$_id
 (
id
) {

34 
œ°_m©ched
 = -1;

35 
_Àaks_cou¡
 = 0;

36 
_Àaks_°rög
.
	`˛ór
 ();

37 
	}
}

39 
	gTønsôi⁄Li°
::
	$Tønsôi⁄Li°
 (
Tønsôi⁄Li°
 &
é
) {

40 *
this
 = 
é
;

41 
	}
}

44 
	gTønsôi⁄Li°
::~
	$Tønsôi⁄Li°
() {

45 
°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
ti
 = 
_éi°
.
	`begö
();

46 
°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
tõ
 = 
_éi°
.
	`íd
();

47 
i
=0;

49 ; 
ti
 !
tõ
;Åi++) {

51 
ti
->
	`uƒef
();

55 
	}
}

57 
	gTønsôi⁄Li°
& Tønsôi⁄Li°::
›î©‹
(
Tønsôi⁄Li°
 &
t
) {

58 
°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
ôî
;

59 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
ôî_íd
 = 
t
.
_éi°
.
íd
();

62 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
ti
 = 
_éi°
.
begö
();

63 
	g°d
::
ve˘‹
 <
Tønsôi⁄
>::
ôî©‹
 
tõ
 = 
_éi°
.
íd
();

66 
	gœ°_m©ched
 = 
t
.
œ°_m©ched
;

67 
	g_Àaks_°rög
 << 
	gt
._Àaks_°rög.
°r
();

68 
	g_Àaks_cou¡
 = 
t
.
_Àaks_cou¡
;

69 
	g_éi°
.
˛ór
 ();

70 
	g_id
 = 
t
.
GëId
 ();

72 
	gôî
 = 
t
.
_éi°
.
begö
(); iã∏!
ôî_íd
; iter++) {

73 
	g_éi°
.
push_back
(
Tønsôi⁄
(*
ôî
, 
åue
));

76 
	g°d
::
li°
<>::
ôî©‹
 
ui
 = 
t
.
_uli°
.
begö
();

77 
	g°d
::
li°
<>::
ôî©‹
 
uõ
 = 
t
.
_uli°
.
íd
();

78 ; 
	gui
 !
uõ
; ui++) {

79 
	g_uli°
.
push_back
(*
ui
);

81  (*
	gthis
);

84 
	gTønsôi⁄Li°
::
	$GëId
 () {

85  
_id
;

86 
	}
}

88 
boﬁ
 
	gTønsôi⁄Li°
::
	$AddTønsôi⁄
 (
Tønsôi⁄
 *
t
) {

89 
ödex
 = 
t
->
	`GëEnvñ›e
 ()->index;

90 
msize
 = ()
_éi°
.
	`size
();

92 i‡(
ödex
 <
msize
-1) {

93 i‡(*(
t
->
	`GëEnvñ›e
()Ë=*
_éi°
[
ödex
].GetEnvelope()) {

94 
_éi°
[
ödex
].
	`GëEnvñ›e
()->
issue_id
 = -1;

95 
t
->
	`uƒef
();

96 
t
->à
_éi°
[
ödex
].t;

98  
åue
;

112  
Ál£
;

115 
_éi°
.
	`push_back
 (*
t
);

116 
t
 = &
_éi°
.
	`back
();

117 
size
 = ()
_éi°
.
	`size
 ();

118 
CB
 
	`c
(
_id
, 
size
-1);

120 
Envñ›e
 *
ív_t
 = 
t
->
	`GëEnvñ›e
();

121 
Envñ›e
 *
ív_f
;

122 
boﬁ
 
blockög_Êag
 = 
Ál£
;

124 i‡(
ív_t
->
func_id
 =
ISEND
 ||Énv_t->func_id =
IRECV
) {

125 
_uli°
.
	`push_back
 (
ödex
);

126 } i‡(
ív_t
->
func_id
 =
WAIT
 ||Énv_t->func_id =
WAITALL
 ||

127 
ív_t
->
func_id
 =
TEST
 ||Énv_t->func_id =
TESTALL
) {

128 
°d
::
ve˘‹
<>::
ôî©‹
 
ô
 = 
ív_t
->
ªq_¥ocs
.
	`begö
 ();

129 
°d
::
ve˘‹
<>::
ôî©‹
 
ô_íd
 = 
ív_t
->
ªq_¥ocs
.
	`íd
 ();

130 ; 
ô
 !
ô_íd
; it++) {

131 i‡(
_éi°
[*
ô
].
	`AddI¡øCB
(
c
)) {

132 
t
->
	`mod_™˚°‹s
().
	`push_back
(*
ô
);

134 
_uli°
.
	`ªmove
 (*
ô
);

138 
°d
::
ve˘‹
<
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî
 = 
_éi°
.
	`rbegö
() + 1;

139 
°d
::
ve˘‹
<
Tønsôi⁄
>::
ªvî£_ôî©‹
 
ôî_íd
 = 
_éi°
.
	`ªnd
();

141 
i
 = 
size
 - 2;

142 
boﬁ
 
Êag
 = 
Ál£
;

143 ; 
ôî
 !
ôî_íd
; iter++) {

144 
Êag
 = 
	`öåaCB
(*
ôî
, *
t
);

145 i‡(
Êag
) {

146 i‡(!
blockög_Êag
) {

147 i‡(
ôî
->
	`AddI¡øCB
(
c
)) {

148 
t
->
	`mod_™˚°‹s
().
	`push_back
(
i
);

152 
ív_f
 = 
ôî
->
	`GëEnvñ›e
();

156 i‡(
ív_f
->
	`isBlockögTy≥
())

158 
blockög_Êag
 = 
åue
;

159 } i‡(
blockög_Êag
) {

160 i‡(
ív_t
->
func_id
 !
SEND
 && (
_uli°
.
	`size
 (Ë=0 || 
ödex
 < _uli°.
	`‰⁄t
 ())) {

161  
åue
;

166 
ív_f
 = 
ôî
->
	`GëEnvñ›e
();

167 i‡(
ív_f
->
func_id
 =
IRECV
) {

168 i‡(
ôî
->
	`AddI¡øCB
(
c
)) {

169 
t
->
	`mod_™˚°‹s
().
	`push_back
(
i
);

173 i‡(
ív_t
->
	`isRecvTy≥
() &&

174 
ív_f
->
§c
 =
ív_t
->src &&

175 
ív_f
->
comm
 =
ív_t
->comm &&

176 
ív_f
->
πag
 =
ív_t
->rtag)

177  
åue
;

178 } i‡(
ív_f
->
func_id
 =
ISEND
) {

179 i‡(
ôî
->
	`AddI¡øCB
(
c
)) {

180 
t
->
	`mod_™˚°‹s
().
	`push_back
(
i
);

184 i‡(
ív_t
->
	`isSídTy≥
() &&

185 
ív_f
->
de°
 =
ív_t
->dest &&

186 
ív_f
->
comm
 =
ív_t
->comm &&

187 
ív_f
->
°ag
 =
ív_t
->stag)

188  
åue
;

192 
i
--;

194  
åue
;

195 
	}
}

197 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gTønsôi⁄Li°
 &
	gé
) {

198 
	g°d
::
ve˘‹
<
Tønsôi⁄
>::
ôî©‹
 
ôî
;

199 
	g°d
::
ve˘‹
<
Tønsôi⁄
>::
ôî©‹
 
ôî_íd
 = 
é
.
_éi°
.
íd
();

200 
	gi
 = 0;

201 
boﬁ
 
	gföÆize_ˇŒed
 = 
Ál£
;

202 
	gôî
 = 
é
.
_éi°
.
begö
 (); iã∏!
ôî_íd
; iter++) {

203 
	gos
 << 
	gi
 << " " << *
	gôî
 << 
	g°d
::
ídl
;

204 i‡(
	gôî
->
GëEnvñ›e
()->
	gfunc_id
 =
FINALIZE
) {

205 
föÆize_ˇŒed
 = 
åue
;

207 
	gi
++;

209 i‡(
	gföÆize_ˇŒed
) {

210 i‡(
	gé
.
	g_Àaks_cou¡
 == 0) {

211 
os
 << "Nÿªsour˚Üók†dëe˘ed, " << 
i
 << " MPI callsÅrapped." << "\n";

213 
	gos
 << 
	gé
.
	g_Àaks_cou¡
 << "Ñesour˚Üók†dëe˘ed, " << 
	gi
 << " MPI callsÅrapped." << "\n";

216  
	gos
;

219 
	gTønsôi⁄Li°
::
	$PrötLog
 () {

220 
°d
::
ve˘‹
<
Tønsôi⁄
>::
ôî©‹
 
ôî
;

221 
°d
::
ve˘‹
<
Tønsôi⁄
>::
ôî©‹
 
ôî_íd
 = 
_éi°
.
	`íd
();

222 
i
 = 0;

223 
ôî
 = 
_éi°
.
	`begö
 (); iã∏!
ôî_íd
; iter++) {

224 
ôî
->
	`PrötLog
();

225 
ScheduÀr
::
_logfûe
 << 
°d
::
ídl
;

226 
i
++;

228 
ScheduÀr
::
_logfûe
 << 
_Àaks_°rög
.
	`°r
 ();

229 
	}
}

231 
	gTønsôi⁄Li°
::
	$size
(Ë{  
_éi°
.
	`size
(); 
	}
}

233 
	gTønsôi⁄Li°
::
	$îa£From
(
s
) {

241 
	}
}

	@scheduler/TransitionList.hpp

21 #i‚de‡
_TRANSITIONLIST_HPP


22 
	#_TRANSITIONLIST_HPP


	)

24 
	~<ve˘‹
>

25 
	~<li°
>

26 
	~<Æg‹ôhm
>

27 
	~<s°ªam
>

28 
	~<ˇs£π
>

29 
	~"ScheduÀr.hµ
"

30 
	~"Envñ›e.hµ
"

31 
	~"Tønsôi⁄.hµ
"

36 ˛as†
	cTønsôi⁄Li°
 {

38 
	mpublic
:

39 
Tønsôi⁄Li°
 ();

40 
Tønsôi⁄Li°
 (
id
);

42 
Tønsôi⁄Li°
 (TransitionList &);

43 ~
Tønsôi⁄Li°
();

45 
	mTønsôi⁄Li°
& 
	m›î©‹
(
Tønsôi⁄Li°
 &
t
);

47 
GëId
 ();

48 
boﬁ
 
AddTønsôi⁄
 (
Tønsôi⁄
 *
t
);

49 
PrötLog
();

50 
‰õnd
 
	m°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	mTønsôi⁄Li°
 &
	mé
);

51 
size
();

52 
îa£From
(
s
);

54 
	m°d
::
ve˘‹
 <
Tønsôi⁄
> 
_éi°
;

55 
	m°d
::
li°
 <> 
_uli°
;

56 
	m°d
::
°rög°ªam
 
_Àaks_°rög
;

57 
	m_Àaks_cou¡
;

58 
	mœ°_m©ched
;

60 
	m¥iv©e
:

61 
_id
;

62 
ölöe
 
boﬁ
 
	$öåaCB
 (
Tønsôi⁄
 &
f
, Tønsôi⁄ &
s
) {

63 
Envñ›e
 *
ív_f
 = 
f
.
	`GëEnvñ›e
();

64 
Envñ›e
 *
ív_s
 = 
s
.
	`GëEnvñ›e
();

70 i‡(
ív_f
->
	`isBlockögTy≥
 ()

72  
åue
;

79 i‡(
ív_f
->
	`isSídTy≥
 () &&

80 
ív_s
->
	`isSídTy≥
 () &&

81 
ív_f
->
de°
 =
ív_s
->dest &&

82 
ív_f
->
comm
 =
ív_s
->comm &&

83 
ív_f
->
°ag
 =
ív_s
->stag) {

84  
åue
;

89 i‡(
ív_f
->
	`isRecvTy≥
 () &&

90 
ív_s
->
	`isRecvTy≥
 () &&

91 (
ív_f
->
§c
 =
ív_s
->src ||

92 
ív_f
->
§c
 =
WILDCARD
) &&

93 
ív_f
->
comm
 =
ív_s
->comm &&

94 (
ív_f
->
πag
 =
ív_s
->rtag ||

95 
ív_f
->
πag
 =
WILDCARD
)) {

96  
åue
;

102 i‡(
ív_f
->
func_id
 =
IRECV
 &&

103 ((
ív_s
->
func_id
 =
WAIT
) ||

104 (
ív_s
->
func_id
 =
TEST
)) &&

105 
ív_f
->
cou¡
 =
ív_s
->count) {

106  
åue
;

109 i‡(
ív_f
->
func_id
 =
ISEND
 &&

110 ((
ív_s
->
func_id
 =
WAIT
) ||

111 (
ív_s
->
func_id
 =
TEST
)) &&

112 
ív_f
->
cou¡
 =
ív_s
->count) {

113  
åue
;

116 i‡(((
ív_s
->
func_id
 =
WAITALL
) ||

117 (
ív_s
->
func_id
 =
WAITANY
) ||

118 (
ív_s
->
func_id
 =
TESTANY
) ||

119 (
ív_s
->
func_id
 =
TESTALL
) ) &&

120 (
ív_f
->
func_id
 =
IRECV
 ||

121 
ív_f
->
func_id
 =
ISEND
)) {

124 
i
 = 0 ; i < 
ív_s
->
cou¡
 ; i++) {

125 i‡(
ív_s
->
ªq_¥ocs
[
i
] =
ív_f
->
ödex
) {

126  
åue
;

131 i‡(
ív_s
->
func_id
 =
FINALIZE
) {

132  
åue
;

135  
Ál£
;

138 
	}
};

139 
	g°d
::
o°ªam
 &
›î©‹
<< (
°d
::o°ªam &
os
, 
	gTønsôi⁄Li°
 &
	gé
);

	@scheduler/config.hpp

5 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_DLFCN_H
 1

	)

11 
	#HAVE_FORK
 1

	)

14 
	#HAVE_GETHOSTBYNAME
 1

	)

17 
	#HAVE_INTTYPES_H
 1

	)

21 
	#HAVE_MALLOC
 1

	)

24 
	#HAVE_MEMMOVE
 1

	)

27 
	#HAVE_MEMORY_H
 1

	)

30 
	#HAVE_MEMSET
 1

	)

33 
	#HAVE_MPI
 1

	)

36 
	#HAVE_NETDB_H
 1

	)

39 
	#HAVE_NETINET_IN_H
 1

	)

42 
	#HAVE_SELECT
 1

	)

45 
	#HAVE_SOCKET
 1

	)

48 
	#HAVE_STDBOOL_H
 1

	)

51 
	#HAVE_STDINT_H
 1

	)

54 
	#HAVE_STDLIB_H
 1

	)

57 
	#HAVE_STRDUP
 1

	)

60 
	#HAVE_STRINGS_H
 1

	)

63 
	#HAVE_STRING_H
 1

	)

66 
	#HAVE_SYS_SELECT_H
 1

	)

69 
	#HAVE_SYS_SOCKET_H
 1

	)

72 
	#HAVE_SYS_STAT_H
 1

	)

75 
	#HAVE_SYS_TIME_H
 1

	)

78 
	#HAVE_SYS_TYPES_H
 1

	)

81 
	#HAVE_SYS_WAIT_H
 1

	)

84 
	#HAVE_UNISTD_H
 1

	)

87 
	#HAVE_VFORK
 1

	)

93 
	#HAVE_WORKING_FORK
 1

	)

96 
	#HAVE_WORKING_VFORK
 1

	)

99 
	#HAVE__BOOL
 1

	)

103 
	#LT_OBJDIR
 ".libs/"

	)

109 
	#PACKAGE_BUGREPORT
 "gauss@cs.uèh.edu"

	)

112 
	#PACKAGE_NAME
 "i•"

	)

115 
	#PACKAGE_STRING
 "i• 0.2.0"

	)

118 
	#PACKAGE_TARNAME
 "i•"

	)

121 
	#PACKAGE_VERSION
 "0.2.0"

	)

124 
	#RETSIGTYPE
 

	)

127 
	#SELECT_TYPE_ARG1
 

	)

130 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

133 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

136 
	#STDC_HEADERS
 1

	)

139 
	#TIME_WITH_SYS_TIME
 1

	)

149 #i‚de‡
__˝lu•lus


	@scheduler/main.cpp

21 
	~"ScheduÀr.hµ
"

22 
	~<io°ªam
>

23 
	~<s°ªam
>

24 
	~<ve˘‹
>

25 
	~<˘ime
>

26 
	~<c°dlib
>

27 
	~"sched-›t.h
"

28 #i‚de‡
WIN32


29 
	~<sig«l.h
>

30 
	~<sys/waô.h
>

32 
	$chûd_sig«l_h™dÀr
 (
sig«l
)

34 i‡(
sig«l
 =
SIGCHLD
) {

35 
°©
;

36 
	`waôpid
 (-1, &
°©
, 
WNOHANG
) > 0) {

39 
	}
}

42 
	$maö
 (
¨gc
, **
¨gv
) {

46 
p‹t
 = 9999;

47 
num_˛õ¡s
 = 2;

48 
°d
::
°rög
 
	`£rvî
("localhost");

49 
boﬁ
 
£nd_block
 = 
Ál£
;

50 
°d
::
°rög
 
	`logfûe
("");

51 
°d
::
°rög
 
‚ame
;

52 
ªp‹t_¥ogªss
 = 0;

53 
°d
::
ve˘‹
<°d::
°rög
> 
Árgs
;

54 
boﬁ
 
mpiˇŒs
 = 
Ál£
;

55 
boﬁ
 
vîbo£
 = 
Ál£
;

56 
boﬁ
 
quõt
 = 
Ál£
;

57 
boﬁ
 
unix_sockës
 = 
Ál£
;

58 
boﬁ
 
fib
 = 
Ál£
;

59 
boﬁ
 
›ímp
 = 
åue
;

60 
boﬁ
 
u£_ív_⁄ly
 = 
Ál£
;

61 
boﬁ
 
b©ch_mode
 = 
Ál£
;

62 
ã_Exp_Mode
 
ex∂‹e_mode
 = 
EXP_MODE_ALL
;

63 
ex∂‹e_some
 = 0;

64 
boﬁ
 
°›_©_dódlock
 = 0;

65 
boﬁ
 
debug
 = 
Ál£
;

66 
boﬁ
 
no_am∂e_£t_fix
 = 
Ál£
;

67 
i
 = 0;

68 
bound
 = 0;

69 
boﬁ
 
limô_ouçut
 = 0;

71 
boﬁ
 
Ârs
 = 
Ál£
;

75 
	`§™d
 ((Ë
	`time
 (0));

77 
›t˘
 = 
	`›ti⁄Pro˚ss
–&
i•O±i⁄s
, 
¨gc
, 
¨gv
 );

78 
¨gc
 -
›t˘
;

79 
¨gv
 +
›t˘
;

83 if(
	`HAVE_OPT
(
VIEW_PROG_OUT_ONLY
)){

84 
limô_ouçut
 = 1;

87 if(
	`HAVE_OPT
(
PORT
)){

88 
p‹t
 = 
OPT_VALUE_PORT
;

90 if(
	`HAVE_OPT
(
NUMPROCS
)){

91 
num_˛õ¡s
 = 
OPT_VALUE_NUMPROCS
;

93 if(
	`HAVE_OPT
(
HOST
)){

94 
£rvî
.
	`assign
(
	`OPT_ARG
(
HOST
));

96 #i‚de‡
WIN32


97 if(
	`HAVE_OPT
(
US
)){

98 
unix_sockës
 = 
åue
;

101 if(
	`HAVE_OPT
(
BLOCK
)){

102 
£nd_block
 = 
åue
;

104 if(
	`HAVE_OPT
(
NOBLOCK
)){

105 
£nd_block
 = 
Ál£
;

107 if(
	`HAVE_OPT
(
LOGFILE
)){

108 
logfûe
.
	`assign
(
	`OPT_ARG
(
LOGFILE
));

110 if(
	`HAVE_OPT
(
MPICALLS
)){

111 
mpiˇŒs
 = 
åue
;

113 if(
	`HAVE_OPT
(
VERBOSE
)){

114 
vîbo£
 = 
åue
;

116 if(
	`HAVE_OPT
(
QUIET
)){

117 
quõt
 = 
åue
;

119 if(
	`HAVE_OPT
(
RPT_PROGRESS
)){

120 
ªp‹t_¥ogªss
 = 
OPT_VALUE_RPT_PROGRESS
;

122 #ifde‡
FIB


123 if(
	`HAVE_OPT
(
FIBOPT
)){

124 
fib
 = 
åue
;

127 #ifde‡
USE_OPENMP


128 if(
	`HAVE_OPT
(
DISABLE_OMP
)){

129 
›ímp
 = 
Ál£
;

132 if(
	`HAVE_OPT
(
ENV
)){

133 
u£_ív_⁄ly
 = 
åue
;

135 if(
	`HAVE_OPT
(
DISTRIBUTED
)){

136 
b©ch_mode
 = 
åue
;

138 if(
	`HAVE_OPT
(
EXP_MODE
)){

139 
ex∂‹e_mode
 = (
ã_Exp_Mode
)
OPT_VALUE_EXP_MODE
;

141 if(
	`HAVE_OPT
(
EXP_SOME
)){

142 
ex∂‹e_some
 = 
OPT_VALUE_EXP_SOME
;

144 if(
	`HAVE_OPT
(
STOP_AT_DEADLOCK
)){

145 
°›_©_dódlock
 = 
OPT_VALUE_STOP_AT_DEADLOCK
;

147 #ifde‡
CONFIG_DEBUG_SCHED


148 if(
	`HAVE_OPT
(
DEBUG_SCHED
)) {

149 
debug
 = 
åue
;

152 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


153 if(
	`HAVE_OPT
(
NO_AMPLE_SET_FIX
)) {

154 
no_am∂e_£t_fix
 = 
åue
;

157 #ifde‡
CONFIG_BOUNDED_MIXING


158 if(
	`HAVE_OPT
(
BOUND
)) {

159 
bound
 = 
OPT_VALUE_BOUND
;

163 i‡(
	`HAVE_OPT
(
FPRS
)) {

164 
Ârs
 = 
åue
;

168 
‚ame
 = 
°d
::
	`°rög
(
¨gv
[
i
++]);

169 
°d
::
o°rög°ªam
 
Árgs_°rög
;

170  ; 
i
 < 
¨gc
; i++) {

171 
°d
::
°rög
 
	`°r
(
¨gv
[
i
]);

172 
Árgs
.
	`push_back
(
°r
);

173 
Árgs_°rög
 << 
°r
 << " ";

176 
°d
::
o°rög°ªam
 
p‹t_°rs
;

177 
°d
::
o°rög°ªam
 
num_˛õ¡ss
;

178 
p‹t_°rs
 << 
p‹t
;

179 
num_˛õ¡ss
 << 
num_˛õ¡s
;

191 
ScheduÀr
::
	`SëP¨ams
(
p‹t_°rs
.
	`°r
(), 
num_˛õ¡ss
.°r(), 
£rvî
,

192 
£nd_block
, 
‚ame
,

193 
logfûe
, 
Árgs
, 
mpiˇŒs
, 
vîbo£
, 
quõt
, 
unix_sockës
,

194 
ªp‹t_¥ogªss
, 
fib
, 
›ímp
, 
u£_ív_⁄ly
,

195 
b©ch_mode
, 
°›_©_dódlock
, 
ex∂‹e_mode
,

196 
ex∂‹e_some
, 
NULL
, NULL, NULL, 
debug
, 
no_am∂e_£t_fix
,

197 
bound
, 
limô_ouçut
, 
Ârs
);

200 i‡(!
quõt
 && !
limô_ouçut
) {

201 
°d
::
cout
 << "ISP - Insôu P¨tü»Ordî" << std::
ídl
;

202 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

203 
°d
::
cout
 << "Comm™d: " << 
‚ame
 << " " << 
Árgs_°rög
.
	`°r
(Ë<< std::
ídl
;

204 
°d
::
cout
 << "Numbî Procs: " << 
num_˛õ¡s
 << std::
ídl
;

205 i‡(
unix_sockës
) {

206 
°d
::
cout
 << "Sîvî: Loˇ»Sockë" << std::
ídl
;

208 
°d
::
cout
 << "Sîvî: " << 
£rvî
 << ":" << 
p‹t
 << std::
ídl
;

210 
°d
::
cout
 << "Blockög Síds: " << (
£nd_block
 ? "E«bÀd" : "DißbÀd"Ë<< std::
ídl
;

211 #ifde‡
FIB


212 i‡(
fib
) {

213 
°d
::
cout
 << "FIB: E«bÀd" << std::
ídl
;

216 
°d
::
cout
 << "-----------------------------------------" << std::
ídl
;

219 #i‚de‡
WIN32


222 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

226 
	`sig«l
(
SIGCHLD
, 
chûd_sig«l_h™dÀr
);

229 
ScheduÀr
::
	`GëIn°™˚
 ()->
	`SèπMC
 ();

231 
	}
}

233 #ifde‡
WIN32


238 
DWORD
 
	$execvp
(c⁄° *
fûe
, c⁄° **
¨gv
) {

240 
°d
::
°rög°ªam
 
cmdLöe
;

245 
i
 = 0; 
¨gv
[i]; i++)

247 
cmdLöe
 << "\"";

248 
cmdLöe
 << 
¨gv
[
i
];

249 
cmdLöe
 << "\"";

250 
cmdLöe
 << " ";

256 
STARTUPINFO
 
siSèπupInfo
;

257 
PROCESS_INFORMATION
 
piPro˚ssInfo
;

258 
SECURITY_ATTRIBUTES
 
ßSecurôyAâribuãs
;

259 
	`mem£t
(&
siSèπupInfo
, 0, (siStartupInfo));

260 
	`mem£t
(&
piPro˚ssInfo
, 0, (piProcessInfo));

261 
	`mem£t
(&
ßSecurôyAâribuãs
, 0, (saSecurityAttributes));

267 
siSèπupInfo
.
cb
 = (siStartupInfo);

268 
siSèπupInfo
.
dwFœgs
 |
STARTF_USESTDHANDLES
;

269 
siSèπupInfo
.
hStdEº‹
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

270 
siSèπupInfo
.
hStdOuçut
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

271 
siSèπupInfo
.
hStdI≈ut
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

273 
ßSecurôyAâribuãs
.
nLígth
 = (saSecurityAttributes);

274 
ßSecurôyAâribuãs
.
bInhîôH™dÀ
 = 
FALSE
;

275 
ßSecurôyAâribuãs
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

280 i‡(!
	`Cª©ePro˚ss
(
fûe
, 
c⁄°_ˇ°
<*>(
cmdLöe
.
	`°r
().
	`c_°r
()),

281 &
ßSecurôyAâribuãs
, &ßSecurôyAâribuãs, 
TRUE
,

282 
CREATE_DEFAULT_ERROR_MODE
, 
NULL
, NULL, &
siSèπupInfo
,

283 &
piPro˚ssInfo
)) {

287 
	`Clo£H™dÀ
(
piPro˚ssInfo
.
hPro˚ss
);

288 
	`Clo£H™dÀ
(
piPro˚ssInfo
.
hThªad
);

293 
DWORD
 
Pro˚ssID
 = 
piPro˚ssInfo
.
dwPro˚ssId
;

298 
	`Clo£H™dÀ
(
piPro˚ssInfo
.
hPro˚ss
);

299 
	`Clo£H™dÀ
(
piPro˚ssInfo
.
hThªad
);

301  
Pro˚ssID
;

302 
	}
}

	@scheduler/name2id.cpp

21 
	~"«me2id.hµ
"

24 
	g°d
::
m≠
<
°d
::
°rög
, > 
	g«me2id
::
«me_id
;

25 
boﬁ
 
	g«me2id
::
öô_d⁄e
 = 
Ál£
;

28 
	g«me2id
::
	$doInô
 () {

30 i‡(
öô_d⁄e
) {

34 
«me_id
["As£π"] = 
ASSERT
;

36 
«me_id
["MPI_Síd"] = 
SEND
;

37 
«me_id
["Síd"] = 
SEND
;

39 
«me_id
["MPI_I£nd"] = 
ISEND
;

40 
«me_id
["I£nd"] = 
ISEND
;

42 
«me_id
["MPI_S£nd"] = 
SSEND
;

43 
«me_id
["S£nd"] = 
SSEND
;

45 
«me_id
["MPI_R£nd"] = 
RSEND
;

46 
«me_id
["R£nd"] = 
RSEND
;

48 
«me_id
["MPI_Síd_öô"] = 
SEND_INIT
;

49 
«me_id
["Síd_öô"] = 
SEND_INIT
;

51 
«me_id
["MPI_Recv"] = 
RECV
;

52 
«me_id
["Recv"] = 
RECV
;

54 
«me_id
["MPI_Iªcv"] = 
IRECV
;

55 
«me_id
["Iªcv"] = 
IRECV
;

57 
«me_id
["MPI_Recv_öô"] = 
RECV_INIT
;

58 
«me_id
["Recv_öô"] = 
RECV_INIT
;

60 
«me_id
["MPI_Probe"] = 
PROBE
;

61 
«me_id
["Probe"] = 
PROBE
;

63 
«me_id
["MPI_I¥obe"] = 
IPROBE
;

64 
«me_id
["I¥obe"] = 
IPROBE
;

66 
«me_id
["MPI_Sèπ"] = 
START
;

67 
«me_id
["Sèπ"] = 
START
;

69 
«me_id
["MPI_SèπÆl"] = 
STARTALL
;

70 
«me_id
["SèπÆl"] = 
STARTALL
;

72 
«me_id
["MPI_Reque°_‰ì"] = 
REQUEST_FREE
;

73 
«me_id
["Reque°_‰ì"] = 
REQUEST_FREE
;

75 
«me_id
["MPI_Waô"] = 
WAIT
;

76 
«me_id
["Waô"] = 
WAIT
;

78 
«me_id
["MPI_WaôÆl"] = 
WAITALL
;

79 
«me_id
["WaôÆl"] = 
WAITALL
;

81 
«me_id
["MPI_Waô™y"] = 
WAITANY
;

82 
«me_id
["Waô™y"] = 
WAITANY
;

84 
«me_id
["MPI_Te°™y"] = 
TESTANY
;

85 
«me_id
["Te°™y"] = 
TESTANY
;

87 
«me_id
["MPI_Te°Æl"] = 
TESTALL
;

88 
«me_id
["Te°Æl"] = 
TESTALL
;

90 
«me_id
["MPI_Te°"] = 
TEST
;

91 
«me_id
["Te°"] = 
TEST
;

93 
«me_id
["MPI_Sídªcv"] = 
SENDRECV
;

94 
«me_id
["Sídªcv"] = 
SENDRECV
;

96 
«me_id
["MPI_B¨rõr"] = 
BARRIER
;

97 
«me_id
["B¨rõr"] = 
BARRIER
;

99 
«me_id
["MPI_Bˇ°"] = 
BCAST
;

100 
«me_id
["Bˇ°"] = 
BCAST
;

102 
«me_id
["MPI_Sˇâî"] = 
SCATTER
;

103 
«me_id
["Sˇâî"] = 
SCATTER
;

105 
«me_id
["MPI_G©hî"] = 
GATHER
;

106 
«me_id
["G©hî"] = 
GATHER
;

108 
«me_id
["MPI_Sˇâîv"] = 
SCATTERV
;

109 
«me_id
["Sˇâîv"] = 
SCATTERV
;

111 
«me_id
["MPI_G©hîv"] = 
GATHERV
;

112 
«me_id
["G©hîv"] = 
GATHERV
;

114 
«me_id
["MPI_AŒg©hî"] = 
ALLGATHER
;

115 
«me_id
["AŒg©hî"] = 
ALLGATHER
;

117 
«me_id
["MPI_AŒG©hîv"] = 
ALLGATHERV
;

118 
«me_id
["AŒg©hîv"] = 
ALLGATHERV
;

120 
«me_id
["MPI_AŒtﬂŒ"] = 
ALLTOALL
;

121 
«me_id
["AŒtﬂŒ"] = 
ALLTOALL
;

123 
«me_id
["MPI_AŒtﬂŒv"] = 
ALLTOALLV
;

124 
«me_id
["AŒtﬂŒv"] = 
ALLTOALLV
;

126 
«me_id
["MPI_Sˇn"] = 
SCAN
;

127 
«me_id
["Sˇn"] = 
SCAN
;

129 
«me_id
["MPI_Redu˚"] = 
REDUCE
;

130 
«me_id
["Redu˚"] = 
REDUCE
;

132 
«me_id
["MPI_Redu˚_sˇâî"] = 
REDUCE_SCATTER
;

133 
«me_id
["Redu˚_sˇâî"] = 
REDUCE_SCATTER
;

135 
«me_id
["MPI_AŒªdu˚"] = 
ALLREDUCE
;

136 
«me_id
["AŒªdu˚"] = 
ALLREDUCE
;

138 
«me_id
["MPI_Comm_¸óã"] = 
COMM_CREATE
;

139 
«me_id
["Comm_¸óã"] = 
COMM_CREATE
;

141 
«me_id
["MPI_C¨t_¸óã"] = 
CART_CREATE
;

142 
«me_id
["C¨t_¸óã"] = 
CART_CREATE
;

144 
«me_id
["MPI_Comm_dup"] = 
COMM_DUP
;

145 
«me_id
["Comm_dup"] = 
COMM_DUP
;

147 
«me_id
["MPI_Comm_•lô"] = 
COMM_SPLIT
;

148 
«me_id
["Comm_•lô"] = 
COMM_SPLIT
;

150 
«me_id
["MPI_Comm_‰ì"] = 
COMM_FREE
;

151 
«me_id
["Comm_‰ì"] = 
COMM_FREE
;

153 
«me_id
["MPI_Ab‹t"] = 
ABORT
;

154 
«me_id
["Ab‹t"] = 
ABORT
;

156 
«me_id
["MPI_FöÆize"] = 
FINALIZE
;

157 
«me_id
["FöÆize"] = 
FINALIZE
;

159 
«me_id
["Lók"] = 
LEAK
;

162 
«me_id
["MPI_Pc⁄åﬁ"] = 
PCONTROL
;

163 
«me_id
["Pc⁄åﬁ"] = 
PCONTROL
;

164 
«me_id
["MPI_Exsˇn"] = 
EXSCAN
;

165 
«me_id
["Exsˇn"] = 
EXSCAN
;

168 
öô_d⁄e
 = 
åue
;

170 
	}
}

172 
	g«me2id
::
gëId
 (
°d
::
°rög
 
«me
) {

174 i‡(! 
öô_d⁄e
) {

175 
doInô
 ();

178 
	g°d
::
m≠
 <
°d
::
°rög
, >::
ôî©‹
 
ôî
;

179 i‡((
	gôî
 = 
«me_id
.
föd
 (
«me
)Ë=«me_id.
íd
 ()) {

182  (*
	gôî
).
	g£c⁄d
;

	@scheduler/name2id.hpp

21 #i‚de‡
_NAME_2_ID_HPP


22 
	#_NAME_2_ID_HPP


	)

24 
	~<m≠
>

25 
	~<°rög
>

28 
	mASSERT
,

29 
	mSEND
,

30 
	mRSEND
,

31 
	mSSEND
,

32 
	mSEND_INIT
,

33 
	mRECV
,

34 
	mPROBE
,

35 
	mIPROBE
,

36 
	mSENDRECV
,

37 
	mRECV_INIT
,

38 
	mBARRIER
,

39 
	mBCAST
,

40 
	mSCATTER
,

41 
	mGATHER
,

42 
	mSCATTERV
,

43 
	mGATHERV
,

44 
	mALLGATHER
,

45 
	mALLGATHERV
,

46 
	mALLTOALL
,

47 
	mALLTOALLV
,

48 
	mSCAN
,

49 
	mREDUCE
,

50 
	mREDUCE_SCATTER
,

51 
	mISEND
,

52 
	mIRECV
,

53 
	mSTART
,

54 
	mSTARTALL
,

55 
	mWAIT
,

56 
	mTEST
,

57 
	mALLREDUCE
,

58 
	mWAITALL
,

59 
	mTESTALL
,

60 
	mWAITANY
,

61 
	mTESTANY
,

62 
	mREQUEST_FREE
,

63 
	mCART_CREATE
,

64 
	mCOMM_CREATE
,

65 
	mCOMM_DUP
,

66 
	mCOMM_SPLIT
,

67 
	mCOMM_FREE
,

68 
	mABORT
,

69 
	mFINALIZE
,

70 
	mLEAK


72 , 
	mPCONTROL


73 , 
	mEXSCAN


76 ˛as†
	c«me2id
 {

79 
	mpublic
:

87 
gëId
 (
°d
::
°rög
 
«me
);

89 
	m¥iv©e
:

90 
doInô
 ();

92 
	m°d
::
m≠
 <
°d
::
°rög
, > 
	m«me_id
;

93 
boﬁ
 
	möô_d⁄e
;

98 
«me2id
 ();

99 
«me2id
 (name2id &);

100 
	m«me2id
& 
	m›î©‹
(
«me2id
 &);

	@scheduler/sched-opt.c

28 
	~<sys/ty≥s.h
>

29 
	~<limôs.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<î∫o.h
>

33 
FILE
 * 
›ti⁄_ußge_Â
;

34 
	#OPTION_CODE_COMPILE
 1

	)

35 
	~"sched-›t.h
"

37 #ifde‡ 
__˝lu•lus


43 
tSCC
 
zC›yright
[] =

47 
tSCC
 
zC›yrightNŸi˚
[54] =

50 
tUßgeProc
 
›ti⁄Ußge
;

52 #i‚de‡
NULL


53 
	#NULL
 0

	)

55 #i‚de‡
EXIT_SUCCESS


56 
	#EXIT_SUCCESS
 0

	)

58 #i‚de‡
EXIT_FAILURE


59 
	#EXIT_FAILURE
 1

	)

65 
tSCC
 
	gzNum¥ocsText
[] =

67 
tSCC
 
	gzNum¥ocs_NAME
[] = "NUMPROCS";

68 
tSCC
 
	gzNum¥ocs_Name
[] = "numprocs";

69 
	#zNum¥ocsDeÁu…Arg
 ((c⁄°*)2)

	)

70 
	#NUMPROCS_FLAGS
 (
OPTST_DISABLED
 \

71 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_NUMERIC
))

	)

76 
tSCC
 
	gzP‹tText
[] =

78 
tSCC
 
	gzP‹t_NAME
[] = "PORT";

79 
tSCC
 
	gzP‹t_Name
[] = "port";

80 
	#zP‹tDeÁu…Arg
 ((c⁄°*)9999)

	)

81 
	#PORT_FLAGS
 (
OPTST_DISABLED
 \

82 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_NUMERIC
))

	)

87 
tSCC
 
	gzHo°Text
[] =

89 
tSCC
 
	gzHo°_NAME
[] = "HOST";

90 
tSCC
 
	gzHo°_Name
[] = "host";

91 
tSCC
 
	gzHo°DeÁu…Arg
[] = "localhost";

92 
	#HOST_FLAGS
 (
OPTST_DISABLED
 \

93 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
))

	)

98 #i‚de‡
WIN_32


99 
tSCC
 
	gzUsText
[] =

101 
tSCC
 
	gzUs_NAME
[] = "US";

102 
tSCC
 
	gzUs_Name
[] = "us";

103 
	#US_FLAGS
 (
OPTST_DISABLED
)

	)

106 
	#US_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

107 
	#zUs_NAME
 
NULL


	)

108 
	#zUsText
 
NULL


	)

109 
	#zUs_Name
 
NULL


	)

116 
tSCC
 
	gzBlockText
[] =

118 
tSCC
 
	gzBlock_NAME
[] = "BLOCK";

119 
tSCC
 
	gzBlock_Name
[] = "block";

121 
	gaBlockC™tLi°
[] = {

122 
INDEX_OPT_NOBLOCK
, 
NO_EQUIVALENT
 };

123 
	#BLOCK_FLAGS
 (
OPTST_DISABLED
)

	)

129 
tSCC
 
	gzNoblockText
[] =

131 
tSCC
 
	gzNoblock_NAME
[] = "NOBLOCK";

132 
tSCC
 
	gzNoblock_Name
[] = "noblock";

134 
	gaNoblockC™tLi°
[] = {

135 
INDEX_OPT_BLOCK
, 
NO_EQUIVALENT
 };

136 
	#NOBLOCK_FLAGS
 (
OPTST_DISABLED
)

	)

141 
tSCC
 
	gzLogfûeText
[] =

143 
tSCC
 
	gzLogfûe_NAME
[] = "LOGFILE";

144 
tSCC
 
	gzLogfûe_Name
[] = "logfile";

145 
	#LOGFILE_FLAGS
 (
OPTST_DISABLED
 \

146 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
))

	)

151 
tSCC
 
	gzMpiˇŒsText
[] =

153 
tSCC
 
	gzMpiˇŒs_NAME
[] = "MPICALLS";

154 
tSCC
 
	gzMpiˇŒs_Name
[] = "mpicalls";

155 
	#MPICALLS_FLAGS
 (
OPTST_DISABLED
)

	)

160 
tSCC
 
	gzVîbo£Text
[] =

162 
tSCC
 
	gzVîbo£_NAME
[] = "VERBOSE";

163 
tSCC
 
	gzVîbo£_Name
[] = "verbose";

164 
	#VERBOSE_FLAGS
 (
OPTST_DISABLED
)

	)

170 
tSCC
 
	gzQuõtText
[] =

172 
tSCC
 
	gzQuõt_NAME
[] = "QUIET";

173 
tSCC
 
	gzQuõt_Name
[] = "quiet";

175 
	gaQuõtC™tLi°
[] = {

176 
INDEX_OPT_VERBOSE
, 
NO_EQUIVALENT
 };

177 
	#QUIET_FLAGS
 (
OPTST_DISABLED
)

	)

182 
tSCC
 
	gzR±_ProgªssText
[] =

184 
tSCC
 
	gzR±_Progªss_NAME
[] = "RPT_PROGRESS";

185 
tSCC
 
	gzR±_Progªss_Name
[] = "rpt-progress";

186 
	#RPT_PROGRESS_FLAGS
 (
OPTST_DISABLED
 \

187 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_NUMERIC
))

	)

192 
tSCC
 
	gzDi°ribuãdText
[] =

194 
tSCC
 
	gzDi°ribuãd_NAME
[] = "DISTRIBUTED";

195 
tSCC
 
	gzDi°ribuãd_Name
[] = "distributed";

196 
	#DISTRIBUTED_FLAGS
 (
OPTST_DISABLED
)

	)

201 #ifde‡
FIB


202 
tSCC
 
	gzFib›tText
[] =

204 
tSCC
 
	gzFib›t_NAME
[] = "FIBOPT";

205 
tSCC
 
	gzFib›t_Name
[] = "fibopt";

206 
	#FIBOPT_FLAGS
 (
OPTST_DISABLED
)

	)

209 
	#FIBOPT_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

210 
	#zFib›t_NAME
 
NULL


	)

211 
	#zFib›tText
 
NULL


	)

212 
	#zFib›t_Name
 
NULL


	)

218 
tSCC
 
	gzVõw_Prog_Out_O∆yText
[] =

220 
tSCC
 
	gzVõw_Prog_Out_O∆y_NAME
[] = "VIEW_PROG_OUT_ONLY";

221 
tSCC
 
	gzVõw_Prog_Out_O∆y_Name
[] = "view-prog-out-only";

222 
	#VIEW_PROG_OUT_ONLY_FLAGS
 (
OPTST_DISABLED
)

	)

227 #ifde‡
USE_OPENMP


228 
tSCC
 
	gzDißbÀ_OmpText
[] =

230 
tSCC
 
	gzDißbÀ_Omp_NAME
[] = "DISABLE_OMP";

231 
tSCC
 
	gzDißbÀ_Omp_Name
[] = "disable-omp";

232 
	#DISABLE_OMP_FLAGS
 (
OPTST_DISABLED
)

	)

235 
	#DISABLE_OMP_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

236 
	#zDißbÀ_Omp_NAME
 
NULL


	)

237 
	#zDißbÀ_OmpText
 
NULL


	)

238 
	#zDißbÀ_Omp_Name
 
NULL


	)

244 
tSCC
 
	gzExp_ModeText
[] =

246 
tSCC
 
	gzExp_Mode_NAME
[] = "EXP_MODE";

247 
tSCC
 
	gzExp_Mode_Name
[] = "exp-mode";

248 
	#zExp_ModeDeÁu…Arg
 ((c⁄°*)
EXP_MODE_ALL
)

	)

249 
	#EXP_MODE_FLAGS
 (
OPTST_DISABLED
 \

250 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_ENUMERATION
))

	)

255 
tSCC
 
	gzEnvText
[] =

257 
tSCC
 
	gzEnv_NAME
[] = "ENV";

258 
tSCC
 
	gzEnv_Name
[] = "env";

259 
	#ENV_FLAGS
 (
OPTST_DISABLED
)

	)

264 
tSCC
 
	gzExp_SomeText
[] =

266 
tSCC
 
	gzExp_Some_NAME
[] = "EXP_SOME";

267 
tSCC
 
	gzExp_Some_Name
[] = "exp-some";

268 
	#EXP_SOME_FLAGS
 (
OPTST_DISABLED
 \

269 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_NUMERIC
))

	)

274 
tSCC
 
	gzSt›_At_DódlockText
[] =

276 
tSCC
 
	gzSt›_At_Dódlock_NAME
[] = "STOP_AT_DEADLOCK";

277 
tSCC
 
	gzSt›_At_Dódlock_Name
[] = "stop-at-deadlock";

278 
	#zSt›_At_DódlockDeÁu…Arg
 ((c⁄°*)
AG_FALSE
)

	)

279 
	#STOP_AT_DEADLOCK_FLAGS
 (
OPTST_DISABLED
 \

280 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_BOOLEAN
))

	)

285 #ifde‡
CONFIG_DEBUG_SCHED


286 
tSCC
 
	gzDebug_SchedText
[] =

288 
tSCC
 
	gzDebug_Sched_NAME
[] = "DEBUG_SCHED";

289 
tSCC
 
	gzDebug_Sched_Name
[] = "debug-sched";

290 
	#DEBUG_SCHED_FLAGS
 (
OPTST_DISABLED
)

	)

293 
	#DEBUG_SCHED_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

294 
	#zDebug_Sched_NAME
 
NULL


	)

295 
	#zDebug_SchedText
 
NULL


	)

296 
	#zDebug_Sched_Name
 
NULL


	)

302 #ifde‡
CONFIG_OPTIONAL_AMPLE_SET_FIX


303 
tSCC
 
	gzNo_Am∂e_Së_FixText
[] =

305 
tSCC
 
	gzNo_Am∂e_Së_Fix_NAME
[] = "NO_AMPLE_SET_FIX";

306 
tSCC
 
	gzNo_Am∂e_Së_Fix_Name
[] = "no-ample-set-fix";

307 
	#NO_AMPLE_SET_FIX_FLAGS
 (
OPTST_DISABLED
)

	)

310 
	#NO_AMPLE_SET_FIX_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

311 
	#zNo_Am∂e_Së_Fix_NAME
 
NULL


	)

312 
	#zNo_Am∂e_Së_FixText
 
NULL


	)

313 
	#zNo_Am∂e_Së_Fix_Name
 
NULL


	)

319 
tSCC
 
	gzBoundText
[] =

321 
tSCC
 
	gzBound_NAME
[] = "BOUND";

322 
tSCC
 
	gzBound_Name
[] = "bound";

323 
	#BOUND_FLAGS
 (
OPTST_DISABLED
 \

324 | 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_NUMERIC
))

	)

329 
tSCC
 
	gzF¥sText
[] =

331 
tSCC
 
	gzF¥s_NAME
[] = "FPRS";

332 
tSCC
 
	gzF¥s_Name
[] = "fprs";

333 
	#FPRS_FLAGS
 (
OPTST_DISABLED
)

	)

338 
tSCC
 
	gzHñpText
[] = "DisplayÉxtended usage informationándÉxit";

339 
tSCC
 
	gzHñp_Name
[] = "help";

340 #ifde‡
HAVE_WORKING_FORK


341 
	#OPTST_MORE_HELP_FLAGS
 (
OPTST_IMM
 | 
OPTST_NO_INIT
)

	)

342 
tSCC
 
	gzM‹e_Hñp_Name
[] = "more-help";

343 
tSCC
 
	gzM‹e_HñpText
[] = "Extended usage informationÖassedÅhruÖager";

345 
	#OPTST_MORE_HELP_FLAGS
 (
OPTST_OMITTED
 | 
OPTST_NO_INIT
)

	)

346 
	#zM‹e_Hñp_Name
 
NULL


	)

347 
	#zM‹e_HñpText
 
NULL


	)

349 #ifde‡
NO_OPTIONAL_OPT_ARGS


350 
	#OPTST_VERSION_FLAGS
 
OPTST_IMM
 | 
OPTST_NO_INIT


	)

352 
	#OPTST_VERSION_FLAGS
 
	`OPTST_SET_ARGTYPE
(
OPARG_TYPE_STRING
) | \

353 
OPTST_ARG_OPTIONAL
 | 
OPTST_IMM
 | 
OPTST_NO_INIT


	)

356 
tSCC
 
	gzVîsi⁄Text
[] = "Output version informationándÉxit";

357 
tSCC
 
	gzVîsi⁄_Name
[] = "version";

361 
tO±Proc


362 
›ti⁄BoﬁónVÆ
, 
›ti⁄NumîicVÆ
, 
›ti⁄PagedUßge
,

363 
›ti⁄PrötVîsi⁄
;

364 
tO±Proc


365 
	gdoO±Exp_Mode
, 
	gdoO±Num¥ocs
, 
	gdoO±P‹t
, 
	gdoUßgeO±
;

371 
tO±Desc
 
	g›tDesc
[ 
OPTION_CT
 ] = {

372 { 0, 
VALUE_OPT_NUMPROCS
,

373  0, 
VALUE_OPT_NUMPROCS
,

374  
NO_EQUIVALENT
,

376  
NUMPROCS_FLAGS
, 0,

377  { 
zNum¥ocsDeÁu…Arg
 },

378  
NULL
,

379  
NULL
, NULL,

380  
doO±Num¥ocs
,

381  
zNum¥ocsText
, 
zNum¥ocs_NAME
, 
zNum¥ocs_Name
,

382  
NULL
, NULL },

384 { 1, 
VALUE_OPT_PORT
,

385  1, 
VALUE_OPT_PORT
,

386  
NO_EQUIVALENT
,

388  
PORT_FLAGS
, 0,

389  { 
zP‹tDeÁu…Arg
 },

390  
NULL
,

391  
NULL
, NULL,

392  
doO±P‹t
,

393  
zP‹tText
, 
zP‹t_NAME
, 
zP‹t_Name
,

394  
NULL
, NULL },

396 { 2, 
VALUE_OPT_HOST
,

397  2, 
VALUE_OPT_HOST
,

398  
NO_EQUIVALENT
,

400  
HOST_FLAGS
, 0,

401  { 
zHo°DeÁu…Arg
 },

402  
NULL
,

403  
NULL
, NULL,

404  
NULL
,

405  
zHo°Text
, 
zHo°_NAME
, 
zHo°_Name
,

406  
NULL
, NULL },

408 { 3, 
VALUE_OPT_US
,

409  3, 
VALUE_OPT_US
,

410  
NO_EQUIVALENT
,

412  
US_FLAGS
, 0,

413  { 
NULL
 },

414  
NULL
,

415  
NULL
, NULL,

416  
NULL
,

417  
zUsText
, 
zUs_NAME
, 
zUs_Name
,

418  
NULL
, NULL },

420 { 4, 
VALUE_OPT_BLOCK
,

421  4, 
VALUE_OPT_BLOCK
,

422  
NO_EQUIVALENT
,

424  
BLOCK_FLAGS
, 0,

425  { 
NULL
 },

426  
NULL
,

427  
NULL
, 
aBlockC™tLi°
,

428  
NULL
,

429  
zBlockText
, 
zBlock_NAME
, 
zBlock_Name
,

430  
NULL
, NULL },

432 { 5, 
VALUE_OPT_NOBLOCK
,

433  5, 
VALUE_OPT_NOBLOCK
,

434  
NO_EQUIVALENT
,

436  
NOBLOCK_FLAGS
, 0,

437  { 
NULL
 },

438  
NULL
,

439  
NULL
, 
aNoblockC™tLi°
,

440  
NULL
,

441  
zNoblockText
, 
zNoblock_NAME
, 
zNoblock_Name
,

442  
NULL
, NULL },

444 { 6, 
VALUE_OPT_LOGFILE
,

445  6, 
VALUE_OPT_LOGFILE
,

446  
NO_EQUIVALENT
,

448  
LOGFILE_FLAGS
, 0,

449  { 
NULL
 },

450  
NULL
,

451  
NULL
, NULL,

452  
NULL
,

453  
zLogfûeText
, 
zLogfûe_NAME
, 
zLogfûe_Name
,

454  
NULL
, NULL },

456 { 7, 
VALUE_OPT_MPICALLS
,

457  7, 
VALUE_OPT_MPICALLS
,

458  
NO_EQUIVALENT
,

460  
MPICALLS_FLAGS
, 0,

461  { 
NULL
 },

462  
NULL
,

463  
NULL
, NULL,

464  
NULL
,

465  
zMpiˇŒsText
, 
zMpiˇŒs_NAME
, 
zMpiˇŒs_Name
,

466  
NULL
, NULL },

468 { 8, 
VALUE_OPT_VERBOSE
,

469  8, 
VALUE_OPT_VERBOSE
,

470  
NO_EQUIVALENT
,

472  
VERBOSE_FLAGS
, 0,

473  { 
NULL
 },

474  
NULL
,

475  
NULL
, NULL,

476  
NULL
,

477  
zVîbo£Text
, 
zVîbo£_NAME
, 
zVîbo£_Name
,

478  
NULL
, NULL },

480 { 9, 
VALUE_OPT_QUIET
,

481  9, 
VALUE_OPT_QUIET
,

482  
NO_EQUIVALENT
,

484  
QUIET_FLAGS
, 0,

485  { 
NULL
 },

486  
NULL
,

487  
NULL
, 
aQuõtC™tLi°
,

488  
NULL
,

489  
zQuõtText
, 
zQuõt_NAME
, 
zQuõt_Name
,

490  
NULL
, NULL },

492 { 10, 
VALUE_OPT_RPT_PROGRESS
,

493  10, 
VALUE_OPT_RPT_PROGRESS
,

494  
NO_EQUIVALENT
,

496  
RPT_PROGRESS_FLAGS
, 0,

497  { 
NULL
 },

498  
NULL
,

499  
NULL
, NULL,

500  
›ti⁄NumîicVÆ
,

501  
zR±_ProgªssText
, 
zR±_Progªss_NAME
, 
zR±_Progªss_Name
,

502  
NULL
, NULL },

504 { 11, 
VALUE_OPT_DISTRIBUTED
,

505  11, 
VALUE_OPT_DISTRIBUTED
,

506  
NO_EQUIVALENT
,

508  
DISTRIBUTED_FLAGS
, 0,

509  { 
NULL
 },

510  
NULL
,

511  
NULL
, NULL,

512  
NULL
,

513  
zDi°ribuãdText
, 
zDi°ribuãd_NAME
, 
zDi°ribuãd_Name
,

514  
NULL
, NULL },

516 { 12, 
VALUE_OPT_FIBOPT
,

517  12, 
VALUE_OPT_FIBOPT
,

518  
NO_EQUIVALENT
,

520  
FIBOPT_FLAGS
, 0,

521  { 
NULL
 },

522  
NULL
,

523  
NULL
, NULL,

524  
NULL
,

525  
zFib›tText
, 
zFib›t_NAME
, 
zFib›t_Name
,

526  
NULL
, NULL },

528 { 13, 
VALUE_OPT_VIEW_PROG_OUT_ONLY
,

529  13, 
VALUE_OPT_VIEW_PROG_OUT_ONLY
,

530  
NO_EQUIVALENT
,

532  
VIEW_PROG_OUT_ONLY_FLAGS
, 0,

533  { 
NULL
 },

534  
NULL
,

535  
NULL
, NULL,

536  
NULL
,

537  
zVõw_Prog_Out_O∆yText
, 
zVõw_Prog_Out_O∆y_NAME
, 
zVõw_Prog_Out_O∆y_Name
,

538  
NULL
, NULL },

540 { 14, 
VALUE_OPT_DISABLE_OMP
,

541  14, 
VALUE_OPT_DISABLE_OMP
,

542  
NO_EQUIVALENT
,

544  
DISABLE_OMP_FLAGS
, 0,

545  { 
NULL
 },

546  
NULL
,

547  
NULL
, NULL,

548  
NULL
,

549  
zDißbÀ_OmpText
, 
zDißbÀ_Omp_NAME
, 
zDißbÀ_Omp_Name
,

550  
NULL
, NULL },

552 { 15, 
VALUE_OPT_EXP_MODE
,

553  15, 
VALUE_OPT_EXP_MODE
,

554  
NO_EQUIVALENT
,

556  
EXP_MODE_FLAGS
, 0,

557  { 
zExp_ModeDeÁu…Arg
 },

558  
NULL
,

559  
NULL
, NULL,

560  
doO±Exp_Mode
,

561  
zExp_ModeText
, 
zExp_Mode_NAME
, 
zExp_Mode_Name
,

562  
NULL
, NULL },

564 { 16, 
VALUE_OPT_ENV
,

565  16, 
VALUE_OPT_ENV
,

566  
NO_EQUIVALENT
,

568  
ENV_FLAGS
, 0,

569  { 
NULL
 },

570  
NULL
,

571  
NULL
, NULL,

572  
NULL
,

573  
zEnvText
, 
zEnv_NAME
, 
zEnv_Name
,

574  
NULL
, NULL },

576 { 17, 
VALUE_OPT_EXP_SOME
,

577  17, 
VALUE_OPT_EXP_SOME
,

578  
NO_EQUIVALENT
,

580  
EXP_SOME_FLAGS
, 0,

581  { 
NULL
 },

582  
NULL
,

583  
NULL
, NULL,

584  
›ti⁄NumîicVÆ
,

585  
zExp_SomeText
, 
zExp_Some_NAME
, 
zExp_Some_Name
,

586  
NULL
, NULL },

588 { 18, 
VALUE_OPT_STOP_AT_DEADLOCK
,

589  18, 
VALUE_OPT_STOP_AT_DEADLOCK
,

590  
NO_EQUIVALENT
,

592  
STOP_AT_DEADLOCK_FLAGS
, 0,

593  { 
zSt›_At_DódlockDeÁu…Arg
 },

594  
NULL
,

595  
NULL
, NULL,

596  
›ti⁄BoﬁónVÆ
,

597  
zSt›_At_DódlockText
, 
zSt›_At_Dódlock_NAME
, 
zSt›_At_Dódlock_Name
,

598  
NULL
, NULL },

600 { 19, 
VALUE_OPT_DEBUG_SCHED
,

601  19, 
VALUE_OPT_DEBUG_SCHED
,

602  
NO_EQUIVALENT
,

604  
DEBUG_SCHED_FLAGS
, 0,

605  { 
NULL
 },

606  
NULL
,

607  
NULL
, NULL,

608  
NULL
,

609  
zDebug_SchedText
, 
zDebug_Sched_NAME
, 
zDebug_Sched_Name
,

610  
NULL
, NULL },

612 { 20, 
VALUE_OPT_NO_AMPLE_SET_FIX
,

613  20, 
VALUE_OPT_NO_AMPLE_SET_FIX
,

614  
NO_EQUIVALENT
,

616  
NO_AMPLE_SET_FIX_FLAGS
, 0,

617  { 
NULL
 },

618  
NULL
,

619  
NULL
, NULL,

620  
NULL
,

621  
zNo_Am∂e_Së_FixText
, 
zNo_Am∂e_Së_Fix_NAME
, 
zNo_Am∂e_Së_Fix_Name
,

622  
NULL
, NULL },

624 { 21, 
VALUE_OPT_BOUND
,

625  21, 
VALUE_OPT_BOUND
,

626  
NO_EQUIVALENT
,

628  
BOUND_FLAGS
, 0,

629  { 
NULL
 },

630  
NULL
,

631  
NULL
, NULL,

632  
›ti⁄NumîicVÆ
,

633  
zBoundText
, 
zBound_NAME
, 
zBound_Name
,

634  
NULL
, NULL },

636 { 22, 
VALUE_OPT_FPRS
,

637  22, 
VALUE_OPT_FPRS
,

638  
NO_EQUIVALENT
,

640  
FPRS_FLAGS
, 0,

641  { 
NULL
 },

642  
NULL
,

643  
NULL
, NULL,

644  
NULL
,

645  
zF¥sText
, 
zF¥s_NAME
, 
zF¥s_Name
,

646  
NULL
, NULL },

648 { 
INDEX_OPT_VERSION
, 
VALUE_OPT_VERSION
,

649  
NO_EQUIVALENT
, 0,

650  
NO_EQUIVALENT
,

652  
OPTST_VERSION_FLAGS
, 0,

653  { 
NULL
 },

654  
NULL
,

655  
NULL
, NULL,

656  
›ti⁄PrötVîsi⁄
,

657  
zVîsi⁄Text
, 
NULL
, 
zVîsi⁄_Name
,

658  
NULL
, NULL },

662 { 
INDEX_OPT_HELP
, 
VALUE_OPT_HELP
,

663  
NO_EQUIVALENT
, 0,

664  
NO_EQUIVALENT
,

666  
OPTST_IMM
 | 
OPTST_NO_INIT
, 0,

667  { 
NULL
 },

668  
NULL
,

669  
NULL
, NULL,

670  
doUßgeO±
,

671  
zHñpText
, 
NULL
, 
zHñp_Name
,

672  
NULL
, NULL },

674 { 
INDEX_OPT_MORE_HELP
, 
VALUE_OPT_MORE_HELP
,

675  
NO_EQUIVALENT
, 0,

676  
NO_EQUIVALENT
,

678  
OPTST_MORE_HELP_FLAGS
, 0,

679  { 
NULL
 },

680  
NULL
,

681  
NULL
, NULL,

682  
›ti⁄PagedUßge
,

683  
zM‹e_HñpText
, 
NULL
, 
zM‹e_Hñp_Name
,

684  
NULL
, NULL }

691 
tSCC
 
	gzPROGNAME
[] = "ISP";

692 
tSCC
 
	gzUßgeTôÀ
[] =

696 
	#zRcName
 
NULL


	)

697 
	#≠zHomeLi°
 
NULL


	)

699 
tSCC
 
	gzBugsAddr
[] = "isp-dev@cs.utah.edu";

700 
tSCC
 
	gzEx∂aö
[] = "\n\
 codes:\n\
\t\t 0 Model checking complete withÇoÉrrors detected.\n\
\t\t 1 Model checking complete with deadlock detected.\n\
\t\t 2 ISP help displayed.\n\
\t\t 3 AÖrocess failedánássertion.\n\
\t\t 4 AÖrocessÉxited with MPI_Abort.\n\
\t\t 5 AÖrocess calledán MPI function withán invalidÑank.\n\
\t\t 11 UnableÅo startÖrofiled MPIÖrogram with mpiexec.\n\
\t\t 12 UnableÅo use WINSOCK.\n\
\t\t 13 UnableÅo open socket.\n\
\t\t 14 UnableÅo bindÅo socket.\n\
\t\t 15 UnableÅoÜisten on socket.\n\
\t\t 16 UnableÅoáccept connections on socket.\n\
\t\t 17 ErrorÑeading from socket.\n\
\t\t 20 UnableÅo open specifiedÜog file.\n\
\t\t 21 Transitions different between interleavings.\n\
\t\t 22 ReceivedánÉmpty buffer. (Profiled code might have crashed.)\n";

718 
	#zDëaû
 
NULL


	)

719 
tSCC
 
	gzFuŒVîsi⁄
[] = 
ISP_FULL_VERSION
;

722 #i‡
deföed
(
ENABLE_NLS
)

723 
	#OPTPROC_BASE
 
OPTPROC_TRANSLATE


	)

724 
tO±i⁄XœãProc
 
	gå™¶©e_›ti⁄_°rögs
;

726 
	#OPTPROC_BASE
 
OPTPROC_NONE


	)

727 
	#å™¶©e_›ti⁄_°rögs
 
NULL


	)

731 
	#i•_fuŒ_ußge
 
NULL


	)

732 
	#i•_sh‹t_ußge
 
NULL


	)

733 
tO±i⁄s
 
	gi•O±i⁄s
 = {

734 
OPTIONS_STRUCT_VERSION
,

735 0, 
NULL
,

736 –
OPTPROC_BASE


737 + 
OPTPROC_ERRSTOP


738 + 
OPTPROC_SHORTOPT


739 + 
OPTPROC_LONGOPT


740 + 
OPTPROC_NO_REQ_OPT


741 + 
OPTPROC_ARGS_REQ
 ),

742 0, 
NULL
,

743 
NULL
, NULL, 
zPROGNAME
,

744 
zRcName
, 
zC›yright
, 
zC›yrightNŸi˚
,

745 
zFuŒVîsi⁄
, 
≠zHomeLi°
, 
zUßgeTôÀ
,

746 
zEx∂aö
, 
zDëaû
, 
›tDesc
,

747 
zBugsAddr
,

748 
NULL
, NULL,

749 
›ti⁄Ußge
,

750 
å™¶©e_›ti⁄_°rögs
,

754 { 
INDEX_OPT_MORE_HELP
,

755 
NO_EQUIVALENT
,

756 
NO_EQUIVALENT
,

757 
NO_EQUIVALENT


760 
i•_fuŒ_ußge
, 
i•_sh‹t_ußge
,

761 
NULL
, NULL

768 
doUßgeO±
(

769 
tO±i⁄s
* 
pO±i⁄s
,

770 
tO±Desc
* 
pO±Desc
 )

772 ()
	gpO±i⁄s
;

773 
USAGE
–
EXIT_SUCCESS
 );

781 
doO±Num¥ocs
(
tO±i⁄s
* 
pO±i⁄s
, 
tO±Desc
* 
pO±Desc
)

783 c⁄° såu˘ {c⁄° 
	grmö
, 
	grmax
;} 
	g∫g
[1] = {

784 { 1, 
LONG_MAX
 } };

785 
	gvÆ
;

786 
	gix
;

787 * 
	gpzEnd
;

789 i‡(
	gpO±i⁄s
 <
OPTPROC_EMIT_LIMIT
)

790 
emô_ønges
;

792 
	gî∫o
 = 0;

793 
	gvÆ
 = 
°πﬁ
(
pO±Desc
->
›tArg
.
¨gSåög
, &
pzEnd
, 0);

794 i‡((
	gpO±Desc
->
	g›tArg
.
	g¨gSåög
 =
pzEnd
Ë|| (
î∫o
 != 0))

795 
bad_vÆue
;

797 i‡(*
	gpzEnd
 != '\0')

798 
bad_vÆue
;

799 
	gix
 = 0; ix < 1; ix++) {

800 i‡(
	gvÆ
 < 
	g∫g
[
ix
].
	grmö
)

802 i‡(
	gvÆ
 =
∫g
[
ix
].
rmö
)

803 
vÆid_ªtu∫
;

804 i‡(
	g∫g
[
ix
].
	grmax
 =
LONG_MIN
)

806 i‡(
	gvÆ
 <
∫g
[
ix
].
rmax
)

807 
vÆid_ªtu∫
;

810 
	gbad_vÆue
:

812 
›ti⁄_ußge_Â
 = 
°dîr
;

814 
	gemô_ønges
:

815 
›ti⁄ShowR™ge
(
pO±i⁄s
, 
pO±Desc
, (*)
∫g
, 1);

818 
	gvÆid_ªtu∫
:

819 i‡((
pO±Desc
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) != 0) {

820 
‰ì
((*)
pO±Desc
->
›tArg
.
¨gSåög
);

821 
	gpO±Desc
->
	gfO±Sèã
 &~
OPTST_ALLOC_ARG
;

823 
	gpO±Desc
->
	g›tArg
.
	g¨gI¡
 = 
vÆ
;

831 
doO±P‹t
(
tO±i⁄s
* 
pO±i⁄s
, 
tO±Desc
* 
pO±Desc
)

833 c⁄° såu˘ {c⁄° 
	grmö
, 
	grmax
;} 
	g∫g
[1] = {

835 
	gvÆ
;

836 
	gix
;

837 * 
	gpzEnd
;

839 i‡(
	gpO±i⁄s
 <
OPTPROC_EMIT_LIMIT
)

840 
emô_ønges
;

842 
	gî∫o
 = 0;

843 
	gvÆ
 = 
°πﬁ
(
pO±Desc
->
›tArg
.
¨gSåög
, &
pzEnd
, 0);

844 i‡((
	gpO±Desc
->
	g›tArg
.
	g¨gSåög
 =
pzEnd
Ë|| (
î∫o
 != 0))

845 
bad_vÆue
;

847 i‡(*
	gpzEnd
 != '\0')

848 
bad_vÆue
;

849 
	gix
 = 0; ix < 1; ix++) {

850 i‡(
	gvÆ
 < 
	g∫g
[
ix
].
	grmö
)

852 i‡(
	gvÆ
 =
∫g
[
ix
].
rmö
)

853 
vÆid_ªtu∫
;

854 i‡(
	g∫g
[
ix
].
	grmax
 =
LONG_MIN
)

856 i‡(
	gvÆ
 <
∫g
[
ix
].
rmax
)

857 
vÆid_ªtu∫
;

860 
	gbad_vÆue
:

862 
›ti⁄_ußge_Â
 = 
°dîr
;

864 
	gemô_ønges
:

865 
›ti⁄ShowR™ge
(
pO±i⁄s
, 
pO±Desc
, (*)
∫g
, 1);

868 
	gvÆid_ªtu∫
:

869 i‡((
pO±Desc
->
fO±Sèã
 & 
OPTST_ALLOC_ARG
) != 0) {

870 
‰ì
((*)
pO±Desc
->
›tArg
.
¨gSåög
);

871 
	gpO±Desc
->
	gfO±Sèã
 &~
OPTST_ALLOC_ARG
;

873 
	gpO±Desc
->
	g›tArg
.
	g¨gI¡
 = 
vÆ
;

881 
doO±Exp_Mode
(
tO±i⁄s
* 
pO±i⁄s
, 
tO±Desc
* 
pO±Desc
)

885 c⁄° * c⁄° 
	gazNames
[3] = {

889 i‡(
	gpO±i⁄s
 <
OPTPROC_EMIT_LIMIT
) {

890 (Ë
›ti⁄Enumî©i⁄VÆ
(
pO±i⁄s
, 
pO±Desc
, 
azNames
, 3);

894 
	gpO±Desc
->
	g›tArg
.
	g¨gEnum
 =

895 
›ti⁄Enumî©i⁄VÆ
–
pO±i⁄s
, 
pO±Desc
, 
azNames
, 3 );

900 #i‡
ENABLE_NLS


901 
	~<°dio.h
>

902 
	~<°dlib.h
>

903 
	~<°rög.h
>

904 
	~<uni°d.h
>

905 
	~<auto›ts/ußge-txt.h
>

907 * 
AO_gëãxt
–c⁄°* 
pz
 );

908 
c€r˚_ô
(** 
s
);

911 
AO_gëãxt
–c⁄°* 
pz
 )

913 * 
	gpzRes
;

914 i‡(
	gpz
 =
NULL
)

915  
NULL
;

916 
	gpzRes
 = 
_
(
pz
);

917 i‡(
	gpzRes
 =
pz
)

918  
pzRes
;

919 
	gpzRes
 = 
°rdup
–
pzRes
 );

920 i‡(
	gpzRes
 =
NULL
) {

921 
Âuts
–
_
("Nÿmem‹y f‹ dupögÅøn¶©ed såögs\n"), 
°dîr
 );

922 
exô
–
EXIT_FAILURE
 );

924  
	gpzRes
;

927 
c€r˚_ô
(** 
s
Ë{ *
	gs
 = 
AO_gëãxt
(*s); }

928 
	#COERSION
(
_f
) \

929 
	`c€r˚_ô
((*)&(
i•O±i⁄s
.
_f
))

	)

935 
å™¶©e_›ti⁄_°rögs
( )

941 i‡(
	g›ti⁄_ußge_ãxt
.
	gfõld_˘
 != 0) {

947 
tO±Desc
* 
pOD
 = 
i•O±i⁄s
.
pO±Desc
;

948 ** 
	gµz
 = (**)(*)&(
›ti⁄_ußge_ãxt
);

949 
	gix
 = 
›ti⁄_ußge_ãxt
.
fõld_˘
;

952 
	gµz
++;

953 *
	gµz
 = 
AO_gëãxt
(*
µz
);

954 } --
	gix
 > 0);

956 
COERSION
(
pzC›yright
);

957 
COERSION
(
pzC›yNŸi˚
);

958 
COERSION
(
pzFuŒVîsi⁄
);

959 
COERSION
(
pzUßgeTôÀ
);

960 
COERSION
(
pzEx∂aö
);

961 
COERSION
(
pzDëaû
);

962 
	g›ti⁄_ußge_ãxt
.
	gfõld_˘
 = 0;

964 
	gix
 = 
i•O±i⁄s
.
›tCt
; ix > 0; ix--, 
	gpOD
++)

965 
c€r˚_ô
((*)&(
pOD
->
pzText
));

968 i‡((
	gi•O±i⁄s
.
	gfO±Së
 & 
	gOPTPROC_NXLAT_OPT_CFG
) == 0) {

969 
tO±Desc
* 
pOD
 = 
i•O±i⁄s
.
pO±Desc
;

970 
	gix
;

972 
	gix
 = 
i•O±i⁄s
.
›tCt
; ix > 0; ix--, 
	gpOD
++) {

973 
c€r˚_ô
((*)&(
pOD
->
pz_Name
));

974 
c€r˚_ô
((*)&(
pOD
->
pz_DißbÀName
));

975 
c€r˚_ô
((*)&(
pOD
->
pz_DißbÀPfx
));

978 
	gi•O±i⁄s
.
	gfO±Së
 |
OPTPROC_NXLAT_OPT_CFG
 | 
OPTPROC_NXLAT_OPT
;

984 #ifde‡ 
__˝lu•lus


	@scheduler/sched-opt.h

33 #i‚de‡
AUTOOPTS_SCHED_OPT_H_GUARD


34 
	#AUTOOPTS_SCHED_OPT_H_GUARD
 1

	)

35 
	~<auto›ts/›ti⁄s.h
>

44 
	#AO_TEMPLATE_VERSION
 135168

	)

45 #i‡(
AO_TEMPLATE_VERSION
 < 
OPTIONS_MINIMUM_VERSION
) \

46 || (
	gAO_TEMPLATE_VERSION
 > 
	gOPTIONS_STRUCT_VERSION
)

47 #îr‹ 
›ti⁄
 
ãm∂©e
 
vîsi⁄
 
mism©ches
 
auto›ts
/
›ti⁄s
.
h
 
hódî


48 
Choke
 
	gMe
.

55 
	mINDEX_OPT_NUMPROCS
 = 0,

56 
	mINDEX_OPT_PORT
 = 1,

57 
	mINDEX_OPT_HOST
 = 2,

58 
	mINDEX_OPT_US
 = 3,

59 
	mINDEX_OPT_BLOCK
 = 4,

60 
	mINDEX_OPT_NOBLOCK
 = 5,

61 
	mINDEX_OPT_LOGFILE
 = 6,

62 
	mINDEX_OPT_MPICALLS
 = 7,

63 
	mINDEX_OPT_VERBOSE
 = 8,

64 
	mINDEX_OPT_QUIET
 = 9,

65 
	mINDEX_OPT_RPT_PROGRESS
 = 10,

66 
	mINDEX_OPT_DISTRIBUTED
 = 11,

67 
	mINDEX_OPT_FIBOPT
 = 12,

68 
	mINDEX_OPT_VIEW_PROG_OUT_ONLY
 = 13,

69 
	mINDEX_OPT_DISABLE_OMP
 = 14,

70 
	mINDEX_OPT_EXP_MODE
 = 15,

71 
	mINDEX_OPT_ENV
 = 16,

72 
	mINDEX_OPT_EXP_SOME
 = 17,

73 
	mINDEX_OPT_STOP_AT_DEADLOCK
 = 18,

74 
	mINDEX_OPT_DEBUG_SCHED
 = 19,

75 
	mINDEX_OPT_NO_AMPLE_SET_FIX
 = 20,

76 
	mINDEX_OPT_BOUND
 = 21,

77 
	mINDEX_OPT_FPRS
 = 22,

78 
	mINDEX_OPT_VERSION
 = 23,

79 
	mINDEX_OPT_HELP
 = 24,

80 
	mINDEX_OPT_MORE_HELP
 = 25

81 } 
	tãO±Index
;

83 
	#OPTION_CT
 26

	)

84 
	#ISP_VERSION
 "0.2.0"

	)

85 
	#ISP_FULL_VERSION
 "i• - i•: In-Sôu P¨tü»Ordî - Vî. 0.2.0"

	)

92 
	#DESC
(
n
Ë(
i•O±i⁄s
.
pO±Desc
[
INDEX_OPT_
##Ç])

	)

93 
	#HAVE_OPT
(
n
Ë(! 
	`UNUSED_OPT
(& 
	`DESC
“)))

	)

94 
	#OPT_ARG
(
n
Ë(
	`DESC
“).
›tArg
.
¨gSåög
)

	)

95 
	#STATE_OPT
(
n
Ë(
	`DESC
“).
fO±Sèã
 & 
OPTST_SET_MASK
)

	)

96 
	#COUNT_OPT
(
n
Ë(
	`DESC
“).
›tOccCt
)

	)

97 
	#ISSEL_OPT
(
n
Ë(
	`SELECTED_OPT
(&
	`DESC
“)))

	)

98 
	#ISUNUSED_OPT
(
n
Ë(
	`UNUSED_OPT
(& 
	`DESC
“)))

	)

99 
	#ENABLED_OPT
(
n
Ë(! 
	`DISABLED_OPT
(& 
	`DESC
“)))

	)

100 
	#STACKCT_OPT
(
n
Ë(((
tArgLi°
*)(
	`DESC
“).
›tCookõ
))->
u£Ct
)

	)

101 
	#STACKLST_OPT
(
n
Ë(((
tArgLi°
*)(
	`DESC
“).
›tCookõ
))->
≠zArgs
)

	)

102 
	#CLEAR_OPT
(
n
Ë
	`STMTS
( \

103 
	`DESC
(
n
).
fO±Sèã
 &
OPTST_PERSISTENT_MASK
; \

104 i‡–(
	`DESC
(
n
).
fO±Sèã
 & 
OPTST_INITENABLED
) == 0) \

105 
	`DESC
(
n
).
fO±Sèã
 |
OPTST_DISABLED
; \

106 
	`DESC
(
n
).
›tCookõ
 = 
NULL
 )

	)

112 
	#VALUE_OPT_NUMPROCS
 'n'

	)

114 
	#OPT_VALUE_NUMPROCS
 (
	`DESC
(
NUMPROCS
).
›tArg
.
¨gI¡
)

	)

115 
	#VALUE_OPT_PORT
 'p'

	)

117 
	#OPT_VALUE_PORT
 (
	`DESC
(
PORT
).
›tArg
.
¨gI¡
)

	)

118 
	#VALUE_OPT_HOST
 'h'

	)

119 
	#VALUE_OPT_US
 'x'

	)

120 
	#VALUE_OPT_BLOCK
 'b'

	)

121 
	#VALUE_OPT_NOBLOCK
 'g'

	)

122 
	#VALUE_OPT_LOGFILE
 'l'

	)

123 
	#VALUE_OPT_MPICALLS
 'm'

	)

124 
	#VALUE_OPT_VERBOSE
 'O'

	)

125 
	#VALUE_OPT_QUIET
 'q'

	)

126 
	#VALUE_OPT_RPT_PROGRESS
 'r'

	)

128 
	#OPT_VALUE_RPT_PROGRESS
 (
	`DESC
(
RPT_PROGRESS
).
›tArg
.
¨gI¡
)

	)

129 
	#VALUE_OPT_DISTRIBUTED
 'd'

	)

130 
	#VALUE_OPT_FIBOPT
 'f'

	)

131 
	#VALUE_OPT_VIEW_PROG_OUT_ONLY
 'P'

	)

132 
	#VALUE_OPT_DISABLE_OMP
 'o'

	)

133 
	#VALUE_OPT_EXP_MODE
 'e'

	)

136 
	mEXP_MODE_ALL
, 
	mEXP_MODE_RANDOM
, 
	mEXP_MODE_LEFT_MOST


137 } 
	tã_Exp_Mode
;

138 
	#OPT_EXP_MODE_VAL2STR
(
_v
Ë
	`›ti⁄Keyw‹dName
–&
	`DESC
(
EXP_MODE
), (_v))

	)

139 
	#OPT_VALUE_EXP_MODE
 (
	`DESC
(
EXP_MODE
).
›tArg
.
¨gEnum
)

	)

140 
	#VALUE_OPT_ENV
 's'

	)

141 
	#VALUE_OPT_EXP_SOME
 'y'

	)

143 
	#OPT_VALUE_EXP_SOME
 (
	`DESC
(
EXP_SOME
).
›tArg
.
¨gI¡
)

	)

144 
	#VALUE_OPT_STOP_AT_DEADLOCK
 'z'

	)

146 
	#OPT_VALUE_STOP_AT_DEADLOCK
 (
	`DESC
(
STOP_AT_DEADLOCK
).
›tArg
.
¨gBoﬁ
)

	)

147 
	#VALUE_OPT_DEBUG_SCHED
 19

	)

148 
	#VALUE_OPT_NO_AMPLE_SET_FIX
 'a'

	)

149 
	#VALUE_OPT_BOUND
 'B'

	)

151 
	#OPT_VALUE_BOUND
 (
	`DESC
(
BOUND
).
›tArg
.
¨gI¡
)

	)

152 
	#VALUE_OPT_FPRS
 'F'

	)

153 
	#VALUE_OPT_HELP
 '?'

	)

154 
	#VALUE_OPT_MORE_HELP
 '!'

	)

155 
	#VALUE_OPT_VERSION
 'v'

	)

159 
	#ERRSKIP_OPTERR
 
	`STMTS
–
i•O±i⁄s
.
fO±Së
 &~
OPTPROC_ERRSTOP
 )

	)

160 
	#ERRSTOP_OPTERR
 
	`STMTS
–
i•O±i⁄s
.
fO±Së
 |
OPTPROC_ERRSTOP
 )

	)

161 
	#RESTART_OPT
(
n
Ë
	`STMTS
( \

162 
i•O±i⁄s
.
curO±Idx
 = (
n
); \

163 
i•O±i⁄s
.
pzCurO±
 = 
NULL
 )

	)

164 
	#START_OPT
 
	`RESTART_OPT
(1)

	)

165 
	#USAGE
(
c
Ë(*
i•O±i⁄s
.
pUßgeProc
)–&i•O±i⁄s, c )

	)

172 #ifde‡ 
__˝lu•lus


176 
tO±i⁄s
 
i•O±i⁄s
;

178 #i‡
deföed
(
ENABLE_NLS
)

179 #i‚de‡
_


180 
	~<°dio.h
>

181 
ölöe
 * 
aoGësText
–c⁄°* 
pz
 ) {

182 i‡(
	gpz
 =
NULL
)  NULL;

183  (*)
gëãxt
–
pz
 );

185 
	#_
(
s
Ë
	`aoGësText
(s)

	)

188 
	#OPT_NO_XLAT_CFG_NAMES
 
	`STMTS
(
i•O±i⁄s
.
fO±Së
 |= \

189 
OPTPROC_NXLAT_OPT_CFG
;)

	)

190 
	#OPT_NO_XLAT_OPT_NAMES
 
	`STMTS
(
i•O±i⁄s
.
fO±Së
 |= \

191 
OPTPROC_NXLAT_OPT
|
OPTPROC_NXLAT_OPT_CFG
;)

	)

193 
	#OPT_XLAT_CFG_NAMES
 
	`STMTS
(
i•O±i⁄s
.
fO±Së
 &= \

194 ~(
OPTPROC_NXLAT_OPT
|
OPTPROC_NXLAT_OPT_CFG
);)

	)

195 
	#OPT_XLAT_OPT_NAMES
 
	`STMTS
(
i•O±i⁄s
.
fO±Së
 &= \

196 ~
OPTPROC_NXLAT_OPT
;)

	)

199 
	#OPT_NO_XLAT_CFG_NAMES


	)

200 
	#OPT_NO_XLAT_OPT_NAMES


	)

202 
	#OPT_XLAT_CFG_NAMES


	)

203 
	#OPT_XLAT_OPT_NAMES


	)

205 #i‚de‡
_


206 
	#_
(
_s
Ë
	)
_s

210 #ifde‡ 
__˝lu•lus


	@scripts/assert.h

13 #ifde‡
_ASSERT_H


15 #unde‡
_ASSERT_H


16 #unde‡
as£π


17 #unde‡
as£π_≥º‹


18 #unde‡
__as£π


22 
	#_ASSERT_H


	)

29 #ifde‡
NDEBUG


31 
	#as£π
(
ex¥
Ë(()(0))

	)

32 
	#as£π_≥º‹
(
î∫um
Ë(()(0))

	)

36 #i‚de‡
_ASSERT_H_DECLS


37 
	#_ASSERT_H_DECLS


	)

39 #ifde‡ 
__˝lu•lus


44 
ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
,

45 c⁄° *
fûe
, 
löe
);

48 
ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
,

49 c⁄° *
__fûe
, 
löe
);

51 #ifde‡ 
__˝lu•lus


57 #i‚de‡
__STRING


58 
	#__STRING
(
x
Ë#x

	)

61 
	#__as£π
(
as£πi⁄
, 
fûe
, 
löe
) \

62 
	`ISP_As£π_Áû
 (
as£πi⁄
, "???", 
fûe
, 
löe
)

	)

64 
	#as£π
(
ex¥
) \

65 ((
ex¥
) \

67 : 
	`ISP_As£π_Áû
 (
	`__STRING
(
ex¥
), 
__PRETTY_FUNCTION__
, 
__FILE__
, 
__LINE__
))

	)

69 
	#as£π_≥º‹
(
î∫um
) \

70 
	`ISP_As£π_≥º‹_Áû
 (
î∫um
, 
__PRETTY_FUNCTION__
, 
__FILE__
, 
__LINE__
)

	)

	@scripts/mpi.h

22 
	~"/u§/loˇl/ö˛ude/mpi.h
"

23 
	~"/home/subodh/ª£¨ch/i•-vîsi⁄s/i•-åunk/ö˛ude/i•/i•.h
"

	@/home/subodh/research/isp-versions/isp-trunk/include/isp/isp.h

21 #i‚de‡
_ISP_H


22 
	#_ISP_H


	)

24 
	~<mpi.h
>

26 
	#ISP_INTERLEAVING
 1

	)

28 
	#ISP_START_SAMPLING
 2

	)

29 
	#ISP_END_SAMPLING
 3

	)

35 #i‚de‡
MPIAPI


36 
	#MPIAPI


	)

39 #i‡
deföed
 (
_USRDLL
Ë&& deföed (
WIN32
)

40 
	#DLLAPI
 
	`_de˛•ec
(
dŒexp‹t
)

	)

42 
	#DLLAPI


	)

45 #ifde‡
__˝lu•lus


53 
ISP_As£π
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

54 
ISP_As£π_Áû
 (c⁄° *
as£πi⁄
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

55 
ISP_As£π_≥º‹_Áû
 (
î∫um
, c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
);

57 
	#MPI_Inô
(
¨gc
, 
¨gv
Ë
	`ISP_Inô
◊rgc,árgv, 
__FILE__
, 
__LINE__
)

	)

58 
DLLAPI
 
MPIAPI
 
ISP_Inô
 (*
¨gc
, ***
¨gv
, c⁄° *
fûe
, 
löe
);

60 
	#MPI_Síd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_Síd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

61 
DLLAPI
 
MPIAPI
 
ISP_Síd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

62 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

64 
	#MPI_R£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_R£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

65 
DLLAPI
 
MPIAPI
 
ISP_R£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

66 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

68 
	#MPI_I£nd
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_I£nd
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

69 
DLLAPI
 
MPIAPI
 
ISP_I£nd
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

70 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

72 
	#MPI_Síd_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Síd_öô
(buf, cou¡, d©©y≥, de°,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

73 
DLLAPI
 
MPIAPI
 
ISP_Síd_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

74 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

76 
	#MPI_Iªcv
(
buf
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Iªcv
(buf, cou¡, d©©y≥, sour˚,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

77 
DLLAPI
 
MPIAPI
 
ISP_Iªcv
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

78 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

80 
	#MPI_Recv
(
buf„r
, 
cou¡
, 
d©©y≥
, 
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Recv
(buf„r, cou¡, d©©y≥, sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

81 
DLLAPI
 
MPIAPI
 
ISP_Recv
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
sour˚
,

82 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

84 
	#MPI_Recv_öô
(
buf
, 
cou¡
, 
d©©y≥
, 
§c
, 
èg
, 
comm
, 
ªque°
Ë
	`ISP_Recv_öô
(buf, cou¡, d©©y≥, src,Åag, comm,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

85 
DLLAPI
 
MPIAPI
 
ISP_Recv_öô
 (*
buf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
§c
,

86 
èg
, 
MPI_Comm
 
comm
, 
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

88 
	#MPI_Probe
(
sour˚
, 
èg
, 
comm
, 
°©us
Ë
	`ISP_Probe
 (sour˚,Åag, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

89 
DLLAPI
 
MPIAPI
 
ISP_Probe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, 
MPI_Sètus
 *
°©us
,

90 c⁄° * 
fûe
, 
löe
);

92 
	#MPI_I¥obe
(
sour˚
, 
èg
, 
comm
, 
Êag
, 
°©us
Ë
	`ISP_I¥obe
 (sour˚,Åag, comm, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

93 
DLLAPI
 
MPIAPI
 
ISP_I¥obe
(
sour˚
, 
èg
, 
MPI_Comm
 
comm
, *
Êag
,

94 
MPI_Sètus
 *
°©us
, c⁄° * 
fûe
, 
löe
);

96 
	#MPI_Waô
(
ªque°
, 
°©us
Ë
	`ISP_Waô
‘eque°, sètus, 
__FILE__
, 
__LINE__
)

	)

97 
DLLAPI
 
MPIAPI
 
ISP_Waô
 (
MPI_Reque°
 *
ªque°
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
,

98 
löe
);

100 
	#MPI_Te°
(
ªque°
, 
Êag
, 
°©us
Ë
	`ISP_Te°
‘eque°, fœg, sètus, 
__FILE__
, 
__LINE__
)

	)

101 
DLLAPI
 
MPIAPI
 
ISP_Te°
 (
MPI_Reque°
 *
ªque°
, *
Êag
, 
MPI_Sètus
 *
°©us
,

102 c⁄° *
fûe
, 
löe
);

106 
	#MPI_B£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_B£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

107 
DLLAPI
 
MPIAPI
 
ISP_B£nd
 (* 
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

108 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

112 
	#MPI_S£nd
(
buf„r
, 
cou¡
, 
d©©y≥
, 
de°
, 
èg
, 
comm
Ë
	`ISP_S£nd
(buf„r, cou¡, d©©y≥, de°,Åag, comm, 
__FILE__
, 
__LINE__
)

	)

113 
DLLAPI
 
MPIAPI
 
ISP_S£nd
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
de°
,

114 
èg
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

116 
	#MPI_Sídªcv
(
£ndbuf
, 
£ndcou¡
, 
£ndty≥
, 
de°
, 
£ndèg
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
comm
, 
°©us
Ë
	`ISP_Sídªcv
(£ndbuf, sídcou¡, sídty≥, de°, sídèg,Ñecvbuf,Ñecvcou¡,Ñecvty≥, sour˚,Ñecvèg, comm, sètus, 
__FILE__
, 
__LINE__
)

	)

117 
DLLAPI
 
MPIAPI
 
ISP_Sídªcv
 (* 
£ndbuf
, 
£ndcou¡
, 
MPI_D©©y≥
 
£ndty≥
,

118 
de°
, 
£ndèg
, * 
ªcvbuf
, 
ªcvcou¡
,

119 
MPI_D©©y≥
 
ªcvty≥
, 
sour˚
, 
ªcvèg
, 
MPI_Comm
 
comm
,

120 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

122 
	#MPI_Sèπ
(
ªque°
Ë
	`ISP_Sèπ
‘eque°, 
__FILE__
, 
__LINE__
)

	)

123 
DLLAPI
 
MPIAPI
 
ISP_Sèπ
(
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

125 
	#MPI_SèπÆl
(
cou¡
, 
ªque°
Ë
	`ISP_SèπÆl
(cou¡,Ñeque°, 
__FILE__
, 
__LINE__
)

	)

126 
DLLAPI
 
MPIAPI
 
ISP_SèπÆl
(
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, c⁄° *
fûe
, 
löe
);

128 
	#MPI_B¨rõr
(
comm
Ë
	`ISP_B¨rõr
(comm, 
__FILE__
, 
__LINE__
)

	)

129 
DLLAPI
 
MPIAPI
 
ISP_B¨rõr
 (
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

131 
	#MPI_C¨t_¸óã
(
comm_ﬁd
,
ndims
,
dims
,
≥riods
,
ª‹dî
,
comm_ˇπ
Ë
	`ISP_C¨t_¸óã
(comm_ﬁd,ndims,dims,≥riods,ª‹dî,comm_ˇπ,
__FILE__
,
__LINE__
)

	)

132 
DLLAPI
 
MPIAPI
 
ISP_C¨t_¸óã
 (
MPI_Comm
 
comm_ﬁd
, 
ndims
, *
dims
, *
≥riods
, 
ª‹dî
, MPI_Comm *
comm_ˇπ
, c⁄° *
fûe
, 
löe
);

134 
	#MPI_Comm_¸óã
(
comm
, 
group
, 
comm_out
Ë
	`ISP_Comm_¸óã
(comm, group, comm_out, 
__FILE__
, 
__LINE__
)

	)

135 
DLLAPI
 
MPIAPI
 
ISP_Comm_¸óã
 (
MPI_Comm
 
comm
, 
MPI_Group
 
group
, MPI_Comm *
comm_out
,

136 c⁄° *
fûe
, 
löe
);

138 
	#MPI_Comm_dup
(
comm
, 
comm_out
Ë
	`ISP_Comm_dup
(comm, comm_out, 
__FILE__
, 
__LINE__
)

	)

139 
DLLAPI
 
MPIAPI
 
ISP_Comm_dup
 (
MPI_Comm
 
comm
, MPI_Comm *
comm_out
, c⁄° *
fûe
, 
löe
);

141 
	#MPI_Comm_•lô
(
comm
, 
cﬁ‹
, 
key
, 
comm_out
Ë
	`ISP_Comm_•lô
(comm, cﬁ‹, key, comm_out, 
__FILE__
, 
__LINE__
)

	)

142 
DLLAPI
 
MPIAPI
 
ISP_Comm_•lô
 (
MPI_Comm
 
comm
, 
cﬁ‹
, 
key
, MPI_Comm *
comm_out
,

143 c⁄° *
fûe
, 
löe
);

145 
	#MPI_Comm_‰ì
(
comm
Ë
	`ISP_Comm_‰ì
(comm, 
__FILE__
, 
__LINE__
)

	)

146 
DLLAPI
 
MPIAPI
 
ISP_Comm_‰ì
 (
MPI_Comm
 *
comm
, c⁄° *
fûe
, 
löe
);

148 
	#MPI_Ty≥_commô
(
d©©y≥
Ë
	`ISP_Ty≥_commô
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

149 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_commô
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

151 
	#MPI_Ty≥_‰ì
(
d©©y≥
Ë
	`ISP_Ty≥_‰ì
(d©©y≥, 
__FILE__
, 
__LINE__
)

	)

152 
DLLAPI
 
MPIAPI
 
ISP_Ty≥_‰ì
 (
MPI_D©©y≥
 *
d©©y≥
, c⁄° *
fûe
, 
löe
);

154 
	#MPI_Bˇ°
(
buf„r
, 
cou¡
, 
d©©y≥
, 
roŸ
, 
comm
Ë
	`ISP_Bˇ°
(buf„r, cou¡, d©©y≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

155 
DLLAPI
 
MPIAPI
 
ISP_Bˇ°
 (*
buf„r
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
roŸ
,

156 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

158 
	#MPI_Sˇâî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

159 
DLLAPI
 
MPIAPI
 
ISP_Sˇâî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

160 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
,

161 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

163 
	#MPI_Sˇâîv
(
£ndbuf
, 
£nd˙t
, 
di•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_Sˇâîv
(£ndbuf, síd˙t, di•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

164 
DLLAPI
 
MPIAPI
 
ISP_Sˇâîv
 (*
£ndbuf
, *
£nd˙t
, *
di•ls
, 
MPI_D©©y≥
 
£ndty≥
,

165 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
, 
MPI_Comm
 
comm
,

166 c⁄° *
fûe
, 
löe
);

168 
	#MPI_G©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

169 
DLLAPI
 
MPIAPI
 
ISP_G©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

170 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

171 
roŸ
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

173 
	#MPI_G©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
roŸ
, 
comm
Ë
	`ISP_G©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

174 
DLLAPI
 
MPIAPI
 
ISP_G©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

175 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
roŸ
,

176 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

178 
	#MPI_AŒg©hî
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hî
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

179 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hî
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

180 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

181 c⁄° *
fûe
, 
löe
);

183 
	#MPI_AŒg©hîv
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
di•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒg©hîv
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡, di•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

184 
DLLAPI
 
MPIAPI
 
ISP_AŒg©hîv
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

185 *
ªcvbuf
, *
ªcvcou¡
, *
di•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

186 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

188 
	#MPI_AŒtﬂŒ
(
£ndbuf
, 
£nd˙t
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒ
(£ndbuf, síd˙t, sídty≥,Ñecvbuf,Ñecvcou¡,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

189 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒ
 (*
£ndbuf
, 
£nd˙t
, 
MPI_D©©y≥
 
£ndty≥
,

190 *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
ªcvty≥
, 
MPI_Comm
 
comm
,

191 c⁄° *
fûe
, 
löe
);

193 
	#MPI_AŒtﬂŒv
(
£ndbuf
, 
£nd˙t
, 
sdi•ls
, 
£ndty≥
, 
ªcvbuf
, 
ªcvcou¡
, 
rdi•ls
, 
ªcvty≥
, 
comm
Ë
	`ISP_AŒtﬂŒv
(£ndbuf, síd˙t, sdi•ls, sídty≥,Ñecvbuf,Ñecvcou¡,Ñdi•ls,Ñecvty≥, comm, 
__FILE__
, 
__LINE__
)

	)

194 
DLLAPI
 
MPIAPI
 
ISP_AŒtﬂŒv
 (*
£ndbuf
, *
£nd˙t
, *
sdi•ls
, 
MPI_D©©y≥
 
£ndty≥
,

195 *
ªcvbuf
, *
ªcvcou¡
, *
rdi•ls
, 
MPI_D©©y≥
 
ªcvty≥
,

196 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

198 
	#MPI_Sˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

199 
DLLAPI
 
MPIAPI
 
ISP_Sˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

200 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

203 
	#MPI_Exsˇn
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Sˇn
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

204 
DLLAPI
 
MPIAPI
 
ISP_Exsˇn
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
,

205 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

208 
	#MPI_Redu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
roŸ
, 
comm
Ë
	`ISP_Redu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op,ÑoŸ, comm, 
__FILE__
, 
__LINE__
)

	)

209 
DLLAPI
 
MPIAPI
 
ISP_Redu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

210 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
roŸ
, 
MPI_Comm
 
comm
,

211 c⁄° *
fûe
, 
löe
);

213 
	#MPI_Redu˚_sˇâî
(
£ndbuff
, 
ªcvbuff
, 
ªcv˙t
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_Redu˚_sˇâî
(£ndbuff,Ñecvbuff,Ñecv˙t, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

214 
DLLAPI
 
MPIAPI
 
ISP_Redu˚_sˇâî
 (*
£ndbuff
, *
ªcvbuff
, *
ªcv˙t
,

215 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

217 
	#MPI_AŒªdu˚
(
£ndbuff
, 
ªcvbuff
, 
cou¡
, 
d©©y≥
, 
›
, 
comm
Ë
	`ISP_AŒªdu˚
(£ndbuff,Ñecvbuff, cou¡, d©©y≥, op, comm, 
__FILE__
, 
__LINE__
)

	)

218 
DLLAPI
 
MPIAPI
 
ISP_AŒªdu˚
 (*
£ndbuff
, *
ªcvbuff
, 
cou¡
,

219 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
, c⁄° *
fûe
, 
löe
);

221 
	#MPI_WaôÆl
(
cou¡
, 
¨øy_of_ªque°s
, 
¨øy_of_°©u£s
Ë
	`ISP_WaôÆl
(cou¡,áºay_of_ªque°s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

222 
DLLAPI
 
MPIAPI
 
ISP_WaôÆl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

223 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

225 
	#MPI_Waô™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
°©us
Ë
	`ISP_Waô™y
(cou¡,áºay_of_ªque°s, index, sètus, 
__FILE__
, 
__LINE__
)

	)

226 
DLLAPI
 
MPIAPI
 
ISP_Waô™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

227 *
ödex
, 
MPI_Sètus
 *
°©us
, c⁄° *
fûe
, 
löe
);

229 
	#MPI_Waôsome
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Waôsome
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

230 
DLLAPI
 
MPIAPI
 
ISP_Waôsome
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

231 *
outcou¡
, *
¨øy_of_ödi˚s
, 
MPI_Sètus
 *
¨øy_of_°©u£s
,

232 c⁄° *
fûe
, 
löe
);

234 
	#MPI_Te°™y
(
cou¡
, 
¨øy_of_ªque°s
, 
ödex
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°™y
(cou¡,áºay_of_ªque°s, index, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

235 
DLLAPI
 
MPIAPI
 
ISP_Te°™y
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
ödex
,

236 *
Êag
, 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

238 
	#MPI_Te°some
(
öcou¡
, 
¨øy_of_ªque°s
, 
outcou¡
, 
¨øy_of_ödi˚s
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°some
(öcou¡,áºay_of_ªque°s, outcou¡,áºay_of_ödi˚s,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

239 
DLLAPI
 
MPIAPI
 
ISP_Te°some
 (
öcou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
,

240 *
outcou¡
, *
¨øy_of_ödi˚s
,
MPI_Sètus
 *
¨øy_of_°©u£s
,

241 c⁄° *
fûe
, 
löe
);

243 
	#MPI_Te°Æl
(
cou¡
, 
¨øy_of_ªque°s
, 
Êag
, 
¨øy_of_°©u£s
Ë
	`ISP_Te°Æl
(cou¡,áºay_of_ªque°s, fœg,áºay_of_°©u£s, 
__FILE__
, 
__LINE__
)

	)

244 
DLLAPI
 
MPIAPI
 
ISP_Te°Æl
 (
cou¡
, 
MPI_Reque°
 *
¨øy_of_ªque°s
, *
Êag
,

245 
MPI_Sètus
 *
¨øy_of_°©u£s
, c⁄° *
fûe
, 
löe
);

247 
	#MPI_Reque°_‰ì
(
ªque°
Ë
	`ISP_Reque°_‰ì
‘eque°, 
__FILE__
, 
__LINE__
)

	)

248 
DLLAPI
 
MPIAPI
 
ISP_Reque°_‰ì
 (
MPI_Reque°
 *
ªque°
, c⁄° *
fûe
, 
löe
);

250 
	#MPI_Ab‹t
(
comm
, 
îr‹code
Ë
	`ISP_Ab‹t
(comm,Éº‹code, 
__FILE__
, 
__LINE__
)

	)

251 
DLLAPI
 
MPIAPI
 
ISP_Ab‹t
 (
MPI_Comm
 
comm
, 
îr‹code
, c⁄° *
fûe
, 
löe
);

253 
	#MPI_FöÆize
(Ë
	`ISP_FöÆize
(
__FILE__
, 
__LINE__
)

	)

254 
DLLAPI
 
MPIAPI
 
ISP_FöÆize
 (c⁄° *
fûe
, 
löe
);

256 #ifde‡
__˝lu•lus


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/autoopts/options.h

27 #i‚de‡
AUTOOPTS_OPTIONS_H_GUARD


28 
	#AUTOOPTS_OPTIONS_H_GUARD
 1

	)

29 
	~<sys/ty≥s.h
>

30 
	~<°dio.h
>

31 
	~<°döt.h
>

32 
	~<limôs.h
>

33 
	~<sy£xôs.h
>

35 #i‚de‡
EX_USAGE


36 
	#EX_USAGE
 64

	)

56 
	#OPTIONS_STRUCT_VERSION
 135168

	)

57 
	#OPTIONS_VERSION_STRING
 "33:0:8"

	)

58 
	#OPTIONS_MINIMUM_VERSION
 102400

	)

59 
	#OPTIONS_MIN_VER_STRING
 "25:0:0"

	)

62 
	mOPARG_TYPE_NONE
 = 0,

63 
	mOPARG_TYPE_STRING
 = 1,

64 
	mOPARG_TYPE_ENUMERATION
 = 2,

65 
	mOPARG_TYPE_BOOLEAN
 = 3,

66 
	mOPARG_TYPE_MEMBERSHIP
 = 4,

67 
	mOPARG_TYPE_NUMERIC
 = 5,

68 
	mOPARG_TYPE_HIERARCHY
 = 6,

69 
	mOPARG_TYPE_FILE
 = 7,

70 
	mOPARG_TYPE_TIME
 = 8

71 } 
	tãO±ArgTy≥
;

73 
	s›ti⁄VÆue
 {

74 
ãO±ArgTy≥
 
	mvÆTy≥
;

75 * 
	mpzName
;

77 
	m°rVÆ
[1];

78 
	míumVÆ
;

79 
	mboﬁVÆ
;

80 
	m£tVÆ
;

81 
	ml⁄gVÆ
;

82 * 
	m√°VÆ
;

83 } 
	mv
;

84 } 
	ttO±i⁄VÆue
;

87 
	mFTYPE_MODE_MAY_EXIST
 = 0x00,

88 
	mFTYPE_MODE_MUST_EXIST
 = 0x01,

89 
	mFTYPE_MODE_MUST_NOT_EXIST
 = 0x02,

90 
	mFTYPE_MODE_EXIST_MASK
 = 0x03,

91 
	mFTYPE_MODE_NO_OPEN
 = 0x00,

92 
	mFTYPE_MODE_OPEN_FD
 = 0x10,

93 
	mFTYPE_MODE_FOPEN_FP
 = 0x20,

94 
	mFTYPE_MODE_OPEN_MASK
 = 0x30

95 } 
	tãO±FûeTy≥
;

98 
	mfûe_Êags
;

99 c⁄° * 
	mfûe_mode
;

100 } 
	ttuFûeMode
;

106 
	mOPTST_SET_ID
 = 0,

107 
	mOPTST_PRESET_ID
 = 1,

108 
	mOPTST_DEFINED_ID
 = 2,

109 
	mOPTST_RESET_ID
 = 3,

110 
	mOPTST_EQUIVALENCE_ID
 = 4,

111 
	mOPTST_DISABLED_ID
 = 5,

112 
	mOPTST_ALLOC_ARG_ID
 = 6,

113 
	mOPTST_NO_INIT_ID
 = 8,

114 
	mOPTST_NUMBER_OPT_ID
 = 9,

115 
	mOPTST_STACKED_ID
 = 10,

116 
	mOPTST_INITENABLED_ID
 = 11,

117 
	mOPTST_ARG_TYPE_1_ID
 = 12,

118 
	mOPTST_ARG_TYPE_2_ID
 = 13,

119 
	mOPTST_ARG_TYPE_3_ID
 = 14,

120 
	mOPTST_ARG_TYPE_4_ID
 = 15,

121 
	mOPTST_ARG_OPTIONAL_ID
 = 16,

122 
	mOPTST_IMM_ID
 = 17,

123 
	mOPTST_DISABLE_IMM_ID
 = 18,

124 
	mOPTST_OMITTED_ID
 = 19,

125 
	mOPTST_MUST_SET_ID
 = 20,

126 
	mOPTST_DOCUMENT_ID
 = 21,

127 
	mOPTST_TWICE_ID
 = 22,

128 
	mOPTST_DISABLE_TWICE_ID
 = 23,

129 
	mOPTST_SCALED_NUM_ID
 = 24,

130 
	mOPTST_NO_COMMAND_ID
 = 25,

131 
	mOPTST_DEPRECATED_ID
 = 26

132 } 
	t›t_°©e_íum_t
;

134 
	#OPTST_INIT
 0U

	)

135 
	#OPTST_SET
 (1U << 
OPTST_SET_ID
)

	)

136 
	#OPTST_PRESET
 (1U << 
OPTST_PRESET_ID
)

	)

137 
	#OPTST_DEFINED
 (1U << 
OPTST_DEFINED_ID
)

	)

138 
	#OPTST_RESET
 (1U << 
OPTST_RESET_ID
)

	)

139 
	#OPTST_EQUIVALENCE
 (1U << 
OPTST_EQUIVALENCE_ID
)

	)

140 
	#OPTST_DISABLED
 (1U << 
OPTST_DISABLED_ID
)

	)

141 
	#OPTST_ALLOC_ARG
 (1U << 
OPTST_ALLOC_ARG_ID
)

	)

142 
	#OPTST_NO_INIT
 (1U << 
OPTST_NO_INIT_ID
)

	)

143 
	#OPTST_NUMBER_OPT
 (1U << 
OPTST_NUMBER_OPT_ID
)

	)

144 
	#OPTST_STACKED
 (1U << 
OPTST_STACKED_ID
)

	)

145 
	#OPTST_INITENABLED
 (1U << 
OPTST_INITENABLED_ID
)

	)

146 
	#OPTST_ARG_TYPE_1
 (1U << 
OPTST_ARG_TYPE_1_ID
)

	)

147 
	#OPTST_ARG_TYPE_2
 (1U << 
OPTST_ARG_TYPE_2_ID
)

	)

148 
	#OPTST_ARG_TYPE_3
 (1U << 
OPTST_ARG_TYPE_3_ID
)

	)

149 
	#OPTST_ARG_TYPE_4
 (1U << 
OPTST_ARG_TYPE_4_ID
)

	)

150 
	#OPTST_ARG_OPTIONAL
 (1U << 
OPTST_ARG_OPTIONAL_ID
)

	)

151 
	#OPTST_IMM
 (1U << 
OPTST_IMM_ID
)

	)

152 
	#OPTST_DISABLE_IMM
 (1U << 
OPTST_DISABLE_IMM_ID
)

	)

153 
	#OPTST_OMITTED
 (1U << 
OPTST_OMITTED_ID
)

	)

154 
	#OPTST_MUST_SET
 (1U << 
OPTST_MUST_SET_ID
)

	)

155 
	#OPTST_DOCUMENT
 (1U << 
OPTST_DOCUMENT_ID
)

	)

156 
	#OPTST_TWICE
 (1U << 
OPTST_TWICE_ID
)

	)

157 
	#OPTST_DISABLE_TWICE
 (1U << 
OPTST_DISABLE_TWICE_ID
)

	)

158 
	#OPTST_SCALED_NUM
 (1U << 
OPTST_SCALED_NUM_ID
)

	)

159 
	#OPTST_NO_COMMAND
 (1U << 
OPTST_NO_COMMAND_ID
)

	)

160 
	#OPTST_DEPRECATED
 (1U << 
OPTST_DEPRECATED_ID
)

	)

161 
	#OPT_STATE_MASK
 0x07FFFF7FU

	)

163 
	#OPTST_SET_MASK
 ( \

164 
OPTST_DEFINED
 | 
OPTST_PRESET
 | 
OPTST_RESET
 | \

165 
OPTST_SET
 \

166  )

	)

168 
	#OPTST_MUTABLE_MASK
 ( \

169 
OPTST_ALLOC_ARG
 | 
OPTST_DEFINED
 | \

170 
OPTST_DISABLED
 | 
OPTST_EQUIVALENCE
 | \

171 
OPTST_PRESET
 | 
OPTST_RESET
 | \

172 
OPTST_SET
 \

173  )

	)

175 
	#OPTST_SELECTED_MASK
 ( \

176 
OPTST_DEFINED
 | 
OPTST_SET
 \

177  )

	)

179 
	#OPTST_ARG_TYPE_MASK
 ( \

180 
OPTST_ARG_TYPE_1
 | 
OPTST_ARG_TYPE_2
 | 
OPTST_ARG_TYPE_3
 | \

181 
OPTST_ARG_TYPE_4
 \

182  )

	)

184 
	#OPTST_DO_NOT_SAVE_MASK
 ( \

185 
OPTST_DOCUMENT
 | 
OPTST_NO_INIT
 | 
OPTST_OMITTED
 \

186  )

	)

188 
	#OPTST_NO_USAGE_MASK
 ( \

189 
OPTST_DEPRECATED
 | 
OPTST_NO_COMMAND
 | 
OPTST_OMITTED
 \

190  )

	)

192 #ifde‡
NO_OPTIONAL_OPT_ARGS


193 #unde‡
OPTST_ARG_OPTIONAL


194 
	#OPTST_ARG_OPTIONAL
 0

	)

197 
	#OPTST_PERSISTENT_MASK
 (~
OPTST_MUTABLE_MASK
)

	)

199 
	#SELECTED_OPT
(
_od
Ë((_od)->
fO±Sèã
 & 
OPTST_SELECTED_MASK
)

	)

200 
	#UNUSED_OPT
–
_od
Ë(((_od)->
fO±Sèã
 & 
OPTST_SET_MASK
Ë=0)

	)

201 
	#DISABLED_OPT
(
_od
Ë((_od)->
fO±Sèã
 & 
OPTST_DISABLED
)

	)

202 
	#OPTION_STATE
(
_od
Ë((_od)->
fO±Sèã
)

	)

203 
	#OPTST_SET_ARGTYPE
(
_n
Ë((_nË<< 
OPTST_ARG_TYPE_1_ID
)

	)

204 
	#OPTST_GET_ARGTYPE
(
_f
Ë(((_f)&
OPTST_ARG_TYPE_MASK
)>>
OPTST_ARG_TYPE_1_ID
)

	)

218 
	mOPTPROC_LONGOPT_ID
 = 0,

219 
	mOPTPROC_SHORTOPT_ID
 = 1,

220 
	mOPTPROC_ERRSTOP_ID
 = 2,

221 
	mOPTPROC_DISABLEDOPT_ID
 = 3,

222 
	mOPTPROC_NO_REQ_OPT_ID
 = 4,

223 
	mOPTPROC_NUM_OPT_ID
 = 5,

224 
	mOPTPROC_INITDONE_ID
 = 6,

225 
	mOPTPROC_NEGATIONS_ID
 = 7,

226 
	mOPTPROC_ENVIRON_ID
 = 8,

227 
	mOPTPROC_NO_ARGS_ID
 = 9,

228 
	mOPTPROC_ARGS_REQ_ID
 = 10,

229 
	mOPTPROC_REORDER_ID
 = 11,

230 
	mOPTPROC_GNUUSAGE_ID
 = 12,

231 
	mOPTPROC_TRANSLATE_ID
 = 13,

232 
	mOPTPROC_NXLAT_OPT_CFG_ID
 = 16,

233 
	mOPTPROC_NXLAT_OPT_ID
 = 17,

234 
	mOPTPROC_PRESETTING_ID
 = 19

235 } 
	t›çroc_°©e_íum_t
;

237 
	#OPTPROC_NONE
 0U

	)

238 
	#OPTPROC_LONGOPT
 (1U << 
OPTPROC_LONGOPT_ID
)

	)

239 
	#OPTPROC_SHORTOPT
 (1U << 
OPTPROC_SHORTOPT_ID
)

	)

240 
	#OPTPROC_ERRSTOP
 (1U << 
OPTPROC_ERRSTOP_ID
)

	)

241 
	#OPTPROC_DISABLEDOPT
 (1U << 
OPTPROC_DISABLEDOPT_ID
)

	)

242 
	#OPTPROC_NO_REQ_OPT
 (1U << 
OPTPROC_NO_REQ_OPT_ID
)

	)

243 
	#OPTPROC_NUM_OPT
 (1U << 
OPTPROC_NUM_OPT_ID
)

	)

244 
	#OPTPROC_INITDONE
 (1U << 
OPTPROC_INITDONE_ID
)

	)

245 
	#OPTPROC_NEGATIONS
 (1U << 
OPTPROC_NEGATIONS_ID
)

	)

246 
	#OPTPROC_ENVIRON
 (1U << 
OPTPROC_ENVIRON_ID
)

	)

247 
	#OPTPROC_NO_ARGS
 (1U << 
OPTPROC_NO_ARGS_ID
)

	)

248 
	#OPTPROC_ARGS_REQ
 (1U << 
OPTPROC_ARGS_REQ_ID
)

	)

249 
	#OPTPROC_REORDER
 (1U << 
OPTPROC_REORDER_ID
)

	)

250 
	#OPTPROC_GNUUSAGE
 (1U << 
OPTPROC_GNUUSAGE_ID
)

	)

251 
	#OPTPROC_TRANSLATE
 (1U << 
OPTPROC_TRANSLATE_ID
)

	)

252 
	#OPTPROC_NXLAT_OPT_CFG
 (1U << 
OPTPROC_NXLAT_OPT_CFG_ID
)

	)

253 
	#OPTPROC_NXLAT_OPT
 (1U << 
OPTPROC_NXLAT_OPT_ID
)

	)

254 
	#OPTPROC_PRESETTING
 (1U << 
OPTPROC_PRESETTING_ID
)

	)

255 
	#OPTPROC_STATE_MASK
 0x000B3FFFU

	)

257 
	#OPTPROC_NO_XLAT_MASK
 ( \

258 
OPTPROC_NXLAT_OPT
 | 
OPTPROC_NXLAT_OPT_CFG
 \

259  )

	)

261 
	#STMTS
(
s
Ëdÿ{ s; } 0)

	)

268 
	#tSCC
 c⁄°

	)

269 
	#tCC
 c⁄°

	)

270 
	#tAoSC
 

	)

271 
	#tAoUC
 

	)

272 
	#tAoUI
 

	)

273 
	#tAoUL
 

	)

274 
	#tAoUS
 

	)

280 íum { 
	mAG_FALSE
 = 0, 
	mAG_TRUE
 } 
	tag_boﬁ
;

287 
›ti⁄s
 
	ttO±i⁄s
;

288 
›tDesc
 
	ttO±Desc
;

289 
›tNames
 
	ttO±Names
;

290 
	#OPTPROC_EMIT_USAGE
 ((
tO±i⁄s
 *)0x01UL)

	)

291 
	#OPTPROC_EMIT_SHELL
 ((
tO±i⁄s
 *)0x02UL)

	)

292 
	#OPTPROC_RETURN_VALNAME
 ((
tO±i⁄s
 *)0x03UL)

	)

293 
	#OPTPROC_EMIT_LIMIT
 ((
tO±i⁄s
 *)0x0FUL)

	)

299 (
	ttO±Proc
)(
	ttO±i⁄s
* 
	tpO±s
, 
	ttO±Desc
* 
	tpO±Desc
);

300 
tO±Proc
* 
	tçO±Proc
;

307 (
	ttUßgeProc
)(
	ttO±i⁄s
* 
	tpO±s
, 
	texôCode
);

308 
tUßgeProc
* 
	tçUßgeProc
;

315 
	#NOLIMIT
 
USHRT_MAX


	)

316 
	#OPTION_LIMIT
 
SHRT_MAX


	)

317 
	#NO_EQUIVALENT
 (
OPTION_LIMIT
+1)

	)

323 
	#NUMBER_OPTION
 '#'

	)

325 
¨gLi°
 
	ttArgLi°
;

326 
	#MIN_ARG_ALLOC_CT
 6

	)

327 
	#INCR_ARG_ALLOC_CT
 8

	)

328 
	s¨gLi°
 {

329 
u£Ct
;

330 
ÆlocCt
;

331 
tCC
* 
≠zArgs
[ 
MIN_ARG_ALLOC_CT
 ];

335 c⁄° * 
¨gSåög
;

336 
uöçå_t
 
¨gEnum
;

337 
uöçå_t
 
¨gI¡±r
;

338 
¨gI¡
;

339 
¨gUöt
;

340 
¨gBoﬁ
;

341 
FILE
* 
¨gFp
;

342 
¨gFd
;

343 } 
	t›tArgBuckë_t
;

349 
	s›tDesc
 {

350 
tAoUS
 c⁄° 
›tIndex
;

351 
tAoUS
 c⁄° 
›tVÆue
;

352 
tAoUS
 
›tA˘uÆIndex
;

353 
tAoUS
 
›tA˘uÆVÆue
;

355 
tAoUS
 c⁄° 
›tEquivIndex
;

356 
tAoUS
 c⁄° 
›tMöCt
;

357 
tAoUS
 c⁄° 
›tMaxCt
;

358 
tAoUS
 
›tOccCt
;

360 
tAoUI
 
fO±Sèã
;

361 
tAoUI
 
ª£rved
;

362 
›tArgBuckë_t
 
›tArg
;

363 
	#pzLa°Arg
 
›tArg
.
¨gSåög


	)

364 * 
›tCookõ
;

366 c⁄° * c⁄° 
pO±Mu°
;

367 c⁄° * c⁄° 
pO±C™t
;

368 
çO±Proc
 c⁄° 
pO±Proc
;

369 c⁄°* c⁄° 
pzText
;

371 c⁄°* c⁄° 
pz_NAME
;

372 c⁄°* c⁄° 
pz_Name
;

373 c⁄°* c⁄° 
pz_DißbÀName
;

374 c⁄°* c⁄° 
pz_DißbÀPfx
;

381 
›tS≥cIndex
 
	ttO±S≥cIndex
;

382 
	s›tS≥cIndex
 {

383 c⁄° 
tAoUS
 
m‹e_hñp
;

384 c⁄° 
tAoUS
 
ßve_›ts
;

385 c⁄° 
tAoUS
 
numbî_›ti⁄
;

386 c⁄° 
tAoUS
 
deÁu…_›t
;

392 (
	ttO±i⁄XœãProc
)();

394 
	s›ti⁄s
 {

395 c⁄° 
°ru˘Vîsi⁄
;

396 
‹igArgCt
;

397 ** 
‹igArgVe˘
;

398 
fO±Së
;

399 
curO±Idx
;

400 * 
pzCurO±
;

402 c⁄°* 
pzProgP©h
;

403 c⁄°* 
pzProgName
;

404 c⁄°* c⁄° 
pzPROGNAME
;

405 c⁄°* c⁄° 
pzRcName
;

406 c⁄°* c⁄° 
pzC›yright
;

407 c⁄°* c⁄° 
pzC›yNŸi˚
;

408 c⁄°* c⁄° 
pzFuŒVîsi⁄
;

409 c⁄°* c⁄°* c⁄° 
∑pzHomeLi°
;

410 c⁄°* c⁄° 
pzUßgeTôÀ
;

411 c⁄°* c⁄° 
pzEx∂aö
;

412 c⁄°* c⁄° 
pzDëaû
;

413 
tO±Desc
* c⁄° 
pO±Desc
;

414 c⁄°* c⁄° 
pzBugAddr
;

416 * 
pExãnsi⁄s
;

417 * 
pSavedSèã
;

420 
çUßgeProc
 
pUßgeProc
;

421 
tO±i⁄XœãProc
* 
pTønsProc
;

423 
tO±S≥cIndex
 
•ecO±Idx
;

424 c⁄° 
›tCt
;

425 c⁄° 
¥e£tO±Ct
;

426 c⁄° * 
pzFuŒUßge
;

427 c⁄° * 
pzSh‹tUßge
;

429 
›tArgBuckë_t
 c⁄° * c⁄° 
‹igöÆO±ArgAºay
;

430 * c⁄° * c⁄° 
‹igöÆO±ArgCookõ
;

437 
	#‹igöÆO±ArgAºay_STRUCT_VERSION
 131072

	)

438 
	#HAS_‹igöÆO±ArgAºay
(
_›t
) \

439 ((
_›t
)->
°ru˘Vîsi⁄
 >
‹igöÆO±ArgAºay_STRUCT_VERSION
)

	)

445 
tkn_˘
;

446 * 
tkn_li°
[1];

447 } 
	ttokí_li°_t
;

453 
	#°∫eqvcmp
 
›ti⁄_°∫eqvcmp


	)

454 
	#°ªqvcmp
 
›ti⁄_°ªqvcmp


	)

455 
	#°ªqvm≠
 
›ti⁄_°ªqvm≠


	)

456 
	#°ªqu©e
 
›ti⁄_°ªqu©e


	)

457 
	#°πønsf‹m
 
›ti⁄_°πønsf‹m


	)

469 * 
txt_d©a
;

470 
size_t
 
txt_size
;

471 
size_t
 
txt_fuŒ_size
;

472 
txt_fd
;

473 
txt_zîo_fd
;

474 
txt_î∫o
;

475 
txt_¥Ÿ
;

476 
txt_Êags
;

477 
txt_Æloc
;

478 } 
	ttm≠_öfo_t
;

480 
	#TEXT_MMAP_FAILED_ADDR
(
a
Ë((*)◊Ë=(*)
MAP_FAILED
)

	)

482 #ifde‡ 
__˝lu•lus


484 
	#CPLUSPLUS_CLOSER
 
	}

	)
}

486 
	#CPLUSPLUS_CLOSER


	)

534 
tokí_li°_t
* 
ao_°rög_tokíize
(const*);

554 c⁄° 
tO±i⁄VÆue
* 
c⁄figFûeLﬂd
(const*);

584 
›ti⁄FûeLﬂd
(
tO±i⁄s
*, const*);

603 c⁄° 
tO±i⁄VÆue
* 
›ti⁄FödNextVÆue
(c⁄° 
tO±Desc
*, constÅOptionValue*, const*, const*);

620 c⁄° 
tO±i⁄VÆue
* 
›ti⁄FödVÆue
(c⁄° 
tO±Desc
*, const*, const*);

633 
›ti⁄Fªe
(
tO±i⁄s
*);

651 c⁄° 
tO±i⁄VÆue
* 
›ti⁄GëVÆue
(constÅOptionValue*, const*);

675 
›ti⁄LﬂdLöe
(
tO±i⁄s
*, const*);

694 c⁄° 
tO±i⁄VÆue
* 
›ti⁄NextVÆue
(constÅOptionValue*, constÅOptionValue*);

709 
›ti⁄O∆yUßge
(
tO±i⁄s
*, );

739 
›ti⁄Pro˚ss
(
tO±i⁄s
*, , **);

756 
›ti⁄Re°‹e
(
tO±i⁄s
*);

781 
›ti⁄SaveFûe
(
tO±i⁄s
*);

803 
›ti⁄SaveSèã
(
tO±i⁄s
*);

817 
›ti⁄U∆ﬂdNe°ed
(
tO±i⁄VÆue
 const *);

829 c⁄°* 
›ti⁄Vîsi⁄
();

871 #i‚de‡
HAVE_PATHFIND


872 * 
∑thföd
(const*, const*, const*);

888 
°ªqu©e
(const*);

907 
°ªqvcmp
(const*, const*);

935 
°ªqvm≠
(, , );

956 
°∫eqvcmp
(const*, const*, );

974 
°πønsf‹m
(*, const*);

977 
tO±Proc
 
	g›ti⁄SèckArg
, 
	g›ti⁄Un°ackArg
, 
	g›ti⁄BoﬁónVÆ
, 
	g›ti⁄NumîicVÆ
;

979 * 
ao_°rög_cook
(*, *);

981 
ao_°rög_cook_esˇ≥_ch¨
(const*, *, );

983 
exp‹t_›ti⁄s_to_guûe
(
tO±i⁄s
*);

985 
gíshñl›tUßge
(
tO±i⁄s
*, );

987 
›ti⁄BoﬁónVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

989 
uöçå_t
 
›ti⁄Enumî©i⁄VÆ
(
tO±i⁄s
*, 
tO±Desc
*, const * const *, );

991 
›ti⁄FûeCheck
(
tO±i⁄s
*, 
tO±Desc
*, 
ãO±FûeTy≥
, 
tuFûeMode
);

993 c⁄°* 
›ti⁄Keyw‹dName
(
tO±Desc
*, );

995 
›ti⁄LﬂdO±
(
tO±i⁄s
*, 
tO±Desc
*);

997 
ag_boﬁ
 
›ti⁄MakeP©h
(*, , const*, const*);

999 
›ti⁄Ne°edVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1001 
›ti⁄NumîicVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1003 
›ti⁄PagedUßge
(
tO±i⁄s
*, 
tO±Desc
*);

1005 
›ti⁄P¨£Shñl
(
tO±i⁄s
*);

1007 
›ti⁄PrötVîsi⁄
(
tO±i⁄s
*, 
tO±Desc
*);

1009 
›ti⁄PutShñl
(
tO±i⁄s
*);

1011 
›ti⁄Re£tO±
(
tO±i⁄s
*, 
tO±Desc
*);

1013 
›ti⁄SëMembîs
(
tO±i⁄s
*, 
tO±Desc
*, const * const *, );

1015 
›ti⁄ShowR™ge
(
tO±i⁄s
*, 
tO±Desc
*, *, );

1017 
›ti⁄SèckArg
(
tO±i⁄s
*, 
tO±Desc
*);

1019 
›ti⁄TimeVÆ
(
tO±i⁄s
*, 
tO±Desc
*);

1021 
›ti⁄Un°ackArg
(
tO±i⁄s
*, 
tO±Desc
*);

1023 
›ti⁄Ußge
(
tO±i⁄s
*, );

1025 
›ti⁄Vîsi⁄Stdîr
(
tO±i⁄s
*, 
tO±Desc
*);

1027 * 
ãxt_mm≠
(c⁄°*, , , 
tm≠_öfo_t
*);

1029 
ãxt_munm≠
(
tm≠_öfo_t
*);

1031 
	gCPLUSPLUS_CLOSER


	@/usr/include/autoopts/usage-txt.h

29 #i‚de‡
AUTOOPTS_USAGE_TXT_H_GUARD


30 
	#AUTOOPTS_USAGE_TXT_H_GUARD
 1

	)

32 #unde‡
cch_t


33 
	#cch_t
 c⁄°

	)

39 
	mfõld_˘
;

40 * 
	muçz_GnuBoﬁArg
;

41 * 
	muçz_GnuKeyArg
;

42 * 
	muçz_GnuFûeArg
;

43 * 
	muçz_GnuKeyLArg
;

44 * 
	muçz_GnuTimeArg
;

45 * 
	muçz_GnuNumArg
;

46 * 
	muçz_GnuSåArg
;

47 
cch_t
* 
	m≠z_°r
[ 127 ];

48 } 
	tußge_ãxt_t
;

54 
ußge_ãxt_t
 
›ti⁄_ußge_ãxt
;

56 #i‡
deföed
(
AUTOOPTS_INTERNAL
)

60 
	#zAO_Bad
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 0])

	)

61 
	#zAO_Big
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 1])

	)

62 
	#zAO_Eº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 2])

	)

63 
	#zAO_Sml
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 3])

	)

64 
	#zAO_Vî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 4])

	)

65 
	#zAO_Wo›s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 5])

	)

66 
	#zAlüsR™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 6])

	)

67 
	#zAŒ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 7])

	)

68 
	#zA…
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 8])

	)

69 
	#zAmbigKey
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 9])

	)

70 
	#zAmbigO±Så
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 10])

	)

71 
	#zArgsMu°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 11])

	)

72 
	#zAtMo°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 12])

	)

73 
	#zAuto
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 13])

	)

74 
	#zBadPùe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 14])

	)

75 
	#zBadVîArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 15])

	)

76 
	#zC™tFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 16])

	)

77 
	#zC™tSave
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 17])

	)

78 
	#zDeÁu…O±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 18])

	)

79 
	#zDis
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 19])

	)

80 
	#zDißbÀdEº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 20])

	)

81 
	#zDißbÀdO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 21])

	)

82 
	#zDißbÀdWhy
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 22])

	)

83 
	#zE«b
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 23])

	)

84 
	#zEquiv
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 24])

	)

85 
	#zEºO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 25])

	)

86 
	#zExamöeFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 26])

	)

87 
	#zFiveS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 27])

	)

88 
	#zFœgOkay
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 28])

	)

89 
	#zFmtFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 29])

	)

90 
	#zF‹kFaû
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 30])

	)

91 
	#zFSEºO±Lﬂd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 31])

	)

92 
	#zFSEºRódFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 32])

	)

93 
	#zFSO±Eº‹
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 33])

	)

94 
	#zFSO±EºMayExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 34])

	)

95 
	#zFSO±EºMu°Exi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 35])

	)

96 
	#zFSO±EºNoExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 36])

	)

97 
	#zFSO±EºO≥n
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 37])

	)

98 
	#zFSO±EºF›í
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 38])

	)

99 
	#zFûeC™nŸExi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 39])

	)

100 
	#zFûeMu°Exi°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 40])

	)

101 
	#zGíshñl
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 41])

	)

102 
	#zGnuBoﬁArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuBoﬁArg
)

	)

103 
	#zGnuBªak
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 42])

	)

104 
	#zGnuKeyArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuKeyArg
)

	)

105 
	#zGnuFûeArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuFûeArg
)

	)

106 
	#zGnuKeyLArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuKeyLArg
)

	)

107 
	#zGnuTimeArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuTimeArg
)

	)

108 
	#zGnuNe°Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 43])

	)

109 
	#zGnuNumArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuNumArg
)

	)

110 
	#zGnuO±Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 44])

	)

111 
	#zGnuO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 45])

	)

112 
	#zGnuSåArg
 (
›ti⁄_ußge_ãxt
.
uçz_GnuSåArg
)

	)

113 
	#zIŒO±Chr
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 46])

	)

114 
	#zIŒO±Så
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 47])

	)

115 
	#zIŒegÆ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 48])

	)

116 
	#zI¡R™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 49])

	)

117 
	#zInvÆO±Desc
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 50])

	)

118 
	#zLowîBôs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 51])

	)

119 
	#zMembîs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 52])

	)

120 
	#zMisArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 53])

	)

121 
	#zMu…iEquiv
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 54])

	)

122 
	#zMu°
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 55])

	)

123 
	#zNìdO√
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 56])

	)

124 
	#zNoArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 57])

	)

125 
	#zNoArgs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 58])

	)

126 
	#zNoCª©
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 59])

	)

127 
	#zNoFœgs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 60])

	)

128 
	#zNoKey
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 61])

	)

129 
	#zNoLim
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 62])

	)

130 
	#zNoPª£t
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 63])

	)

131 
	#zNoRe£tArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 64])

	)

132 
	#zNoRq_NoShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 65])

	)

133 
	#zNoRq_ShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 66])

	)

134 
	#zNoSèt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 67])

	)

135 
	#zNoSèã
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 68])

	)

136 
	#zN⁄e
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 69])

	)

137 
	#zNŸDef
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 70])

	)

138 
	#zNŸCmdO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 71])

	)

139 
	#zNŸEnough
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 72])

	)

140 
	#zNŸFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 73])

	)

141 
	#zNŸNumbî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 74])

	)

142 
	#zNrmO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 75])

	)

143 
	#zNumbîO±
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 76])

	)

144 
	#zO√S∑˚
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 77])

	)

145 
	#zO∆yO√
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 78])

	)

146 
	#zO±sO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 79])

	)

147 
	#zP©hFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 80])

	)

148 
	#zPlsSídBugs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 81])

	)

149 
	#zPª£t
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 82])

	)

150 
	#zPª£tFûe
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 83])

	)

151 
	#zPª£tI¡ro
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 84])

	)

152 
	#zProg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 85])

	)

153 
	#zProhib
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 86])

	)

154 
	#zRe‹dî
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 87])

	)

155 
	#zR™ge
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 88])

	)

156 
	#zR™geAbove
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 89])

	)

157 
	#zR™geLõ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 90])

	)

158 
	#zR™geBadLõ
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 91])

	)

159 
	#zR™geO∆y
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 92])

	)

160 
	#zR™geOr
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 93])

	)

161 
	#zR™geEº
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 94])

	)

162 
	#zR™geExa˘
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 95])

	)

163 
	#zR™geSˇÀd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 96])

	)

164 
	#zR™geU±o
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 97])

	)

165 
	#zRe£tNŸC⁄fig
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 98])

	)

166 
	#zReqFmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[ 99])

	)

167 
	#zReqO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[100])

	)

168 
	#zReqThe£
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[101])

	)

169 
	#zReq_NoShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[102])

	)

170 
	#zReq_ShπTé
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[103])

	)

171 
	#zSïCh¨s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[104])

	)

172 
	#zSëMembîSëtögs
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[105])

	)

173 
	#zShπGnuO±Fmt
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[106])

	)

174 
	#zSixS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[107])

	)

175 
	#zStdBoﬁArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[108])

	)

176 
	#zStdBªak
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[109])

	)

177 
	#zStdFûeArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[110])

	)

178 
	#zStdKeyArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[111])

	)

179 
	#zStdKeyLArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[112])

	)

180 
	#zStdTimeArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[113])

	)

181 
	#zStdNe°Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[114])

	)

182 
	#zStdNoArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[115])

	)

183 
	#zStdNumArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[116])

	)

184 
	#zStdO±Arg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[117])

	)

185 
	#zStdReqArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[118])

	)

186 
	#zStdSåArg
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[119])

	)

187 
	#zTabHyp
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[120])

	)

188 
	#zTabHypAnd
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[121])

	)

189 
	#zTabout
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[122])

	)

190 
	#zThªeS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[123])

	)

191 
	#zTwoS∑˚s
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[124])

	)

192 
	#zUpTo
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[125])

	)

193 
	#zVÆidKeys
 (
›ti⁄_ußge_ãxt
.
≠z_°r
[126])

	)

201 
	gíg_zGnuBoﬁArg
[] = "=T/F";

202 
	gíg_zGnuKeyArg
[] = "=KWd";

203 
	gíg_zGnuFûeArg
[] = "=file";

204 
	gíg_zGnuKeyLArg
[] = "=Mbr";

205 
	gíg_zGnuTimeArg
[] = "=Tim";

206 
	gíg_zGnuNumArg
[] = "=num";

207 
	gíg_zGnuSåArg
[] = "=str";

208 c⁄° 
	gußge_txt
[4159] =

361 
ußge_ãxt_t
 
	g›ti⁄_ußge_ãxt
 = {

363 
íg_zGnuBoﬁArg
, 
íg_zGnuKeyArg
, 
íg_zGnuFûeArg
, 
íg_zGnuKeyLArg
,

364 
íg_zGnuTimeArg
, 
íg_zGnuNumArg
, 
íg_zGnuSåArg
,

366 
ußge_txt
 + 0, usage_txt + 52, usage_txt + 98, usage_txt + 197,

367 
ußge_txt
 + 247, usage_txt + 338, usage_txt + 397, usage_txt + 447,

368 
ußge_txt
 + 451, usage_txt + 478, usage_txt + 527, usage_txt + 555,

369 
ußge_txt
 + 592, usage_txt + 617, usage_txt + 643, usage_txt + 683,

370 
ußge_txt
 + 820, usage_txt + 868, usage_txt + 922, usage_txt + 964,

371 
ußge_txt
 + 988, usage_txt +1028, usage_txt +1043, usage_txt +1073,

372 
ußge_txt
 +1099, usage_txt +1112, usage_txt +1126, usage_txt +1173,

373 
ußge_txt
 +1179, usage_txt +1282, usage_txt +1294, usage_txt +1345,

374 
ußge_txt
 +1396, usage_txt +1430, usage_txt +1471, usage_txt +1494,

375 
ußge_txt
 +1520, usage_txt +1551, usage_txt +1565, usage_txt +1580,

376 
ußge_txt
 +1611, usage_txt +1638, usage_txt +1744, usage_txt +1750,

377 
ußge_txt
 +1756, usage_txt +1763, usage_txt +1774, usage_txt +1800,

378 
ußge_txt
 +1826, usage_txt +1834, usage_txt +1870, usage_txt +1921,

379 
ußge_txt
 +1977, usage_txt +2011, usage_txt +2049, usage_txt +2114,

380 
ußge_txt
 +2157, usage_txt +2192, usage_txt +2233, usage_txt +2273,

381 
ußge_txt
 +2300, usage_txt +2367, usage_txt +2415, usage_txt +2448,

382 
ußge_txt
 +2473, usage_txt +2521, usage_txt +2556, usage_txt +2594,

383 
ußge_txt
 +2621, usage_txt +2670, usage_txt +2675, usage_txt +2693,

384 
ußge_txt
 +2728, usage_txt +2772, usage_txt +2826, usage_txt +2872,

385 
ußge_txt
 +2880, usage_txt +2928, usage_txt +2930, usage_txt +2955,

386 
ußge_txt
 +2989, usage_txt +3008, usage_txt +3042, usage_txt +3078,

387 
ußge_txt
 +3116, usage_txt +3172, usage_txt +3180, usage_txt +3206,

388 
ußge_txt
 +3272, usage_txt +3285, usage_txt +3316, usage_txt +3353,

389 
ußge_txt
 +3399, usage_txt +3415, usage_txt +3421, usage_txt +3473,

390 
ußge_txt
 +3487, usage_txt +3533, usage_txt +3561, usage_txt +3606,

391 
ußge_txt
 +3648, usage_txt +3662, usage_txt +3687, usage_txt +3727,

392 
ußge_txt
 +3770, usage_txt +3774, usage_txt +3993, usage_txt +3996,

393 
ußge_txt
 +4003, usage_txt +4007, usage_txt +4015, usage_txt +4019,

394 
ußge_txt
 +4023, usage_txt +4027, usage_txt +4031, usage_txt +4035,

395 
ußge_txt
 +4039, usage_txt +4043, usage_txt +4047, usage_txt +4051,

396 
ußge_txt
 +4055, usage_txt +4062, usage_txt +4074, usage_txt +4082,

397 
ußge_txt
 +4086, usage_txt +4089, usage_txt +4122

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libgen.h

19 #i‚de‡
_LIBGEN_H


20 
	#_LIBGEN_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

35 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

36 
	#ba£«me
 
__xpg_ba£«me


	)

38 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

72 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


73 
	#NETDB_INTERNAL
 -1

	)

74 
	#NETDB_SUCCESS
 0

	)

75 
	#NO_ADDRESS
 
NO_DATA


	)

78 #ifde‡
__USE_XOPEN2K


80 
	#IPPORT_RESERVED
 1024

	)

83 #ifde‡
__USE_GNU


85 
	#SCOPE_DELIMITER
 '%'

	)

88 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


91 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

94 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

99 
	sho°ít


101 *
h_«me
;

102 **
h_Æü£s
;

103 
h_addπy≥
;

104 
h_Àngth
;

105 **
h_addr_li°
;

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


107 
	#h_addr
 
h_addr_li°
[0]

	)

116 
	`£tho°ít
 (
__°ay_›í
);

122 
	`ídho°ít
 ();

129 
ho°ít
 *
	`gëho°ít
 ();

136 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

137 
__ty≥
);

143 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

145 #ifde‡
__USE_MISC


154 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

166 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

168 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

169 *
__ª°ri˘
 
__h_î∫›
);

171 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

172 
__ty≥
,

173 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

175 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

176 *
__ª°ri˘
 
__h_î∫›
);

178 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

179 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

180 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

181 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

182 *
__ª°ri˘
 
__h_î∫›
);

184 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

185 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

186 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

187 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

188 *
__ª°ri˘
 
__h_î∫›
);

197 
	`£äëít
 (
__°ay_›í
);

203 
	`íd√ã¡
 ();

210 
√ã¡
 *
	`gë√ã¡
 ();

217 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

223 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

225 #ifdef 
__USE_MISC


236 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

237 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

238 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

239 *
__ª°ri˘
 
__h_î∫›
);

241 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

242 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

243 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

244 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

245 *
__ª°ri˘
 
__h_î∫›
);

247 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

248 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

249 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

250 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

251 *
__ª°ri˘
 
__h_î∫›
);

256 
	s£rvít


258 *
s_«me
;

259 **
s_Æü£s
;

260 
s_p‹t
;

261 *
s_¥Ÿo
;

269 
	`£t£rvít
 (
__°ay_›í
);

275 
	`íd£rvít
 ();

282 
£rvít
 *
	`gë£rvít
 ();

289 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

290 
__c⁄°
 *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

313 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

424 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

453 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

454 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

465 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

466 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 
__c⁄°
 *
__ª°ri˘
 
__«me
,

481 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

482 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 
__c⁄°
 *
__ª°ri˘
 
__«me
,

493 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

494 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

506 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

516 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

527 
	`ºesvp‹t
 (*
__Æp‹t
);

536 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

541 #ifdef 
__USE_POSIX


543 
	saddröfo


545 
ai_Êags
;

546 
ai_Ámûy
;

547 
ai_sockty≥
;

548 
ai_¥Ÿocﬁ
;

549 
sockÀn_t
 
ai_addæí
;

550 
sockaddr
 *
ai_addr
;

551 *
ai_ˇn⁄«me
;

552 
addröfo
 *
ai_√xt
;

555 #ifde‡
__USE_GNU


557 
	sgaicb


559 c⁄° *
¨_«me
;

560 c⁄° *
¨_£rvi˚
;

561 c⁄° 
addröfo
 *
¨_ªque°
;

562 
addröfo
 *
¨_ªsu…
;

564 
__ªtu∫
;

565 
__unu£d
[5];

569 
	#GAI_WAIT
 0

	)

570 
	#GAI_NOWAIT
 1

	)

574 
	#AI_PASSIVE
 0x0001

	)

575 
	#AI_CANONNAME
 0x0002

	)

576 
	#AI_NUMERICHOST
 0x0004

	)

577 
	#AI_V4MAPPED
 0x0008

	)

578 
	#AI_ALL
 0x0010

	)

579 
	#AI_ADDRCONFIG
 0x0020

	)

581 #ifde‡
__USE_GNU


582 
	#AI_IDN
 0x0040

	)

585 
	#AI_CANONIDN
 0x0080

	)

586 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

588 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

591 
	#AI_NUMERICSERV
 0x0400

	)

594 
	#EAI_BADFLAGS
 -1

	)

595 
	#EAI_NONAME
 -2

	)

596 
	#EAI_AGAIN
 -3

	)

597 
	#EAI_FAIL
 -4

	)

598 
	#EAI_FAMILY
 -6

	)

599 
	#EAI_SOCKTYPE
 -7

	)

600 
	#EAI_SERVICE
 -8

	)

601 
	#EAI_MEMORY
 -10

	)

602 
	#EAI_SYSTEM
 -11

	)

603 
	#EAI_OVERFLOW
 -12

	)

604 #ifde‡
__USE_GNU


605 
	#EAI_NODATA
 -5

	)

606 
	#EAI_ADDRFAMILY
 -9

	)

607 
	#EAI_INPROGRESS
 -100

	)

608 
	#EAI_CANCELED
 -101

	)

609 
	#EAI_NOTCANCELED
 -102

	)

610 
	#EAI_ALLDONE
 -103

	)

611 
	#EAI_INTR
 -104

	)

612 
	#EAI_IDN_ENCODE
 -105

	)

615 #ifde‡
__USE_MISC


616 
	#NI_MAXHOST
 1025

	)

617 
	#NI_MAXSERV
 32

	)

620 
	#NI_NUMERICHOST
 1

	)

621 
	#NI_NUMERICSERV
 2

	)

622 
	#NI_NOFQDN
 4

	)

623 
	#NI_NAMEREQD
 8

	)

624 
	#NI_DGRAM
 16

	)

625 #ifde‡
__USE_GNU


626 
	#NI_IDN
 32

	)

627 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

629 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

638 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

639 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

640 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

641 
addröfo
 **
__ª°ri˘
 
__∑i
);

644 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

647 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

653 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

654 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

655 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

656 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

659 #ifde‡
__USE_GNU


668 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

669 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

679 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

680 
__c⁄°
 
time•ec
 *
__timeout
);

683 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

686 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

689 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/dir.h

19 #i‚def 
_SYS_DIR_H


20 
	#_SYS_DIR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<dúít.h
>

26 
	#dúe˘
 
dúít


	)

	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/stropts.h

1 
	~<°r›ts.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/un.h

19 #i‚def 
_SYS_UN_H


20 
	#_SYS_UN_H
 1

	)

22 
	~<sys/cdefs.h
>

25 
	~<bôs/sockaddr.h
>

27 
__BEGIN_DECLS


30 
	ssockaddr_un


32 
__SOCKADDR_COMMON
 (
sun_
);

33 
	msun_∑th
[108];

37 #ifde‡
__USE_MISC


38 
	~<°rög.h
>

41 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

42 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

45 
	g__END_DECLS


	@/usr/include/sys/utsname.h

23 #i‚def 
_SYS_UTSNAME_H


24 
	#_SYS_UTSNAME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ut¢ame.h
>

32 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


33 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

35 #i‚de‡
_UTSNAME_NODENAME_LENGTH


36 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

38 #i‚de‡
_UTSNAME_RELEASE_LENGTH


39 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

41 #i‚de‡
_UTSNAME_VERSION_LENGTH


42 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

44 #i‚de‡
_UTSNAME_MACHINE_LENGTH


45 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

49 
	sut¢ame


52 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

55 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

58 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

60 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

63 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

65 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

67 #ifde‡
__USE_GNU


68 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

70 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

75 #ifde‡
__USE_SVID


77 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

82 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/sysexits.h

32 #i‚def 
_SYSEXITS_H


33 
	#_SYSEXITS_H
 1

	)

92 
	#EX_OK
 0

	)

94 
	#EX__BASE
 64

	)

96 
	#EX_USAGE
 64

	)

97 
	#EX_DATAERR
 65

	)

98 
	#EX_NOINPUT
 66

	)

99 
	#EX_NOUSER
 67

	)

100 
	#EX_NOHOST
 68

	)

101 
	#EX_UNAVAILABLE
 69

	)

102 
	#EX_SOFTWARE
 70

	)

103 
	#EX_OSERR
 71

	)

104 
	#EX_OSFILE
 72

	)

105 
	#EX_CANTCREAT
 73

	)

106 
	#EX_IOERR
 74

	)

107 
	#EX_TEMPFAIL
 75

	)

108 
	#EX_PROTOCOL
 76

	)

109 
	#EX_NOPERM
 77

	)

110 
	#EX_CONFIG
 78

	)

112 
	#EX__MAX
 78

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@/usr/local/include/mpi.h

7 #i‚de‡
MPI_INCLUDED


8 
	#MPI_INCLUDED


	)

13 #i‡
deföed
(
__˝lu•lus
)

18 
	#MPI_IDENT
 0

	)

19 
	#MPI_CONGRUENT
 1

	)

20 
	#MPI_SIMILAR
 2

	)

21 
	#MPI_UNEQUAL
 3

	)

23 
	tMPI_D©©y≥
;

24 
	#MPI_CHAR
 ((
MPI_D©©y≥
)0x4c000101)

	)

25 
	#MPI_SIGNED_CHAR
 ((
MPI_D©©y≥
)0x4c000118)

	)

26 
	#MPI_UNSIGNED_CHAR
 ((
MPI_D©©y≥
)0x4c000102)

	)

27 
	#MPI_BYTE
 ((
MPI_D©©y≥
)0x4c00010d)

	)

28 
	#MPI_WCHAR
 ((
MPI_D©©y≥
)0x4c00040e)

	)

29 
	#MPI_SHORT
 ((
MPI_D©©y≥
)0x4c000203)

	)

30 
	#MPI_UNSIGNED_SHORT
 ((
MPI_D©©y≥
)0x4c000204)

	)

31 
	#MPI_INT
 ((
MPI_D©©y≥
)0x4c000405)

	)

32 
	#MPI_UNSIGNED
 ((
MPI_D©©y≥
)0x4c000406)

	)

33 
	#MPI_LONG
 ((
MPI_D©©y≥
)0x4c000407)

	)

34 
	#MPI_UNSIGNED_LONG
 ((
MPI_D©©y≥
)0x4c000408)

	)

35 
	#MPI_FLOAT
 ((
MPI_D©©y≥
)0x4c00040a)

	)

36 
	#MPI_DOUBLE
 ((
MPI_D©©y≥
)0x4c00080b)

	)

37 
	#MPI_LONG_DOUBLE
 ((
MPI_D©©y≥
)0x4c000c0c)

	)

38 
	#MPI_LONG_LONG_INT
 ((
MPI_D©©y≥
)0x4c000809)

	)

39 
	#MPI_UNSIGNED_LONG_LONG
 ((
MPI_D©©y≥
)0x4c000819)

	)

40 
	#MPI_LONG_LONG
 
MPI_LONG_LONG_INT


	)

42 
	#MPI_PACKED
 ((
MPI_D©©y≥
)0x4c00010f)

	)

43 
	#MPI_LB
 ((
MPI_D©©y≥
)0x4c000010)

	)

44 
	#MPI_UB
 ((
MPI_D©©y≥
)0x4c000011)

	)

54 
	#MPI_FLOAT_INT
 ((
MPI_D©©y≥
)0x8c000000)

	)

55 
	#MPI_DOUBLE_INT
 ((
MPI_D©©y≥
)0x8c000001)

	)

56 
	#MPI_LONG_INT
 ((
MPI_D©©y≥
)0x8c000002)

	)

57 
	#MPI_SHORT_INT
 ((
MPI_D©©y≥
)0x8c000003)

	)

58 
	#MPI_2INT
 ((
MPI_D©©y≥
)0x4c000816)

	)

59 
	#MPI_LONG_DOUBLE_INT
 ((
MPI_D©©y≥
)0x8c000004)

	)

62 
	#MPI_COMPLEX
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

63 
	#MPI_DOUBLE_COMPLEX
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

64 
	#MPI_LOGICAL
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

65 
	#MPI_REAL
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

66 
	#MPI_DOUBLE_PRECISION
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

67 
	#MPI_INTEGER
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

68 
	#MPI_2INTEGER
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

69 
	#MPI_2COMPLEX
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

70 
	#MPI_2DOUBLE_COMPLEX
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

71 
	#MPI_2REAL
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

72 
	#MPI_2DOUBLE_PRECISION
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

73 
	#MPI_CHARACTER
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

76 
	#MPI_REAL4
 ((
MPI_D©©y≥
)0x4c000427)

	)

77 
	#MPI_REAL8
 ((
MPI_D©©y≥
)0x4c000829)

	)

78 
	#MPI_REAL16
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

79 
	#MPI_COMPLEX8
 ((
MPI_D©©y≥
)0x4c000828)

	)

80 
	#MPI_COMPLEX16
 ((
MPI_D©©y≥
)0x4c00102a)

	)

81 
	#MPI_COMPLEX32
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

82 
	#MPI_INTEGER1
 ((
MPI_D©©y≥
)0x4c00012d)

	)

83 
	#MPI_INTEGER2
 ((
MPI_D©©y≥
)0x4c00022f)

	)

84 
	#MPI_INTEGER4
 ((
MPI_D©©y≥
)0x4c000430)

	)

85 
	#MPI_INTEGER8
 ((
MPI_D©©y≥
)0x4c000831)

	)

86 
	#MPI_INTEGER16
 ((
MPI_D©©y≥
)
MPI_DATATYPE_NULL
)

	)

89 
	#MPI_INT8_T
 ((
MPI_D©©y≥
)0x4c000137)

	)

90 
	#MPI_INT16_T
 ((
MPI_D©©y≥
)0x4c000238)

	)

91 
	#MPI_INT32_T
 ((
MPI_D©©y≥
)0x4c000439)

	)

92 
	#MPI_INT64_T
 ((
MPI_D©©y≥
)0x4c00083a)

	)

93 
	#MPI_UINT8_T
 ((
MPI_D©©y≥
)0x4c00013b)

	)

94 
	#MPI_UINT16_T
 ((
MPI_D©©y≥
)0x4c00023c)

	)

95 
	#MPI_UINT32_T
 ((
MPI_D©©y≥
)0x4c00043d)

	)

96 
	#MPI_UINT64_T
 ((
MPI_D©©y≥
)0x4c00083e)

	)

99 
	#MPI_C_BOOL
 ((
MPI_D©©y≥
)0x4c00013f)

	)

100 
	#MPI_C_FLOAT_COMPLEX
 ((
MPI_D©©y≥
)0x4c000840)

	)

101 
	#MPI_C_COMPLEX
 
MPI_C_FLOAT_COMPLEX


	)

102 
	#MPI_C_DOUBLE_COMPLEX
 ((
MPI_D©©y≥
)0x4c001041)

	)

103 
	#MPI_C_LONG_DOUBLE_COMPLEX
 ((
MPI_D©©y≥
)0x4c001842)

	)

106 
	#MPI_AINT
 ((
MPI_D©©y≥
)0x4c000443)

	)

107 
	#MPI_OFFSET
 ((
MPI_D©©y≥
)0x4c000844)

	)

110 
	#MPI_TYPECLASS_REAL
 1

	)

111 
	#MPI_TYPECLASS_INTEGER
 2

	)

112 
	#MPI_TYPECLASS_COMPLEX
 3

	)

115 
	tMPI_Comm
;

116 
	#MPI_COMM_WORLD
 ((
MPI_Comm
)0x44000000)

	)

117 
	#MPI_COMM_SELF
 ((
MPI_Comm
)0x44000001)

	)

120 
	tMPI_Group
;

121 
	#MPI_GROUP_EMPTY
 ((
MPI_Group
)0x48000000)

	)

124 
	tMPI_Wö
;

125 
	#MPI_WIN_NULL
 ((
MPI_Wö
)0x20000000)

	)

129 
	#MPI_FILE_DEFINED


	)

132 
ADIOI_FûeD
 *
	tMPI_Fûe
;

133 
	#MPI_FILE_NULL
 ((
MPI_Fûe
)0)

	)

136 
	tMPI_Op
;

138 
	#MPI_MAX
 (
MPI_Op
)(0x58000001)

	)

139 
	#MPI_MIN
 (
MPI_Op
)(0x58000002)

	)

140 
	#MPI_SUM
 (
MPI_Op
)(0x58000003)

	)

141 
	#MPI_PROD
 (
MPI_Op
)(0x58000004)

	)

142 
	#MPI_LAND
 (
MPI_Op
)(0x58000005)

	)

143 
	#MPI_BAND
 (
MPI_Op
)(0x58000006)

	)

144 
	#MPI_LOR
 (
MPI_Op
)(0x58000007)

	)

145 
	#MPI_BOR
 (
MPI_Op
)(0x58000008)

	)

146 
	#MPI_LXOR
 (
MPI_Op
)(0x58000009)

	)

147 
	#MPI_BXOR
 (
MPI_Op
)(0x5800000a)

	)

148 
	#MPI_MINLOC
 (
MPI_Op
)(0x5800000b)

	)

149 
	#MPI_MAXLOC
 (
MPI_Op
)(0x5800000c)

	)

150 
	#MPI_REPLACE
 (
MPI_Op
)(0x5800000d)

	)

165 
	#MPI_TAG_UB
 0x64400001

	)

166 
	#MPI_HOST
 0x64400003

	)

167 
	#MPI_IO
 0x64400005

	)

168 
	#MPI_WTIME_IS_GLOBAL
 0x64400007

	)

169 
	#MPI_UNIVERSE_SIZE
 0x64400009

	)

170 
	#MPI_LASTUSEDCODE
 0x6440000b

	)

171 
	#MPI_APPNUM
 0x6440000d

	)

175 
	#MPI_WIN_BASE
 0x66000001

	)

176 
	#MPI_WIN_SIZE
 0x66000003

	)

177 
	#MPI_WIN_DISP_UNIT
 0x66000005

	)

180 
	#MPI_COMM_NULL
 ((
MPI_Comm
)0x04000000)

	)

181 
	#MPI_OP_NULL
 ((
MPI_Op
)0x18000000)

	)

182 
	#MPI_GROUP_NULL
 ((
MPI_Group
)0x08000000)

	)

183 
	#MPI_DATATYPE_NULL
 ((
MPI_D©©y≥
)0x0c000000)

	)

184 
	#MPI_REQUEST_NULL
 ((
MPI_Reque°
)0x2c000000)

	)

185 
	#MPI_ERRHANDLER_NULL
 ((
MPI_Eºh™dÀr
)0x14000000)

	)

188 
	#MPI_MAX_PROCESSOR_NAME
 128

	)

189 
	#MPI_MAX_ERROR_STRING
 1024

	)

190 
	#MPI_MAX_PORT_NAME
 256

	)

191 
	#MPI_MAX_OBJECT_NAME
 128

	)

194 
	#MPI_UNDEFINED
 (-32766)

	)

195 
	#MPI_KEYVAL_INVALID
 0x24000000

	)

198 
	#MPI_BSEND_OVERHEAD
 56

	)

201 
	eMPIR_T›o_ty≥
 { 
MPI_GRAPH
=1, 
MPI_CART
=2, 
MPI_DIST_GRAPH
=3 } 
	tMPIR_T›o_ty≥
;

203 
	#MPI_BOTTOM
 (*)0

	)

204 
	#MPI_UNWEIGHTED
 ((*)0)

	)

206 
	#MPI_PROC_NULL
 (-1)

	)

207 
	#MPI_ANY_SOURCE
 (-2)

	)

208 
	#MPI_ROOT
 (-3)

	)

209 
	#MPI_ANY_TAG
 (-1)

	)

211 
	#MPI_LOCK_EXCLUSIVE
 234

	)

212 
	#MPI_LOCK_SHARED
 235

	)

215 (
MPI_H™dÀr_fun˘i⁄
Ë–
	tMPI_Comm
 *, *, ... );

216 (
MPI_Comm_c›y_©å_fun˘i⁄
)(
	tMPI_Comm
, , *, *,

218 (
MPI_Comm_dñëe_©å_fun˘i⁄
)(
	tMPI_Comm
, , *, *);

219 (
MPI_Ty≥_c›y_©å_fun˘i⁄
)(
	tMPI_D©©y≥
, , *, *,

221 (
MPI_Ty≥_dñëe_©å_fun˘i⁄
)(
	tMPI_D©©y≥
, , *, *);

222 (
MPI_Wö_c›y_©å_fun˘i⁄
)(
	tMPI_Wö
, , *, *, *,

224 (
MPI_Wö_dñëe_©å_fun˘i⁄
)(
	tMPI_Wö
, , *, *);

226 (
MPI_Comm_îrh™dÀr_fun˘i⁄
)(
	tMPI_Comm
 *, *, ...);

227 (
MPI_Fûe_îrh™dÀr_fun˘i⁄
)(
	tMPI_Fûe
 *, *, ...);

228 (
MPI_Wö_îrh™dÀr_fun˘i⁄
)(
	tMPI_Wö
 *, *, ...);

230 
MPI_Comm_îrh™dÀr_fun˘i⁄
 
	tMPI_Comm_îrh™dÀr_‚
;

231 
MPI_Fûe_îrh™dÀr_fun˘i⁄
 
	tMPI_Fûe_îrh™dÀr_‚
;

232 
MPI_Wö_îrh™dÀr_fun˘i⁄
 
	tMPI_Wö_îrh™dÀr_‚
;

236 
	#MPI_ERRORS_ARE_FATAL
 ((
MPI_Eºh™dÀr
)0x54000000)

	)

237 
	#MPI_ERRORS_RETURN
 ((
MPI_Eºh™dÀr
)0x54000001)

	)

242 
	#MPIR_ERRORS_THROW_EXCEPTIONS
 ((
MPI_Eºh™dÀr
)0x54000002)

	)

243 
	tMPI_Eºh™dÀr
;

249 
	#MPI_NULL_COPY_FN
 ((
MPI_C›y_fun˘i⁄
 *)0)

	)

250 
	#MPI_NULL_DELETE_FN
 ((
MPI_Dñëe_fun˘i⁄
 *)0)

	)

251 
	#MPI_DUP_FN
 
MPIR_Dup_‚


	)

253 
	#MPI_COMM_NULL_COPY_FN
 ((
MPI_Comm_c›y_©å_fun˘i⁄
*)0)

	)

254 
	#MPI_COMM_NULL_DELETE_FN
 ((
MPI_Comm_dñëe_©å_fun˘i⁄
*)0)

	)

255 
	#MPI_COMM_DUP_FN
 ((
MPI_Comm_c›y_©å_fun˘i⁄
 *)
MPI_DUP_FN
)

	)

256 
	#MPI_WIN_NULL_COPY_FN
 ((
MPI_Wö_c›y_©å_fun˘i⁄
*)0)

	)

257 
	#MPI_WIN_NULL_DELETE_FN
 ((
MPI_Wö_dñëe_©å_fun˘i⁄
*)0)

	)

258 
	#MPI_WIN_DUP_FN
 ((
MPI_Wö_c›y_©å_fun˘i⁄
*)
MPI_DUP_FN
)

	)

259 
	#MPI_TYPE_NULL_COPY_FN
 ((
MPI_Ty≥_c›y_©å_fun˘i⁄
*)0)

	)

260 
	#MPI_TYPE_NULL_DELETE_FN
 ((
MPI_Ty≥_dñëe_©å_fun˘i⁄
*)0)

	)

261 
	#MPI_TYPE_DUP_FN
 ((
MPI_Ty≥_c›y_©å_fun˘i⁄
*)
MPI_DUP_FN
)

	)

264 
	tMPI_Reque°
;

267 (
MPI_U£r_fun˘i⁄
Ë–*, *, *, 
	tMPI_D©©y≥
 * );

270 (
MPI_C›y_fun˘i⁄
Ë–
	tMPI_Comm
, , *, *, *, * );

271 (
MPI_Dñëe_fun˘i⁄
Ë–
	tMPI_Comm
, , *, * );

273 
	#MPI_VERSION
 2

	)

274 
	#MPI_SUBVERSION
 2

	)

275 
	#MPICH_NAME
 2

	)

276 
	#MPICH2
 1

	)

277 
	#MPICH_HAS_C2F
 1

	)

303 
	#MPICH2_VERSION
 "1.2.1p1"

	)

304 
	#MPICH2_NUMVERSION
 10201301

	)

306 
	#MPICH2_RELEASE_TYPE_ALPHA
 0

	)

307 
	#MPICH2_RELEASE_TYPE_BETA
 1

	)

308 
	#MPICH2_RELEASE_TYPE_RC
 2

	)

309 
	#MPICH2_RELEASE_TYPE_PATCH
 3

	)

311 
	#MPICH2_CALC_VERSION
(
MAJOR
, 
MINOR
, 
REVISION
, 
TYPE
, 
PATCH
) \

312 (((
MAJOR
Ë* 10000000Ë+ ((
MINOR
Ë* 100000Ë+ ((
REVISION
Ë* 1000Ë+ ((
TYPE
Ë* 100Ë+ (
PATCH
))

	)

315 
	eMPIR_Comböî_íum
 {

316 
MPI_COMBINER_NAMED
 = 1,

317 
MPI_COMBINER_DUP
 = 2,

318 
MPI_COMBINER_CONTIGUOUS
 = 3,

319 
MPI_COMBINER_VECTOR
 = 4,

320 
MPI_COMBINER_HVECTOR_INTEGER
 = 5,

321 
MPI_COMBINER_HVECTOR
 = 6,

322 
MPI_COMBINER_INDEXED
 = 7,

323 
MPI_COMBINER_HINDEXED_INTEGER
 = 8,

324 
MPI_COMBINER_HINDEXED
 = 9,

325 
MPI_COMBINER_INDEXED_BLOCK
 = 10,

326 
MPI_COMBINER_STRUCT_INTEGER
 = 11,

327 
MPI_COMBINER_STRUCT
 = 12,

328 
MPI_COMBINER_SUBARRAY
 = 13,

329 
MPI_COMBINER_DARRAY
 = 14,

330 
MPI_COMBINER_F90_REAL
 = 15,

331 
MPI_COMBINER_F90_COMPLEX
 = 16,

332 
MPI_COMBINER_F90_INTEGER
 = 17,

333 
MPI_COMBINER_RESIZED
 = 18

337 
	tMPI_Info
;

338 
	#MPI_INFO_NULL
 ((
MPI_Info
)0x1c000000)

	)

339 
	#MPI_MAX_INFO_KEY
 255

	)

340 
	#MPI_MAX_INFO_VAL
 1024

	)

343 
	#MPI_ORDER_C
 56

	)

344 
	#MPI_ORDER_FORTRAN
 57

	)

345 
	#MPI_DISTRIBUTE_BLOCK
 121

	)

346 
	#MPI_DISTRIBUTE_CYCLIC
 122

	)

347 
	#MPI_DISTRIBUTE_NONE
 123

	)

348 
	#MPI_DISTRIBUTE_DFLT_DARG
 -49767

	)

350 
	#MPI_IN_PLACE
 (*Ë-1

	)

353 
	#MPI_MODE_NOCHECK
 1024

	)

354 
	#MPI_MODE_NOSTORE
 2048

	)

355 
	#MPI_MODE_NOPUT
 4096

	)

356 
	#MPI_MODE_NOPRECEDE
 8192

	)

357 
	#MPI_MODE_NOSUCCEED
 16384

	)

360 
	tMPI_Aöt
;

361 
	tMPI_Föt
;

365 
	#MPI_AINT_FMT_DEC_SPEC
 "%d"

	)

366 
	#MPI_AINT_FMT_HEX_SPEC
 "%x"

	)

369 
	#HAVE_MPI_OFFSET


	)

373 
	tMPI_Off£t
;

376 
	sMPI_Sètus
 {

377 
cou¡
;

378 
ˇn˚Œed
;

379 
MPI_SOURCE
;

380 
MPI_TAG
;

381 
MPI_ERROR
;

383 } 
	tMPI_Sètus
;

388 
	#MPI_Comm_c2f
(
comm
Ë(
MPI_Föt
)(comm)

	)

389 
	#MPI_Comm_f2c
(
comm
Ë(
MPI_Comm
)(comm)

	)

390 
	#MPI_Ty≥_c2f
(
d©©y≥
Ë(
MPI_Föt
)(d©©y≥)

	)

391 
	#MPI_Ty≥_f2c
(
d©©y≥
Ë(
MPI_D©©y≥
)(d©©y≥)

	)

392 
	#MPI_Group_c2f
(
group
Ë(
MPI_Föt
)(group)

	)

393 
	#MPI_Group_f2c
(
group
Ë(
MPI_Group
)(group)

	)

394 
	#MPI_Info_c2f
(
öfo
Ë(
MPI_Föt
)(öfo)

	)

395 
	#MPI_Info_f2c
(
öfo
Ë(
MPI_Info
)(öfo)

	)

396 
	#MPI_Reque°_f2c
(
ªque°
Ë(
MPI_Reque°
)‘eque°)

	)

397 
	#MPI_Reque°_c2f
(
ªque°
Ë(
MPI_Föt
)‘eque°)

	)

398 
	#MPI_Op_c2f
(
›
Ë(
MPI_Föt
)(›)

	)

399 
	#MPI_Op_f2c
(
›
Ë(
MPI_Op
)(›)

	)

400 
	#MPI_Eºh™dÀr_c2f
(
îrh™dÀr
Ë(
MPI_Föt
)”ºh™dÀr)

	)

401 
	#MPI_Eºh™dÀr_f2c
(
îrh™dÀr
Ë(
MPI_Eºh™dÀr
)”ºh™dÀr)

	)

402 
	#MPI_Wö_c2f
(
wö
Ë(
MPI_Föt
)(wö)

	)

403 
	#MPI_Wö_f2c
(
wö
Ë(
MPI_Wö
)(wö)

	)

406 
	#PMPI_Comm_c2f
(
comm
Ë(
MPI_Föt
)(comm)

	)

407 
	#PMPI_Comm_f2c
(
comm
Ë(
MPI_Comm
)(comm)

	)

408 
	#PMPI_Ty≥_c2f
(
d©©y≥
Ë(
MPI_Föt
)(d©©y≥)

	)

409 
	#PMPI_Ty≥_f2c
(
d©©y≥
Ë(
MPI_D©©y≥
)(d©©y≥)

	)

410 
	#PMPI_Group_c2f
(
group
Ë(
MPI_Föt
)(group)

	)

411 
	#PMPI_Group_f2c
(
group
Ë(
MPI_Group
)(group)

	)

412 
	#PMPI_Info_c2f
(
öfo
Ë(
MPI_Föt
)(öfo)

	)

413 
	#PMPI_Info_f2c
(
öfo
Ë(
MPI_Info
)(öfo)

	)

414 
	#PMPI_Reque°_f2c
(
ªque°
Ë(
MPI_Reque°
)‘eque°)

	)

415 
	#PMPI_Reque°_c2f
(
ªque°
Ë(
MPI_Föt
)‘eque°)

	)

416 
	#PMPI_Op_c2f
(
›
Ë(
MPI_Föt
)(›)

	)

417 
	#PMPI_Op_f2c
(
›
Ë(
MPI_Op
)(›)

	)

418 
	#PMPI_Eºh™dÀr_c2f
(
îrh™dÀr
Ë(
MPI_Föt
)”ºh™dÀr)

	)

419 
	#PMPI_Eºh™dÀr_f2c
(
îrh™dÀr
Ë(
MPI_Eºh™dÀr
)”ºh™dÀr)

	)

420 
	#PMPI_Wö_c2f
(
wö
Ë(
MPI_Föt
)(wö)

	)

421 
	#PMPI_Wö_f2c
(
wö
Ë(
MPI_Wö
)(wö)

	)

423 
	#MPI_STATUS_IGNORE
 (
MPI_Sètus
 *)1

	)

424 
	#MPI_STATUSES_IGNORE
 (
MPI_Sètus
 *)1

	)

425 
	#MPI_ERRCODES_IGNORE
 (*)0

	)

428 
	#MPIU_DLL_SPEC


	)

429 
MPIU_DLL_SPEC
 
MPI_Föt
 * 
MPI_F_STATUS_IGNORE
;

430 
MPIU_DLL_SPEC
 
MPI_Föt
 * 
MPI_F_STATUSES_IGNORE
;

438 
	#MPI_ARGV_NULL
 (**)0

	)

439 
	#MPI_ARGVS_NULL
 (***)0

	)

442 
	#MPI_THREAD_SINGLE
 0

	)

443 
	#MPI_THREAD_FUNNELED
 1

	)

444 
	#MPI_THREAD_SERIALIZED
 2

	)

445 
	#MPI_THREAD_MULTIPLE
 3

	)

448 (
	gMPI_Gªque°_ˇn˚l_fun˘i⁄
)(*, );

449 (
	gMPI_Gªque°_‰ì_fun˘i⁄
)(*);

450 (
	gMPI_Gªque°_quîy_fun˘i⁄
)(*, 
	tMPI_Sètus
 *);

453 
	#MPI_SUCCESS
 0

	)

455 
	#MPI_ERR_BUFFER
 1

	)

456 
	#MPI_ERR_COUNT
 2

	)

457 
	#MPI_ERR_TYPE
 3

	)

458 
	#MPI_ERR_TAG
 4

	)

459 
	#MPI_ERR_COMM
 5

	)

460 
	#MPI_ERR_RANK
 6

	)

461 
	#MPI_ERR_ROOT
 7

	)

462 
	#MPI_ERR_TRUNCATE
 14

	)

465 
	#MPI_ERR_GROUP
 8

	)

466 
	#MPI_ERR_OP
 9

	)

467 
	#MPI_ERR_REQUEST
 19

	)

470 
	#MPI_ERR_TOPOLOGY
 10

	)

471 
	#MPI_ERR_DIMS
 11

	)

474 
	#MPI_ERR_ARG
 12

	)

477 
	#MPI_ERR_OTHER
 15

	)

479 
	#MPI_ERR_UNKNOWN
 13

	)

480 
	#MPI_ERR_INTERN
 16

	)

483 
	#MPI_ERR_IN_STATUS
 17

	)

484 
	#MPI_ERR_PENDING
 18

	)

487 
	#MPI_ERR_FILE
 27

	)

488 
	#MPI_ERR_ACCESS
 20

	)

489 
	#MPI_ERR_AMODE
 21

	)

490 
	#MPI_ERR_BAD_FILE
 22

	)

491 
	#MPI_ERR_FILE_EXISTS
 25

	)

492 
	#MPI_ERR_FILE_IN_USE
 26

	)

493 
	#MPI_ERR_NO_SPACE
 36

	)

494 
	#MPI_ERR_NO_SUCH_FILE
 37

	)

495 
	#MPI_ERR_IO
 32

	)

496 
	#MPI_ERR_READ_ONLY
 40

	)

497 
	#MPI_ERR_CONVERSION
 23

	)

498 
	#MPI_ERR_DUP_DATAREP
 24

	)

499 
	#MPI_ERR_UNSUPPORTED_DATAREP
 43

	)

503 
	#MPI_ERR_INFO
 28

	)

504 
	#MPI_ERR_INFO_KEY
 29

	)

505 
	#MPI_ERR_INFO_VALUE
 30

	)

506 
	#MPI_ERR_INFO_NOKEY
 31

	)

508 
	#MPI_ERR_NAME
 33

	)

509 
	#MPI_ERR_NO_MEM
 34

	)

510 
	#MPI_ERR_NOT_SAME
 35

	)

511 
	#MPI_ERR_PORT
 38

	)

512 
	#MPI_ERR_QUOTA
 39

	)

513 
	#MPI_ERR_SERVICE
 41

	)

514 
	#MPI_ERR_SPAWN
 42

	)

515 
	#MPI_ERR_UNSUPPORTED_OPERATION
 44

	)

516 
	#MPI_ERR_WIN
 45

	)

518 
	#MPI_ERR_BASE
 46

	)

519 
	#MPI_ERR_LOCKTYPE
 47

	)

520 
	#MPI_ERR_KEYVAL
 48

	)

521 
	#MPI_ERR_RMA_CONFLICT
 49

	)

522 
	#MPI_ERR_RMA_SYNC
 50

	)

523 
	#MPI_ERR_SIZE
 51

	)

524 
	#MPI_ERR_DISP
 52

	)

525 
	#MPI_ERR_ASSERT
 53

	)

527 
	#MPI_ERR_LASTCODE
 0x3ffffff‡

	)

529 
	#MPICH_ERR_LAST_CLASS
 53

	)

534 (
	gMPI_D©¨ï_c⁄vîsi⁄_fun˘i⁄
)(*, 
	tMPI_D©©y≥
, ,

535 *, 
	tMPI_Off£t
, *);

536 (
	gMPI_D©¨ï_exã¡_fun˘i⁄
)(
	tMPI_D©©y≥
 
	td©©y≥
, 
	tMPI_Aöt
 *,

538 
	#MPI_CONVERSION_FN_NULL
 ((
MPI_D©¨ï_c⁄vîsi⁄_fun˘i⁄
 *)0)

	)

554 #i‚de‡
MPICH_SUPPRESS_PROTOTYPES


557 
MPI_Síd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

558 
MPI_Recv
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Sètus
 *);

559 
MPI_Gë_cou¡
(
MPI_Sètus
 *, 
MPI_D©©y≥
, *);

560 
MPI_B£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

561 
MPI_S£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

562 
MPI_R£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

563 
MPI_Buf„r_©èch
( *, );

564 
MPI_Buf„r_dëach
( *, *);

565 
MPI_I£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

566 
MPI_Ib£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

567 
MPI_Is£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

568 
MPI_Ir£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

569 
MPI_Iªcv
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

570 
MPI_Waô
(
MPI_Reque°
 *, 
MPI_Sètus
 *);

571 
MPI_Te°
(
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

572 
MPI_Reque°_‰ì
(
MPI_Reque°
 *);

573 
MPI_Waô™y
(, 
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

574 
MPI_Te°™y
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

575 
MPI_WaôÆl
(, 
MPI_Reque°
 *, 
MPI_Sètus
 *);

576 
MPI_Te°Æl
(, 
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

577 
MPI_Waôsome
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

578 
MPI_Te°some
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

579 
MPI_I¥obe
(, , 
MPI_Comm
, *, 
MPI_Sètus
 *);

580 
MPI_Probe
(, , 
MPI_Comm
, 
MPI_Sètus
 *);

581 
MPI_C™˚l
(
MPI_Reque°
 *);

582 
MPI_Te°_ˇn˚Œed
(
MPI_Sètus
 *, *);

583 
MPI_Síd_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

584 
MPI_B£nd_öô
(*, , 
MPI_D©©y≥
, ,, 
MPI_Comm
, 
MPI_Reque°
 *);

585 
MPI_S£nd_öô
(*, , 
MPI_D©©y≥
, ,, 
MPI_Comm
, 
MPI_Reque°
 *);

586 
MPI_R£nd_öô
(*, , 
MPI_D©©y≥
, ,, 
MPI_Comm
, 
MPI_Reque°
 *);

587 
MPI_Recv_öô
(*, , 
MPI_D©©y≥
, ,, 
MPI_Comm
, 
MPI_Reque°
 *);

588 
MPI_Sèπ
(
MPI_Reque°
 *);

589 
MPI_SèπÆl
(, 
MPI_Reque°
 *);

590 
MPI_Sídªcv
(*, , 
MPI_D©©y≥
,, , *, , MPI_D©©y≥, , , 
MPI_Comm
, 
MPI_Sètus
 *);

591 
MPI_Sídªcv_ª∂a˚
(*, , 
MPI_D©©y≥
, , , , , 
MPI_Comm
, 
MPI_Sètus
 *);

592 
MPI_Ty≥_c⁄tiguous
(, 
MPI_D©©y≥
, MPI_Datatype *);

593 
MPI_Ty≥_ve˘‹
(, , , 
MPI_D©©y≥
, MPI_Datatype *);

594 
MPI_Ty≥_hve˘‹
(, , 
MPI_Aöt
, 
MPI_D©©y≥
, MPI_Datatype *);

595 
MPI_Ty≥_ödexed
(, *, *, 
MPI_D©©y≥
, MPI_Datatype *);

596 
MPI_Ty≥_hödexed
(, *, 
MPI_Aöt
 *, 
MPI_D©©y≥
, MPI_Datatype *);

597 
MPI_Ty≥_°ru˘
(, *, 
MPI_Aöt
 *, 
MPI_D©©y≥
 *, MPI_Datatype *);

598 
MPI_Addªss
(*, 
MPI_Aöt
 *);

600 
MPI_Ty≥_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

604 
MPI_Ty≥_size
(
MPI_D©©y≥
, *);

606 
MPI_Ty≥_lb
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

607 
MPI_Ty≥_ub
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

608 
MPI_Ty≥_commô
(
MPI_D©©y≥
 *);

609 
MPI_Ty≥_‰ì
(
MPI_D©©y≥
 *);

610 
MPI_Gë_ñemíts
(
MPI_Sètus
 *, 
MPI_D©©y≥
, *);

611 
MPI_Pack
(*, , 
MPI_D©©y≥
, *, , *, 
MPI_Comm
);

612 
MPI_U≈ack
(*, , *, *, , 
MPI_D©©y≥
, 
MPI_Comm
);

613 
MPI_Pack_size
(, 
MPI_D©©y≥
, 
MPI_Comm
, *);

614 
MPI_B¨rõr
(
MPI_Comm
 );

615 
MPI_Bˇ°
(*, , 
MPI_D©©y≥
, , 
MPI_Comm
 );

616 
MPI_G©hî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

617 
MPI_G©hîv
(* , , 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, , 
MPI_Comm
);

618 
MPI_Sˇâî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

619 
MPI_Sˇâîv
(* , *, *, 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

620 
MPI_AŒg©hî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, 
MPI_Comm
);

621 
MPI_AŒg©hîv
(* , , 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, 
MPI_Comm
);

622 
MPI_AŒtﬂŒ
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, 
MPI_Comm
);

623 
MPI_AŒtﬂŒv
(* , *, *, 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, 
MPI_Comm
);

624 
MPI_Redu˚
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, , 
MPI_Comm
);

625 
MPI_Op_¸óã
(
MPI_U£r_fun˘i⁄
 *, , 
MPI_Op
 *);

626 
MPI_Op_‰ì
–
MPI_Op
 *);

627 
MPI_AŒªdu˚
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
);

628 
MPI_Redu˚_sˇâî
(* , *, *, 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
);

629 
MPI_Sˇn
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
 );

630 
MPI_Group_size
(
MPI_Group
, *);

631 
MPI_Group_ønk
(
MPI_Group
, *);

632 
MPI_Group_å™¶©e_ønks
 (
MPI_Group
, , *, MPI_Group, *);

633 
MPI_Group_com∑ª
(
MPI_Group
, MPI_Group, *);

634 
MPI_Comm_group
(
MPI_Comm
, 
MPI_Group
 *);

635 
MPI_Group_uni⁄
(
MPI_Group
, MPI_Group, MPI_Group *);

636 
MPI_Group_öãr£˘i⁄
(
MPI_Group
, MPI_Group, MPI_Group *);

637 
MPI_Group_dif„ªn˚
(
MPI_Group
, MPI_Group, MPI_Group *);

638 
MPI_Group_ö˛
(
MPI_Group
, , *, MPI_Group *);

639 
MPI_Group_ex˛
(
MPI_Group
, , *, MPI_Group *);

640 
MPI_Group_ønge_ö˛
(
MPI_Group
, , [][3], MPI_Group *);

641 
MPI_Group_ønge_ex˛
(
MPI_Group
, , [][3], MPI_Group *);

642 
MPI_Group_‰ì
(
MPI_Group
 *);

643 
MPI_Comm_size
(
MPI_Comm
, *);

644 
MPI_Comm_ønk
(
MPI_Comm
, *);

645 
MPI_Comm_com∑ª
(
MPI_Comm
, MPI_Comm, *);

646 
MPI_Comm_dup
(
MPI_Comm
, MPI_Comm *);

647 
MPI_Comm_¸óã
(
MPI_Comm
, 
MPI_Group
, MPI_Comm *);

648 
MPI_Comm_•lô
(
MPI_Comm
, , , MPI_Comm *);

649 
MPI_Comm_‰ì
(
MPI_Comm
 *);

650 
MPI_Comm_ã°_öãr
(
MPI_Comm
, *);

651 
MPI_Comm_ªmŸe_size
(
MPI_Comm
, *);

652 
MPI_Comm_ªmŸe_group
(
MPI_Comm
, 
MPI_Group
 *);

653 
MPI_I¡îcomm_¸óã
(
MPI_Comm
, , MPI_Comm, , , MPI_Comm * );

654 
MPI_I¡îcomm_mîge
(
MPI_Comm
, , MPI_Comm *);

655 
MPI_KeyvÆ_¸óã
(
MPI_C›y_fun˘i⁄
 *, 
MPI_Dñëe_fun˘i⁄
 *, *, *);

656 
MPI_KeyvÆ_‰ì
(*);

657 
MPI_Aâr_put
(
MPI_Comm
, , *);

658 
MPI_Aâr_gë
(
MPI_Comm
, , *, *);

659 
MPI_Aâr_dñëe
(
MPI_Comm
, );

660 
MPI_T›o_ã°
(
MPI_Comm
, *);

661 
MPI_C¨t_¸óã
(
MPI_Comm
, , *, *, , MPI_Comm *);

662 
MPI_Dims_¸óã
(, , *);

663 
MPI_Gøph_¸óã
(
MPI_Comm
, , *, *, , MPI_Comm *);

664 
MPI_Gøphdims_gë
(
MPI_Comm
, *, *);

665 
MPI_Gøph_gë
(
MPI_Comm
, , , *, *);

666 
MPI_C¨tdim_gë
(
MPI_Comm
, *);

667 
MPI_C¨t_gë
(
MPI_Comm
, , *, *, *);

668 
MPI_C¨t_ønk
(
MPI_Comm
, *, *);

669 
MPI_C¨t_co‹ds
(
MPI_Comm
, , , *);

670 
MPI_Gøph_√ighb‹s_cou¡
(
MPI_Comm
, , *);

671 
MPI_Gøph_√ighb‹s
(
MPI_Comm
, , , *);

672 
MPI_C¨t_shi·
(
MPI_Comm
, , , *, *);

673 
MPI_C¨t_sub
(
MPI_Comm
, *, MPI_Comm *);

674 
MPI_C¨t_m≠
(
MPI_Comm
, , *, *, *);

675 
MPI_Gøph_m≠
(
MPI_Comm
, , *, *, *);

676 
MPI_Gë_¥o˚ss‹_«me
(*, *);

677 
MPI_Gë_vîsi⁄
(*, *);

678 
MPI_Eºh™dÀr_¸óã
(
MPI_H™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

679 
MPI_Eºh™dÀr_£t
(
MPI_Comm
, 
MPI_Eºh™dÀr
);

680 
MPI_Eºh™dÀr_gë
(
MPI_Comm
, 
MPI_Eºh™dÀr
 *);

681 
MPI_Eºh™dÀr_‰ì
(
MPI_Eºh™dÀr
 *);

682 
MPI_Eº‹_°rög
(, *, *);

683 
MPI_Eº‹_˛ass
(, *);

684 
MPI_Wtime
();

685 
MPI_Wtick
();

686 #i‚de‡
MPI_Wtime


687 
PMPI_Wtime
();

688 
PMPI_Wtick
();

690 
MPI_Inô
(*, ***);

691 
MPI_FöÆize
();

692 
MPI_Inôülized
(*);

693 
MPI_Ab‹t
(
MPI_Comm
, );

698 
MPI_Pc⁄åﬁ
(const , ...);

700 
MPI_DUP_FN
 ( 
MPI_Comm
, , *, *, *, * );

706 
MPI_Clo£_p‹t
(*);

707 
MPI_Comm_ac˚±
(*, 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *);

708 
MPI_Comm_c⁄√˘
(*, 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *);

709 
MPI_Comm_disc⁄√˘
(
MPI_Comm
 *);

710 
MPI_Comm_gë_∑ª¡
(
MPI_Comm
 *);

711 
MPI_Comm_joö
(, 
MPI_Comm
 *);

712 
MPI_Comm_•awn
(*, *[], , 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *,

714 
MPI_Comm_•awn_mu…ùÀ
(, *[], **[], [], 
MPI_Info
 [], ,

715 
MPI_Comm
, MPI_Comm *, []);

716 
MPI_Lookup_«me
(*, 
MPI_Info
, *);

717 
MPI_O≥n_p‹t
(
MPI_Info
, *);

718 
MPI_Publish_«me
(*, 
MPI_Info
, *);

719 
MPI_U≈ublish_«me
(*, 
MPI_Info
, *);

722 
MPI_Accumuœã
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, ,

723 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Wö
);

724 
MPI_Gë
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, , MPI_Datatype,

725 
MPI_Wö
);

726 
MPI_Put
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, , MPI_Datatype,

727 
MPI_Wö
);

728 
MPI_Wö_com∂ëe
(
MPI_Wö
);

729 
MPI_Wö_¸óã
(*, 
MPI_Aöt
, , 
MPI_Info
, 
MPI_Comm
, 
MPI_Wö
 *);

730 
MPI_Wö_„n˚
(, 
MPI_Wö
);

731 
MPI_Wö_‰ì
(
MPI_Wö
 *);

732 
MPI_Wö_gë_group
(
MPI_Wö
, 
MPI_Group
 *);

733 
MPI_Wö_lock
(, , , 
MPI_Wö
);

734 
MPI_Wö_po°
(
MPI_Group
, , 
MPI_Wö
);

735 
MPI_Wö_°¨t
(
MPI_Group
, , 
MPI_Wö
);

736 
MPI_Wö_ã°
(
MPI_Wö
, *);

737 
MPI_Wö_u∆ock
(, 
MPI_Wö
);

738 
MPI_Wö_waô
(
MPI_Wö
);

741 
MPI_AŒtﬂŒw
(*, [], [], 
MPI_D©©y≥
 [], *, [],

742 [], 
MPI_D©©y≥
 [], 
MPI_Comm
);

743 
MPI_Exsˇn
(*, *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
) ;

746 
MPI_Add_îr‹_˛ass
(*);

747 
MPI_Add_îr‹_code
(, *);

748 
MPI_Add_îr‹_°rög
(, *);

749 
MPI_Comm_ˇŒ_îrh™dÀr
(
MPI_Comm
, );

750 
MPI_Comm_¸óã_keyvÆ
(
MPI_Comm_c›y_©å_fun˘i⁄
 *,

751 
MPI_Comm_dñëe_©å_fun˘i⁄
 *, *, *);

752 
MPI_Comm_dñëe_©å
(
MPI_Comm
, );

753 
MPI_Comm_‰ì_keyvÆ
(*);

754 
MPI_Comm_gë_©å
(
MPI_Comm
, , *, *);

755 
MPI_Comm_gë_«me
(
MPI_Comm
, *, *);

756 
MPI_Comm_£t_©å
(
MPI_Comm
, , *);

757 
MPI_Comm_£t_«me
(
MPI_Comm
, *);

758 
MPI_Fûe_ˇŒ_îrh™dÀr
(
MPI_Fûe
, );

759 
MPI_Gªque°_com∂ëe
(
MPI_Reque°
);

760 
MPI_Gªque°_°¨t
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

761 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

762 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *, *, 
MPI_Reque°
 *);

763 
MPI_Inô_thªad
(*, ***, , *);

764 
MPI_Is_thªad_maö
(*);

765 
MPI_Quîy_thªad
(*);

766 
MPI_Sètus_£t_ˇn˚Œed
(
MPI_Sètus
 *, );

767 
MPI_Sètus_£t_ñemíts
(
MPI_Sètus
 *, 
MPI_D©©y≥
, );

768 
MPI_Ty≥_¸óã_keyvÆ
(
MPI_Ty≥_c›y_©å_fun˘i⁄
 *,

769 
MPI_Ty≥_dñëe_©å_fun˘i⁄
 *, *, *);

770 
MPI_Ty≥_dñëe_©å
(
MPI_D©©y≥
, );

771 
MPI_Ty≥_dup
(
MPI_D©©y≥
, MPI_Datatype *);

772 
MPI_Ty≥_‰ì_keyvÆ
(*);

773 
MPI_Ty≥_gë_©å
(
MPI_D©©y≥
, , *, *);

774 
MPI_Ty≥_gë_c⁄ã¡s
(
MPI_D©©y≥
, , , , [], 
MPI_Aöt
 [],

775 
MPI_D©©y≥
 []);

776 
MPI_Ty≥_gë_ívñ›e
(
MPI_D©©y≥
, *, *, *, *);

777 
MPI_Ty≥_gë_«me
(
MPI_D©©y≥
, *, *);

778 
MPI_Ty≥_£t_©å
(
MPI_D©©y≥
, , *);

779 
MPI_Ty≥_£t_«me
(
MPI_D©©y≥
, *);

780 
MPI_Ty≥_m©ch_size
–, , 
MPI_D©©y≥
 *);

781 
MPI_Wö_ˇŒ_îrh™dÀr
(
MPI_Wö
, );

782 
MPI_Wö_¸óã_keyvÆ
(
MPI_Wö_c›y_©å_fun˘i⁄
 *,

783 
MPI_Wö_dñëe_©å_fun˘i⁄
 *, *, *);

784 
MPI_Wö_dñëe_©å
(
MPI_Wö
, );

785 
MPI_Wö_‰ì_keyvÆ
(*);

786 
MPI_Wö_gë_©å
(
MPI_Wö
, , *, *);

787 
MPI_Wö_gë_«me
(
MPI_Wö
, *, *);

788 
MPI_Wö_£t_©å
(
MPI_Wö
, , *);

789 
MPI_Wö_£t_«me
(
MPI_Wö
, *);

792 #ifde‡
FOO


793 
MPI_Comm
 
MPI_Comm_f2c
(
MPI_Föt
);

794 
MPI_D©©y≥
 
MPI_Ty≥_f2c
(
MPI_Föt
);

795 
MPI_Fûe
 
MPI_Fûe_f2c
(
MPI_Föt
);

796 
MPI_Föt
 
MPI_Comm_c2f
(
MPI_Comm
);

797 
MPI_Föt
 
MPI_Fûe_c2f
(
MPI_Fûe
);

798 
MPI_Föt
 
MPI_Group_c2f
(
MPI_Group
);

799 
MPI_Föt
 
MPI_Info_c2f
(
MPI_Info
);

800 
MPI_Föt
 
MPI_Op_c2f
(
MPI_Op
);

801 
MPI_Föt
 
MPI_Reque°_c2f
(
MPI_Reque°
);

802 
MPI_Föt
 
MPI_Ty≥_c2f
(
MPI_D©©y≥
);

803 
MPI_Föt
 
MPI_Wö_c2f
(
MPI_Wö
);

804 
MPI_Group
 
MPI_Group_f2c
(
MPI_Föt
);

805 
MPI_Info
 
MPI_Info_f2c
(
MPI_Föt
);

806 
MPI_Op
 
MPI_Op_f2c
(
MPI_Föt
);

807 
MPI_Reque°
 
MPI_Reque°_f2c
(
MPI_Föt
);

808 
MPI_Wö
 
MPI_Wö_f2c
(
MPI_Föt
);

811 
MPI_AŒoc_mem
(
MPI_Aöt
, 
MPI_Info
 
öfo
, *
ba£±r
);

812 
MPI_Comm_¸óã_îrh™dÀr
(
MPI_Comm_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

813 
MPI_Comm_gë_îrh™dÀr
(
MPI_Comm
, 
MPI_Eºh™dÀr
 *);

814 
MPI_Comm_£t_îrh™dÀr
(
MPI_Comm
, 
MPI_Eºh™dÀr
);

815 
MPI_Fûe_¸óã_îrh™dÀr
(
MPI_Fûe_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

816 
MPI_Fûe_gë_îrh™dÀr
(
MPI_Fûe
, 
MPI_Eºh™dÀr
 *);

817 
MPI_Fûe_£t_îrh™dÀr
(
MPI_Fûe
, 
MPI_Eºh™dÀr
);

818 
MPI_FöÆized
(*);

819 
MPI_Fªe_mem
(*);

820 
MPI_Gë_addªss
(*, 
MPI_Aöt
 *);

821 
MPI_Info_¸óã
(
MPI_Info
 *);

822 
MPI_Info_dñëe
(
MPI_Info
, *);

823 
MPI_Info_dup
(
MPI_Info
, MPI_Info *);

824 
MPI_Info_‰ì
(
MPI_Info
 *
öfo
);

825 
MPI_Info_gë
(
MPI_Info
, *, , *, *);

826 
MPI_Info_gë_nkeys
(
MPI_Info
, *);

827 
MPI_Info_gë_¡hkey
(
MPI_Info
, , *);

828 
MPI_Info_gë_vÆuñí
(
MPI_Info
, *, *, *);

829 
MPI_Info_£t
(
MPI_Info
, *, *);

830 
MPI_Pack_exã∫Æ
(*, *, , 
MPI_D©©y≥
, *, 
MPI_Aöt
,

831 
MPI_Aöt
 *);

832 
MPI_Pack_exã∫Æ_size
(*, , 
MPI_D©©y≥
, 
MPI_Aöt
 *);

833 
MPI_Reque°_gë_°©us
(
MPI_Reque°
, *, 
MPI_Sètus
 *);

834 
MPI_Sètus_c2f
(
MPI_Sètus
 *, 
MPI_Föt
 *);

835 
MPI_Sètus_f2c
(
MPI_Föt
 *, 
MPI_Sètus
 *);

836 
MPI_Ty≥_¸óã_d¨øy
(, , , [], [], [], [], ,

837 
MPI_D©©y≥
, MPI_Datatype *);

838 
MPI_Ty≥_¸óã_hödexed
(, [], 
MPI_Aöt
 [], 
MPI_D©©y≥
,

839 
MPI_D©©y≥
 *);

840 
MPI_Ty≥_¸óã_hve˘‹
(, , 
MPI_Aöt
, 
MPI_D©©y≥
, MPI_Datatype *);

841 
MPI_Ty≥_¸óã_ödexed_block
(, , [], 
MPI_D©©y≥
,

842 
MPI_D©©y≥
 *);

843 
MPI_Ty≥_¸óã_ªsized
(
MPI_D©©y≥
, 
MPI_Aöt
, MPI_Aint, MPI_Datatype *);

844 
MPI_Ty≥_¸óã_°ru˘
(, [], 
MPI_Aöt
 [], 
MPI_D©©y≥
 [],

845 
MPI_D©©y≥
 *);

846 
MPI_Ty≥_¸óã_sub¨øy
(, [], [], [], , 
MPI_D©©y≥
,

847 
MPI_D©©y≥
 *);

848 
MPI_Ty≥_gë_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *, MPI_Aint *);

849 
MPI_Ty≥_gë_åue_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *, MPI_Aint *);

850 
MPI_U≈ack_exã∫Æ
(*, *, 
MPI_Aöt
, MPI_Aint *, *, ,

851 
MPI_D©©y≥
);

852 
MPI_Wö_¸óã_îrh™dÀr
(
MPI_Wö_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

853 
MPI_Wö_gë_îrh™dÀr
(
MPI_Wö
, 
MPI_Eºh™dÀr
 *);

854 
MPI_Wö_£t_îrh™dÀr
(
MPI_Wö
, 
MPI_Eºh™dÀr
);

859 
MPI_Ty≥_¸óã_f90_öãgî
–, 
MPI_D©©y≥
 * );

860 
MPI_Ty≥_¸óã_f90_ªÆ
–, , 
MPI_D©©y≥
 * );

861 
MPI_Ty≥_¸óã_f90_com∂ex
–, , 
MPI_D©©y≥
 * );

864 
MPI_Redu˚_loˇl
(*
öbuf
, *
öoutbuf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
);

865 
MPI_Op_commuètive
(
MPI_Op
 
›
, *
commuã
);

866 
MPI_Redu˚_sˇâî_block
(*
£ndbuf
, *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
);

867 
MPI_Di°_gøph_¸óã_adja˚¡
(
MPI_Comm
 
comm_ﬁd
, 
ödegªe
, [], [], 
outdegªe
, [], [], 
MPI_Info
 
öfo
, 
ª‹dî
, MPI_Comm *
comm_di°_gøph
);

868 
MPI_Di°_gøph_¸óã
(
MPI_Comm
 
comm_ﬁd
, 
n
, [], [], [], [], 
MPI_Info
 
öfo
, 
ª‹dî
, MPI_Comm *
comm_di°_gøph
);

869 
MPI_Di°_gøph_√ighb‹s_cou¡
(
MPI_Comm
 
comm
, *
ödegªe
, *
outdegªe
, *
weighãd
);

870 
MPI_Di°_gøph_√ighb‹s
(
MPI_Comm
 
comm
, 
maxödegªe
, [], [], 
maxoutdegªe
, [], []);

878 #i‡!
deföed
(
MPI_BUILD_PROFILING
)

879 
PMPI_Síd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

880 
PMPI_Recv
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Sètus
 *);

881 
PMPI_Gë_cou¡
(
MPI_Sètus
 *, 
MPI_D©©y≥
, *);

882 
PMPI_B£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

883 
PMPI_S£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

884 
PMPI_R£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
);

885 
PMPI_Buf„r_©èch
–* 
buf„r
, );

886 
PMPI_Buf„r_dëach
–* 
buf„r
, *);

887 
PMPI_I£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

888 
PMPI_Ib£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

889 
PMPI_Is£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

890 
PMPI_Ir£nd
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

891 
PMPI_Iªcv
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

892 
PMPI_Waô
(
MPI_Reque°
 *, 
MPI_Sètus
 *);

893 
PMPI_Te°
(
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

894 
PMPI_Reque°_‰ì
(
MPI_Reque°
 *);

895 
PMPI_Waô™y
(, 
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

896 
PMPI_Te°™y
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

897 
PMPI_WaôÆl
(, 
MPI_Reque°
 *, 
MPI_Sètus
 *);

898 
PMPI_Te°Æl
(, 
MPI_Reque°
 *, *, 
MPI_Sètus
 *);

899 
PMPI_Waôsome
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

900 
PMPI_Te°some
(, 
MPI_Reque°
 *, *, *, 
MPI_Sètus
 *);

901 
PMPI_I¥obe
(, , 
MPI_Comm
, *, 
MPI_Sètus
 *);

902 
PMPI_Probe
(, , 
MPI_Comm
, 
MPI_Sètus
 *);

903 
PMPI_C™˚l
(
MPI_Reque°
 *);

904 
PMPI_Te°_ˇn˚Œed
(
MPI_Sètus
 *, *);

905 
PMPI_Síd_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

906 
PMPI_B£nd_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

907 
PMPI_S£nd_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

908 
PMPI_R£nd_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

909 
PMPI_Recv_öô
(*, , 
MPI_D©©y≥
, , , 
MPI_Comm
, 
MPI_Reque°
 *);

910 
PMPI_Sèπ
(
MPI_Reque°
 *);

911 
PMPI_SèπÆl
(, 
MPI_Reque°
 *);

912 
PMPI_Sídªcv
(*, , 
MPI_D©©y≥
, , , *, , MPI_D©©y≥, , , 
MPI_Comm
, 
MPI_Sètus
 *);

913 
PMPI_Sídªcv_ª∂a˚
(*, , 
MPI_D©©y≥
, , , , , 
MPI_Comm
, 
MPI_Sètus
 *);

914 
PMPI_Ty≥_c⁄tiguous
(, 
MPI_D©©y≥
, MPI_Datatype *);

915 
PMPI_Ty≥_ve˘‹
(, , , 
MPI_D©©y≥
, MPI_Datatype *);

916 
PMPI_Ty≥_hve˘‹
(, , 
MPI_Aöt
, 
MPI_D©©y≥
, MPI_Datatype *);

917 
PMPI_Ty≥_ödexed
(, *, *, 
MPI_D©©y≥
, MPI_Datatype *);

918 
PMPI_Ty≥_hödexed
(, *, 
MPI_Aöt
 *, 
MPI_D©©y≥
, MPI_Datatype *);

919 
PMPI_Ty≥_°ru˘
(, *, 
MPI_Aöt
 *, 
MPI_D©©y≥
 *, MPI_Datatype *);

920 
PMPI_Addªss
(*, 
MPI_Aöt
 *);

921 
PMPI_Ty≥_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

922 
PMPI_Ty≥_size
(
MPI_D©©y≥
, *);

923 
PMPI_Ty≥_lb
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

924 
PMPI_Ty≥_ub
(
MPI_D©©y≥
, 
MPI_Aöt
 *);

925 
PMPI_Ty≥_commô
(
MPI_D©©y≥
 *);

926 
PMPI_Ty≥_‰ì
(
MPI_D©©y≥
 *);

927 
PMPI_Gë_ñemíts
(
MPI_Sètus
 *, 
MPI_D©©y≥
, *);

928 
PMPI_Pack
(*, , 
MPI_D©©y≥
, *, , *, 
MPI_Comm
);

929 
PMPI_U≈ack
(*, , *, *, , 
MPI_D©©y≥
, 
MPI_Comm
);

930 
PMPI_Pack_size
(, 
MPI_D©©y≥
, 
MPI_Comm
, *);

931 
PMPI_B¨rõr
(
MPI_Comm
 );

932 
PMPI_Bˇ°
(* 
buf„r
, , 
MPI_D©©y≥
, , 
MPI_Comm
 );

933 
PMPI_G©hî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

934 
PMPI_G©hîv
(* , , 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, , 
MPI_Comm
);

935 
PMPI_Sˇâî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

936 
PMPI_Sˇâîv
(* , *, *
di•ls
, 
MPI_D©©y≥
, *, , MPI_D©©y≥, , 
MPI_Comm
);

937 
PMPI_AŒg©hî
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, 
MPI_Comm
);

938 
PMPI_AŒg©hîv
(* , , 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, 
MPI_Comm
);

939 
PMPI_AŒtﬂŒ
(* , , 
MPI_D©©y≥
, *, , MPI_D©©y≥, 
MPI_Comm
);

940 
PMPI_AŒtﬂŒv
(* , *, *, 
MPI_D©©y≥
, *, *, *, MPI_D©©y≥, 
MPI_Comm
);

941 
PMPI_Redu˚
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, , 
MPI_Comm
);

942 
PMPI_Op_¸óã
(
MPI_U£r_fun˘i⁄
 *, , 
MPI_Op
 *);

943 
PMPI_Op_‰ì
–
MPI_Op
 *);

944 
PMPI_AŒªdu˚
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
);

945 
PMPI_Redu˚_sˇâî
(* , *, *, 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
);

946 
PMPI_Sˇn
(* , *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
 );

947 
PMPI_Group_size
(
MPI_Group
, *);

948 
PMPI_Group_ønk
(
MPI_Group
, *);

949 
PMPI_Group_å™¶©e_ønks
 (
MPI_Group
, , *, MPI_Group, *);

950 
PMPI_Group_com∑ª
(
MPI_Group
, MPI_Group, *);

951 
PMPI_Comm_group
(
MPI_Comm
, 
MPI_Group
 *);

952 
PMPI_Group_uni⁄
(
MPI_Group
, MPI_Group, MPI_Group *);

953 
PMPI_Group_öãr£˘i⁄
(
MPI_Group
, MPI_Group, MPI_Group *);

954 
PMPI_Group_dif„ªn˚
(
MPI_Group
, MPI_Group, MPI_Group *);

955 
PMPI_Group_ö˛
(
MPI_Group
, , *, MPI_Group *);

956 
PMPI_Group_ex˛
(
MPI_Group
, , *, MPI_Group *);

957 
PMPI_Group_ønge_ö˛
(
MPI_Group
, , [][3], MPI_Group *);

958 
PMPI_Group_ønge_ex˛
(
MPI_Group
, , [][3], MPI_Group *);

959 
PMPI_Group_‰ì
(
MPI_Group
 *);

960 
PMPI_Comm_size
(
MPI_Comm
, *);

961 
PMPI_Comm_ønk
(
MPI_Comm
, *);

962 
PMPI_Comm_com∑ª
(
MPI_Comm
, MPI_Comm, *);

963 
PMPI_Comm_dup
(
MPI_Comm
, MPI_Comm *);

964 
PMPI_Comm_¸óã
(
MPI_Comm
, 
MPI_Group
, MPI_Comm *);

965 
PMPI_Comm_•lô
(
MPI_Comm
, , , MPI_Comm *);

966 
PMPI_Comm_‰ì
(
MPI_Comm
 *);

967 
PMPI_Comm_ã°_öãr
(
MPI_Comm
, *);

968 
PMPI_Comm_ªmŸe_size
(
MPI_Comm
, *);

969 
PMPI_Comm_ªmŸe_group
(
MPI_Comm
, 
MPI_Group
 *);

970 
PMPI_I¡îcomm_¸óã
(
MPI_Comm
, , MPI_Comm, , , MPI_Comm *);

971 
PMPI_I¡îcomm_mîge
(
MPI_Comm
, , MPI_Comm *);

972 
PMPI_KeyvÆ_¸óã
(
MPI_C›y_fun˘i⁄
 *, 
MPI_Dñëe_fun˘i⁄
 *, *, *);

973 
PMPI_KeyvÆ_‰ì
(*);

974 
PMPI_Aâr_put
(
MPI_Comm
, , *);

975 
PMPI_Aâr_gë
(
MPI_Comm
, , *, *);

976 
PMPI_Aâr_dñëe
(
MPI_Comm
, );

977 
PMPI_T›o_ã°
(
MPI_Comm
, *);

978 
PMPI_C¨t_¸óã
(
MPI_Comm
, , *, *, , MPI_Comm *);

979 
PMPI_Dims_¸óã
(, , *);

980 
PMPI_Gøph_¸óã
(
MPI_Comm
, , *, *, , MPI_Comm *);

981 
PMPI_Gøphdims_gë
(
MPI_Comm
, *, *);

982 
PMPI_Gøph_gë
(
MPI_Comm
, , , *, *);

983 
PMPI_C¨tdim_gë
(
MPI_Comm
, *);

984 
PMPI_C¨t_gë
(
MPI_Comm
, , *, *, *);

985 
PMPI_C¨t_ønk
(
MPI_Comm
, *, *);

986 
PMPI_C¨t_co‹ds
(
MPI_Comm
, , , *);

987 
PMPI_Gøph_√ighb‹s_cou¡
(
MPI_Comm
, , *);

988 
PMPI_Gøph_√ighb‹s
(
MPI_Comm
, , , *);

989 
PMPI_C¨t_shi·
(
MPI_Comm
, , , *, *);

990 
PMPI_C¨t_sub
(
MPI_Comm
, *, MPI_Comm *);

991 
PMPI_C¨t_m≠
(
MPI_Comm
, , *, *, *);

992 
PMPI_Gøph_m≠
(
MPI_Comm
, , *, *, *);

993 
PMPI_Gë_¥o˚ss‹_«me
(*, *);

994 
PMPI_Gë_vîsi⁄
(*, *);

995 
PMPI_Eºh™dÀr_¸óã
(
MPI_H™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

996 
PMPI_Eºh™dÀr_£t
(
MPI_Comm
, 
MPI_Eºh™dÀr
);

997 
PMPI_Eºh™dÀr_gë
(
MPI_Comm
, 
MPI_Eºh™dÀr
 *);

998 
PMPI_Eºh™dÀr_‰ì
(
MPI_Eºh™dÀr
 *);

999 
PMPI_Eº‹_°rög
(, *, *);

1000 
PMPI_Eº‹_˛ass
(, *);

1003 
PMPI_Inô
(*, ***);

1004 
PMPI_FöÆize
();

1005 
PMPI_Inôülized
(*);

1006 
PMPI_Ab‹t
(
MPI_Comm
, );

1008 
PMPI_Pc⁄åﬁ
(const , ...);

1013 
PMPI_Clo£_p‹t
(*);

1014 
PMPI_Comm_ac˚±
(*, 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *);

1015 
PMPI_Comm_c⁄√˘
(*, 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *);

1016 
PMPI_Comm_disc⁄√˘
(
MPI_Comm
 *);

1017 
PMPI_Comm_gë_∑ª¡
(
MPI_Comm
 *);

1018 
PMPI_Comm_joö
(, 
MPI_Comm
 *);

1019 
PMPI_Comm_•awn
(*, *[], , 
MPI_Info
, , 
MPI_Comm
, MPI_Comm *,

1021 
PMPI_Comm_•awn_mu…ùÀ
(, *[], **[], [], 
MPI_Info
 [], ,

1022 
MPI_Comm
, MPI_Comm *, []);

1023 
PMPI_Lookup_«me
(*, 
MPI_Info
, *);

1024 
PMPI_O≥n_p‹t
(
MPI_Info
, *);

1025 
PMPI_Publish_«me
(*, 
MPI_Info
, *);

1026 
PMPI_U≈ublish_«me
(*, 
MPI_Info
, *);

1029 
PMPI_Accumuœã
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, ,

1030 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Wö
);

1031 
PMPI_Gë
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, , MPI_Datatype,

1032 
MPI_Wö
);

1033 
PMPI_Put
(*, , 
MPI_D©©y≥
, , 
MPI_Aöt
, , MPI_Datatype,

1034 
MPI_Wö
);

1035 
PMPI_Wö_com∂ëe
(
MPI_Wö
);

1036 
PMPI_Wö_¸óã
(*, 
MPI_Aöt
, , 
MPI_Info
, 
MPI_Comm
, 
MPI_Wö
 *);

1037 
PMPI_Wö_„n˚
(, 
MPI_Wö
);

1038 
PMPI_Wö_‰ì
(
MPI_Wö
 *);

1039 
PMPI_Wö_gë_group
(
MPI_Wö
, 
MPI_Group
 *);

1040 
PMPI_Wö_lock
(, , , 
MPI_Wö
);

1041 
PMPI_Wö_po°
(
MPI_Group
, , 
MPI_Wö
);

1042 
PMPI_Wö_°¨t
(
MPI_Group
, , 
MPI_Wö
);

1043 
PMPI_Wö_ã°
(
MPI_Wö
, *);

1044 
PMPI_Wö_u∆ock
(, 
MPI_Wö
);

1045 
PMPI_Wö_waô
(
MPI_Wö
);

1048 
PMPI_AŒtﬂŒw
(*, [], [], 
MPI_D©©y≥
 [], *, [],

1049 [], 
MPI_D©©y≥
 [], 
MPI_Comm
);

1050 
PMPI_Exsˇn
(*, *, , 
MPI_D©©y≥
, 
MPI_Op
, 
MPI_Comm
) ;

1053 
PMPI_Add_îr‹_˛ass
(*);

1054 
PMPI_Add_îr‹_code
(, *);

1055 
PMPI_Add_îr‹_°rög
(, *);

1056 
PMPI_Comm_ˇŒ_îrh™dÀr
(
MPI_Comm
, );

1057 
PMPI_Comm_¸óã_keyvÆ
(
MPI_Comm_c›y_©å_fun˘i⁄
 *,

1058 
MPI_Comm_dñëe_©å_fun˘i⁄
 *, *, *);

1059 
PMPI_Comm_dñëe_©å
(
MPI_Comm
, );

1060 
PMPI_Comm_‰ì_keyvÆ
(*);

1061 
PMPI_Comm_gë_©å
(
MPI_Comm
, , *, *);

1062 
PMPI_Comm_gë_«me
(
MPI_Comm
, *, *);

1063 
PMPI_Comm_£t_©å
(
MPI_Comm
, , *);

1064 
PMPI_Comm_£t_«me
(
MPI_Comm
, *);

1065 
PMPI_Fûe_ˇŒ_îrh™dÀr
(
MPI_Fûe
, );

1066 
PMPI_Gªque°_com∂ëe
(
MPI_Reque°
);

1067 
PMPI_Gªque°_°¨t
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

1068 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

1069 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *, *, 
MPI_Reque°
 *);

1070 
PMPI_Inô_thªad
(*, ***, , *);

1071 
PMPI_Is_thªad_maö
(*);

1072 
PMPI_Quîy_thªad
(*);

1073 
PMPI_Sètus_£t_ˇn˚Œed
(
MPI_Sètus
 *, );

1074 
PMPI_Sètus_£t_ñemíts
(
MPI_Sètus
 *, 
MPI_D©©y≥
, );

1075 
PMPI_Ty≥_¸óã_keyvÆ
(
MPI_Ty≥_c›y_©å_fun˘i⁄
 *,

1076 
MPI_Ty≥_dñëe_©å_fun˘i⁄
 *, *, *);

1077 
PMPI_Ty≥_dñëe_©å
(
MPI_D©©y≥
, );

1078 
PMPI_Ty≥_dup
(
MPI_D©©y≥
, MPI_Datatype *);

1079 
PMPI_Ty≥_‰ì_keyvÆ
(*);

1080 
PMPI_Ty≥_gë_©å
(
MPI_D©©y≥
, , *, *);

1081 
PMPI_Ty≥_gë_c⁄ã¡s
(
MPI_D©©y≥
, , , , [], 
MPI_Aöt
 [],

1082 
MPI_D©©y≥
 []);

1083 
PMPI_Ty≥_gë_ívñ›e
(
MPI_D©©y≥
, *, *, *, *);

1084 
PMPI_Ty≥_gë_«me
(
MPI_D©©y≥
, *, *);

1085 
PMPI_Ty≥_£t_©å
(
MPI_D©©y≥
, , *);

1086 
PMPI_Ty≥_£t_«me
(
MPI_D©©y≥
, *);

1087 
PMPI_Ty≥_m©ch_size
–, , 
MPI_D©©y≥
 *);

1088 
PMPI_Wö_ˇŒ_îrh™dÀr
(
MPI_Wö
, );

1089 
PMPI_Wö_¸óã_keyvÆ
(
MPI_Wö_c›y_©å_fun˘i⁄
 *,

1090 
MPI_Wö_dñëe_©å_fun˘i⁄
 *, *, *);

1091 
PMPI_Wö_dñëe_©å
(
MPI_Wö
, );

1092 
PMPI_Wö_‰ì_keyvÆ
(*);

1093 
PMPI_Wö_gë_©å
(
MPI_Wö
, , *, *);

1094 
PMPI_Wö_gë_«me
(
MPI_Wö
, *, *);

1095 
PMPI_Wö_£t_©å
(
MPI_Wö
, , *);

1096 
PMPI_Wö_£t_«me
(
MPI_Wö
, *);

1101 
PMPI_Ty≥_¸óã_f90_öãgî
–, 
MPI_D©©y≥
 * );

1102 
PMPI_Ty≥_¸óã_f90_ªÆ
–, , 
MPI_D©©y≥
 * );

1103 
PMPI_Ty≥_¸óã_f90_com∂ex
–, , 
MPI_D©©y≥
 * );

1106 
PMPI_AŒoc_mem
(
MPI_Aöt
, 
MPI_Info
 
öfo
, *
ba£±r
);

1107 
PMPI_Comm_¸óã_îrh™dÀr
(
MPI_Comm_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

1108 
PMPI_Comm_gë_îrh™dÀr
(
MPI_Comm
, 
MPI_Eºh™dÀr
 *);

1109 
PMPI_Comm_£t_îrh™dÀr
(
MPI_Comm
, 
MPI_Eºh™dÀr
);

1110 
PMPI_Fûe_¸óã_îrh™dÀr
(
MPI_Fûe_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

1111 
PMPI_Fûe_gë_îrh™dÀr
(
MPI_Fûe
, 
MPI_Eºh™dÀr
 *);

1112 
PMPI_Fûe_£t_îrh™dÀr
(
MPI_Fûe
, 
MPI_Eºh™dÀr
);

1113 
PMPI_FöÆized
(*);

1114 
PMPI_Fªe_mem
(*);

1115 
PMPI_Gë_addªss
(*, 
MPI_Aöt
 *);

1116 
PMPI_Info_¸óã
(
MPI_Info
 *);

1117 
PMPI_Info_dñëe
(
MPI_Info
, *);

1118 
PMPI_Info_dup
(
MPI_Info
, MPI_Info *);

1119 
PMPI_Info_‰ì
(
MPI_Info
 *
öfo
);

1120 
PMPI_Info_gë
(
MPI_Info
, *, , *, *);

1121 
PMPI_Info_gë_nkeys
(
MPI_Info
, *);

1122 
PMPI_Info_gë_¡hkey
(
MPI_Info
, , *);

1123 
PMPI_Info_gë_vÆuñí
(
MPI_Info
, *, *, *);

1124 
PMPI_Info_£t
(
MPI_Info
, *, *);

1125 
PMPI_Pack_exã∫Æ
(*, *, , 
MPI_D©©y≥
, *, 
MPI_Aöt
,

1126 
MPI_Aöt
 *);

1127 
PMPI_Pack_exã∫Æ_size
(*, , 
MPI_D©©y≥
, 
MPI_Aöt
 *);

1128 
PMPI_Reque°_gë_°©us
(
MPI_Reque°
, *, 
MPI_Sètus
 *);

1129 
PMPI_Sètus_c2f
(
MPI_Sètus
 *, 
MPI_Föt
 *);

1130 
PMPI_Sètus_f2c
(
MPI_Föt
 *, 
MPI_Sètus
 *);

1131 
PMPI_Ty≥_¸óã_d¨øy
(, , , [], [], [], [], ,

1132 
MPI_D©©y≥
, MPI_Datatype *);

1133 
PMPI_Ty≥_¸óã_hödexed
(, [], 
MPI_Aöt
 [], 
MPI_D©©y≥
,

1134 
MPI_D©©y≥
 *);

1135 
PMPI_Ty≥_¸óã_hve˘‹
(, , 
MPI_Aöt
, 
MPI_D©©y≥
, MPI_Datatype *);

1136 
PMPI_Ty≥_¸óã_ödexed_block
(, , [], 
MPI_D©©y≥
,

1137 
MPI_D©©y≥
 *);

1138 
PMPI_Ty≥_¸óã_ªsized
(
MPI_D©©y≥
, 
MPI_Aöt
, MPI_Aint, MPI_Datatype *);

1139 
PMPI_Ty≥_¸óã_°ru˘
(, [], 
MPI_Aöt
 [], 
MPI_D©©y≥
 [],

1140 
MPI_D©©y≥
 *);

1141 
PMPI_Ty≥_¸óã_sub¨øy
(, [], [], [], , 
MPI_D©©y≥
,

1142 
MPI_D©©y≥
 *);

1143 
PMPI_Ty≥_gë_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *, MPI_Aint *);

1144 
PMPI_Ty≥_gë_åue_exã¡
(
MPI_D©©y≥
, 
MPI_Aöt
 *, MPI_Aint *);

1145 
PMPI_U≈ack_exã∫Æ
(*, *, 
MPI_Aöt
, MPI_Aint *, *, ,

1146 
MPI_D©©y≥
);

1147 
PMPI_Wö_¸óã_îrh™dÀr
(
MPI_Wö_îrh™dÀr_fun˘i⁄
 *, 
MPI_Eºh™dÀr
 *);

1148 
PMPI_Wö_gë_îrh™dÀr
(
MPI_Wö
, 
MPI_Eºh™dÀr
 *);

1149 
PMPI_Wö_£t_îrh™dÀr
(
MPI_Wö
, 
MPI_Eºh™dÀr
);

1150 
PMPI_Redu˚_loˇl
(*
öbuf
, *
öoutbuf
, 
cou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
);

1151 
PMPI_Op_commuètive
(
MPI_Op
 
›
, *
commuã
);

1152 
PMPI_Redu˚_sˇâî_block
(*
£ndbuf
, *
ªcvbuf
, 
ªcvcou¡
, 
MPI_D©©y≥
 
d©©y≥
, 
MPI_Op
 
›
, 
MPI_Comm
 
comm
);

1153 
PMPI_Di°_gøph_¸óã_adja˚¡
(
MPI_Comm
 
comm_ﬁd
, 
ödegªe
, [], [], 
outdegªe
, [], [], 
MPI_Info
 
öfo
, 
ª‹dî
, MPI_Comm *
comm_di°_gøph
);

1154 
PMPI_Di°_gøph_¸óã
(
MPI_Comm
 
comm_ﬁd
, 
n
, [], [], [], [], 
MPI_Info
 
öfo
, 
ª‹dî
, MPI_Comm *
comm_di°_gøph
);

1155 
PMPI_Di°_gøph_√ighb‹s_cou¡
(
MPI_Comm
 
comm
, *
ödegªe
, *
outdegªe
, *
weighãd
);

1156 
PMPI_Di°_gøph_√ighb‹s
(
MPI_Comm
 
comm
, 
maxödegªe
, [], [], 
maxoutdegªe
, [], []);

1161 
	#MPIIMPL_ADVERTISES_FEATURES
 1

	)

1162 
	#MPIIMPL_HAVE_MPI_INFO
 1

	)

1163 
	#MPIIMPL_HAVE_MPI_COMBINER_DARRAY
 1

	)

1164 
	#MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY
 1

	)

1165 
	#MPIIMPL_HAVE_MPI_COMBINER_SUBARRAY
 1

	)

1166 
	#MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY
 1

	)

1167 
	#MPIIMPL_HAVE_MPI_COMBINER_DUP
 1

	)

1168 
	#MPIIMPL_HAVE_MPI_GREQUEST
 1

	)

1169 
	#MPIIMPL_HAVE_STATUS_SET_BYTES
 1

	)

1170 
	#MPIIMPL_HAVE_STATUS_SET_INFO
 1

	)

1172 
	~"mpio.h
"

1174 #i‡
deföed
(
__˝lu•lus
)

1184 #i‡!
deföed
(
MPICH_SKIP_MPICXX
)

1188 
	~"mpicxx.h
"

1196 (
	tMPIX_Gªque°_pﬁl_fun˘i⁄
)(*, 
	tMPI_Sètus
 *);

1197 (
	tMPIX_Gªque°_waô_fun˘i⁄
)(, **, , 
	tMPI_Sètus
 *);

1199 
	tMPIX_Gªque°_˛ass
;

1200 
	`MPIX_Gªque°_˛ass_¸óã
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

1201 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

1202 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *,

1203 
MPIX_Gªque°_pﬁl_fun˘i⁄
 *,

1204 
MPIX_Gªque°_waô_fun˘i⁄
 *,

1205 
MPIX_Gªque°_˛ass
 *);

1207 
	`MPIX_Gªque°_˛ass_Æloˇã
(
MPIX_Gªque°_˛ass
,

1209 
MPI_Reque°
 *);

1211 
	`MPIX_Gªque°_°¨t
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

1212 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

1213 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *,

1214 
MPIX_Gªque°_pﬁl_fun˘i⁄
 *,

1215 
MPIX_Gªque°_waô_fun˘i⁄
 *, *, 
MPI_Reque°
 *);

1216 #i‡!
	`deföed
(
MPI_BUILD_PROFILING
)

1217 
	`PMPIX_Gªque°_˛ass_¸óã
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

1218 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

1219 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *,

1220 
MPIX_Gªque°_pﬁl_fun˘i⁄
 *,

1221 
MPIX_Gªque°_waô_fun˘i⁄
 *,

1222 
MPIX_Gªque°_˛ass
 *);

1224 
	`PMPIX_Gªque°_˛ass_Æloˇã
(
MPIX_Gªque°_˛ass
,

1226 
MPI_Reque°
 *);

1227 
	`PMPIX_Gªque°_°¨t
(
MPI_Gªque°_quîy_fun˘i⁄
 *,

1228 
MPI_Gªque°_‰ì_fun˘i⁄
 *,

1229 
MPI_Gªque°_ˇn˚l_fun˘i⁄
 *,

1230 
MPIX_Gªque°_pﬁl_fun˘i⁄
 *,

1231 
MPIX_Gªque°_waô_fun˘i⁄
 *, *, 
MPI_Reque°
 *);

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

73 
	#IP_PMTUDISC_PROBE
 3

	)

76 
	#SOL_IP
 0

	)

78 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

79 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

80 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


86 
	sù_›ts


88 
ö_addr
 
	mù_d°
;

89 
	mù_›ts
[40];

93 
	sù_mªqn


95 
ö_addr
 
	mimr_mu…üddr
;

96 
ö_addr
 
	mimr_addªss
;

97 
	mimr_ifödex
;

101 
	sö_pktöfo


103 
	mùi_ifödex
;

104 
ö_addr
 
	mùi_•ec_d°
;

105 
ö_addr
 
	mùi_addr
;

112 
	#IPV6_ADDRFORM
 1

	)

113 
	#IPV6_2292PKTINFO
 2

	)

114 
	#IPV6_2292HOPOPTS
 3

	)

115 
	#IPV6_2292DSTOPTS
 4

	)

116 
	#IPV6_2292RTHDR
 5

	)

117 
	#IPV6_2292PKTOPTIONS
 6

	)

118 
	#IPV6_CHECKSUM
 7

	)

119 
	#IPV6_2292HOPLIMIT
 8

	)

121 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

123 
	#IPV6_NEXTHOP
 9

	)

124 
	#IPV6_AUTHHDR
 10

	)

125 
	#IPV6_UNICAST_HOPS
 16

	)

126 
	#IPV6_MULTICAST_IF
 17

	)

127 
	#IPV6_MULTICAST_HOPS
 18

	)

128 
	#IPV6_MULTICAST_LOOP
 19

	)

129 
	#IPV6_JOIN_GROUP
 20

	)

130 
	#IPV6_LEAVE_GROUP
 21

	)

131 
	#IPV6_ROUTER_ALERT
 22

	)

132 
	#IPV6_MTU_DISCOVER
 23

	)

133 
	#IPV6_MTU
 24

	)

134 
	#IPV6_RECVERR
 25

	)

135 
	#IPV6_V6ONLY
 26

	)

136 
	#IPV6_JOIN_ANYCAST
 27

	)

137 
	#IPV6_LEAVE_ANYCAST
 28

	)

138 
	#IPV6_IPSEC_POLICY
 34

	)

139 
	#IPV6_XFRM_POLICY
 35

	)

141 
	#IPV6_RECVPKTINFO
 49

	)

142 
	#IPV6_PKTINFO
 50

	)

143 
	#IPV6_RECVHOPLIMIT
 51

	)

144 
	#IPV6_HOPLIMIT
 52

	)

145 
	#IPV6_RECVHOPOPTS
 53

	)

146 
	#IPV6_HOPOPTS
 54

	)

147 
	#IPV6_RTHDRDSTOPTS
 55

	)

148 
	#IPV6_RECVRTHDR
 56

	)

149 
	#IPV6_RTHDR
 57

	)

150 
	#IPV6_RECVDSTOPTS
 58

	)

151 
	#IPV6_DSTOPTS
 59

	)

153 
	#IPV6_RECVTCLASS
 66

	)

154 
	#IPV6_TCLASS
 67

	)

157 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

158 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

159 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

160 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

163 
	#IPV6_PMTUDISC_DONT
 0

	)

164 
	#IPV6_PMTUDISC_WANT
 1

	)

165 
	#IPV6_PMTUDISC_DO
 2

	)

166 
	#IPV6_PMTUDISC_PROBE
 3

	)

169 
	#SOL_IPV6
 41

	)

170 
	#SOL_ICMPV6
 58

	)

173 
	#IPV6_RTHDR_LOOSE
 0

	)

174 
	#IPV6_RTHDR_STRICT
 1

	)

176 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HWPOISON
 100

	)

102 #ifde‡
__USE_XOPEN2K


103 
	#POSIX_MADV_NORMAL
 0

	)

104 
	#POSIX_MADV_RANDOM
 1

	)

105 
	#POSIX_MADV_SEQUENTIAL
 2

	)

106 
	#POSIX_MADV_WILLNEED
 3

	)

107 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #ifde‡
__USE_XOPEN


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

20 #i‚de‡
_SETJMP_H


25 #ifde‡
__REDIRECT_NTH


26 
__REDIRECT_NTH
 (
l⁄gjmp
,

27 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

28 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

29 
__REDIRECT_NTH
 (
_l⁄gjmp
,

30 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

31 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

32 
__REDIRECT_NTH
 (
sigl⁄gjmp
,

33 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

34 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

36 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

37 
__THROW
 
__©åibuã__
 ((
__n‹ëu∫__
));

38 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

40 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

236 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

239 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

245 
	smsghdr


247 *
	mmsg_«me
;

248 
sockÀn_t
 
	mmsg_«mñí
;

250 
iovec
 *
	mmsg_iov
;

251 
size_t
 
	mmsg_iovÀn
;

253 *
	mmsg_c⁄åﬁ
;

254 
size_t
 
	mmsg_c⁄åﬁÀn
;

259 
	mmsg_Êags
;

263 
	scmsghdr


265 
size_t
 
	mcmsg_Àn
;

270 
	mcmsg_Àvñ
;

271 
	mcmsg_ty≥
;

272 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

273 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

278 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

279 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

281 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

283 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

284 
	#CMSG_FIRSTHDR
(
mhdr
) \

285 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

286 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

287 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

288 & (
size_t
Ë~( (size_tË- 1))

	)

289 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

290 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

291 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

293 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

294 
cmsghdr
 *
__cmsg
Ë
__THROW
;

295 #ifde‡
__USE_EXTERN_INLINES


296 #i‚de‡
_EXTERN_INLINE


297 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

299 
_EXTERN_INLINE
 
cmsghdr
 *

300 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

302 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

306 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

307 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

308 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


309 + 
__mhdr
->
msg_c⁄åﬁÀn
)

310 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

311 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

314  
__cmsg
;

315 
	}
}

322 
	mSCM_RIGHTS
 = 0x01

323 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

324 #ifde‡
__USE_GNU


325 , 
	mSCM_CREDENTIALS
 = 0x02

326 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

330 #ifde‡
__USE_GNU


332 
	su¸ed


334 
pid_t
 
	mpid
;

335 
uid_t
 
	muid
;

336 
gid_t
 
	mgid
;

341 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


342 #i‚de‡
FIOGETOWN


343 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

345 #i‚de‡
FIOSETOWN


346 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

348 #i‚de‡
SIOCATMARK


349 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

351 #i‚de‡
SIOCGPGRP


352 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

354 #i‚de‡
SIOCGSTAMP


355 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

357 #i‚de‡
SIOCGSTAMPNS


358 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

360 #i‚de‡
SIOCSPGRP


361 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

366 
	~<asm/sockë.h
>

368 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


369 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


370 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


371 #unde‡
FIOGETOWN


373 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


374 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


375 #unde‡
FIOSETOWN


377 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


378 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


379 #unde‡
SIOCATMARK


381 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


382 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


383 #unde‡
SIOCGPGRP


385 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


386 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


387 #unde‡
SIOCGSTAMP


389 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


390 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


391 #unde‡
SIOCGSTAMPNS


393 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


394 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


395 #unde‡
SIOCSPGRP


400 
	slögî


402 
	ml_⁄off
;

403 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/utsname.h

19 #i‚de‡
_SYS_UTSNAME_H


24 
	#_UTSNAME_LENGTH
 65

	)

29 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/stropts.h

19 #i‚de‡
_STROPTS_H


20 
	#_STROPTS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/xtôy≥s.h
>

26 #i‚de‡
__gid_t_deföed


27 
__gid_t
 
	tgid_t
;

28 
	#__gid_t_deföed


	)

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

74 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

81 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, 
__c⁄°
 *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/stropts.h

19 #i‚de‡
_STROPTS_H


23 #i‚de‡
_BITS_STROPTS_H


24 
	#_BITS_STROPTS_H
 1

	)

26 
	~<bôs/ty≥s.h
>

29 
	#__SID
 ('S' << 8)

	)

31 
	#I_NREAD
 (
__SID
 | 1Ë

	)

33 
	#I_PUSH
 (
__SID
 | 2Ë

	)

35 
	#I_POP
 (
__SID
 | 3Ë

	)

37 
	#I_LOOK
 (
__SID
 | 4Ë

	)

40 
	#I_FLUSH
 (
__SID
 | 5Ë

	)

41 
	#I_SRDOPT
 (
__SID
 | 6Ë

	)

42 
	#I_GRDOPT
 (
__SID
 | 7Ë

	)

43 
	#I_STR
 (
__SID
 | 8Ë

	)

45 
	#I_SETSIG
 (
__SID
 | 9Ë

	)

47 
	#I_GETSIG
 (
__SID
 |10Ë

	)

50 
	#I_FIND
 (
__SID
 |11Ë

	)

53 
	#I_LINK
 (
__SID
 |12Ë

	)

54 
	#I_UNLINK
 (
__SID
 |13Ë

	)

55 
	#I_PEEK
 (
__SID
 |15Ë

	)

59 
	#I_FDINSERT
 (
__SID
 |16Ë

	)

62 
	#I_SENDFD
 (
__SID
 |17Ë

	)

66 
	#I_RECVFD
 (
__SID
 |14Ë

	)

67 
	#I_SWROPT
 (
__SID
 |19Ë

	)

68 
	#I_GWROPT
 (
__SID
 |20Ë

	)

69 
	#I_LIST
 (
__SID
 |21Ë

	)

71 
	#I_PLINK
 (
__SID
 |22Ë

	)

73 
	#I_PUNLINK
 (
__SID
 |23Ë

	)

75 
	#I_FLUSHBAND
 (
__SID
 |28Ë

	)

76 
	#I_CKBAND
 (
__SID
 |29Ë

	)

79 
	#I_GETBAND
 (
__SID
 |30Ë

	)

81 
	#I_ATMARK
 (
__SID
 |31Ë

	)

84 
	#I_SETCLTIME
 (
__SID
 |32Ë

	)

87 
	#I_GETCLTIME
 (
__SID
 |33Ë

	)

88 
	#I_CANPUT
 (
__SID
 |34Ë

	)

92 
	#FMNAMESZ
 8

	)

95 
	#FLUSHR
 0x01

	)

96 
	#FLUSHW
 0x02

	)

97 
	#FLUSHRW
 0x03

	)

98 #ifde‡
__USE_GNU


99 
	#FLUSHBAND
 0x04

	)

103 
	#S_INPUT
 0x0001

	)

105 
	#S_HIPRI
 0x0002

	)

106 
	#S_OUTPUT
 0x0004

	)

108 
	#S_MSG
 0x0008

	)

111 
	#S_ERROR
 0x0010

	)

112 
	#S_HANGUP
 0x0020

	)

113 
	#S_RDNORM
 0x0040

	)

114 
	#S_WRNORM
 
S_OUTPUT


	)

115 
	#S_RDBAND
 0x0080

	)

117 
	#S_WRBAND
 0x0100

	)

119 
	#S_BANDURG
 0x0200

	)

125 
	#RS_HIPRI
 0x01

	)

128 
	#RNORM
 0x0000

	)

129 
	#RMSGD
 0x0001

	)

130 
	#RMSGN
 0x0002

	)

131 
	#RPROTDAT
 0x0004

	)

133 
	#RPROTDIS
 0x0008

	)

135 
	#RPROTNORM
 0x0010

	)

138 #ifde‡
__USE_GNU


139 
	#RPROTMASK
 0x001C

	)

143 
	#SNDZERO
 0x001

	)

145 #ifde‡
__USE_GNU


146 
	#SNDPIPE
 0x002

	)

151 
	#ANYMARK
 0x01

	)

152 
	#LASTMARK
 0x02

	)

156 #ifde‡
__USE_GNU


157 
	#MUXID_ALL
 (-1Ë

	)

163 
	#MSG_HIPRI
 0x01

	)

164 
	#MSG_ANY
 0x02

	)

165 
	#MSG_BAND
 0x04

	)

168 
	#MORECTL
 1

	)

170 
	#MOREDATA
 2

	)

174 
	sb™döfo


176 
	mbi_¥i
;

177 
	mbi_Êag
;

180 
	s°rbuf


182 
	mmaxÀn
;

183 
	mÀn
;

184 *
	mbuf
;

187 
	s°Ωìk


189 
°rbuf
 
	m˘lbuf
;

190 
°rbuf
 
	md©abuf
;

191 
t_usˇœr_t
 
	mÊags
;

194 
	s°rfdö£π


196 
°rbuf
 
	m˘lbuf
;

197 
°rbuf
 
	md©abuf
;

198 
t_usˇœr_t
 
	mÊags
;

199 
	mfûdes
;

200 
	moff£t
;

203 
	s°rio˘l


205 
	mic_cmd
;

206 
	mic_timout
;

207 
	mic_Àn
;

208 *
	mic_dp
;

211 
	s°ºecvfd


213 
	mfd
;

214 
uid_t
 
	muid
;

215 
gid_t
 
	mgid
;

216 
	m__fûl
[8];

220 
	s°r_mli°


222 
	ml_«me
[
FMNAMESZ
 + 1];

225 
	s°r_li°


227 
	m¶_nmods
;

228 
°r_mli°
 *
	m¶_modli°
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/xtitypes.h

20 #i‚de‡
_STROPTS_H


24 #i‚de‡
_BITS_XTITYPES_H


25 
	#_BITS_XTITYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 
__SLONG32_TYPE
 
	t__t_sˇœr_t
;

31 
__ULONG32_TYPE
 
	t__t_usˇœr_t
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
221
5425
include/isp/assert.h
include/isp/isp.h
include/isp/mpi.h
libopts/ag-char-map.h
libopts/autoopts.c
libopts/autoopts.h
libopts/autoopts/options.h
libopts/autoopts/usage-txt.h
libopts/boolean.c
libopts/compat/compat.h
libopts/compat/pathfind.c
libopts/compat/snprintf.c
libopts/compat/strchr.c
libopts/compat/strdup.c
libopts/compat/windows-config.h
libopts/config.h
libopts/configfile.c
libopts/cook.c
libopts/enumeration.c
libopts/environment.c
libopts/file.c
libopts/genshell.c
libopts/genshell.h
libopts/libopts.c
libopts/load.c
libopts/makeshell.c
libopts/nested.c
libopts/numeric.c
libopts/parse-duration.c
libopts/parse-duration.h
libopts/pgusage.c
libopts/proto.h
libopts/putshell.c
libopts/reset.c
libopts/restore.c
libopts/save.c
libopts/sort.c
libopts/stack.c
libopts/streqvcmp.c
libopts/text_mmap.c
libopts/time.c
libopts/tokenize.c
libopts/usage.c
libopts/value-type.c
libopts/value-type.h
libopts/version.c
libopts/xat-attribute.c
libopts/xat-attribute.h
profiler/Client.c
profiler/Client.h
profiler/HashMap.c
profiler/HashMap.h
profiler/HashMap_comm.c
profiler/HashMap_comm.h
profiler/HashMap_match.c
profiler/HashMap_match.h
profiler/Profiler.c
profiler/Profiler.h
profiler/isp.h
profiler/mem.cpp
profiler/mem.h
profiler/mpi_func_structs.h
scheduler/Envelope.cpp
scheduler/Envelope.hpp
scheduler/InterleavingTree.cpp
scheduler/InterleavingTree.hpp
scheduler/MpiProc.cpp
scheduler/MpiProc.hpp
scheduler/Scheduler.cpp
scheduler/Scheduler.hpp
scheduler/ServerSocket.cpp
scheduler/ServerSocket.hpp
scheduler/Socket.cpp
scheduler/Socket.hpp
scheduler/Transition.cpp
scheduler/Transition.hpp
scheduler/TransitionList.cpp
scheduler/TransitionList.hpp
scheduler/config.hpp
scheduler/main.cpp
scheduler/name2id.cpp
scheduler/name2id.hpp
scheduler/sched-opt.c
scheduler/sched-opt.h
scripts/assert.h
scripts/mpi.h
/home/subodh/research/isp-versions/isp-trunk/include/isp/isp.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/autoopts/options.h
/usr/include/autoopts/usage-txt.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/dir.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/stropts.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/sys/wait.h
/usr/include/sysexits.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/local/include/mpi.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/poll.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stropts.h
/usr/include/sys/cdefs.h
/usr/include/sys/resource.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/stropts.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/xtitypes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
